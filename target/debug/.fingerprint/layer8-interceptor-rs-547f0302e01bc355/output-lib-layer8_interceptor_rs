{"$message_type":"diagnostic","message":"unknown lint: `clippy::inverted_saturating_sub`","code":{"code":"E0602","explanation":"An unknown or invalid lint was used on the command line.\n\nErroneous code example:\n\n```sh\nrustc -D bogus rust_file.rs\n```\n\nMaybe you just misspelled the lint name or the lint doesn't exist anymore.\nEither way, try to update/remove it in order to fix the error.\n"},"level":"warning","spans":[],"children":[{"message":"did you mean: `clippy::implicit_saturating_sub`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"requested on the command line with `-D clippy::inverted_saturating_sub`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unknown_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0602]\u001b[0m\u001b[0m\u001b[1m: unknown lint: `clippy::inverted_saturating_sub`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: did you mean: `clippy::implicit_saturating_sub`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: requested on the command line with `-D clippy::inverted_saturating_sub`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unknown_lints)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown lint: `clippy::zombie_processes`","code":{"code":"E0602","explanation":"An unknown or invalid lint was used on the command line.\n\nErroneous code example:\n\n```sh\nrustc -D bogus rust_file.rs\n```\n\nMaybe you just misspelled the lint name or the lint doesn't exist anymore.\nEither way, try to update/remove it in order to fix the error.\n"},"level":"warning","spans":[],"children":[{"message":"requested on the command line with `-W clippy::zombie_processes`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0602]\u001b[0m\u001b[0m\u001b[1m: unknown lint: `clippy::zombie_processes`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: requested on the command line with `-W clippy::zombie_processes`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`mod.rs` files are not allowed, found `src/js_glue/mod.rs`","code":{"code":"clippy::mod_module_files","explanation":null},"level":"warning","spans":[{"file_name":"src/js_glue/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub mod js_imports;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move `src/js_glue/mod.rs` to `src/js_glue.rs`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mod_module_files","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::mod-module-files` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::mod_module_files)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `mod.rs` files are not allowed, found `src/js_glue/mod.rs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/mod.rs:1:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod js_imports;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: move `src/js_glue/mod.rs` to `src/js_glue.rs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mod_module_files\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::mod-module-files` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::mod_module_files)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"binding's name is too similar to existing binding","code":{"code":"clippy::similar_names","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4987,"byte_end":4990,"line_start":146,"line_end":146,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let res = client","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"existing binding defined here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":4070,"byte_end":4073,"line_start":111,"line_end":111,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let req = types::Request {","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::similar-names` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::similar_names)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: binding's name is too similar to existing binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:146:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let res = client\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: existing binding defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:111:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let req = types::Request {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::similar-names` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::similar_names)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"binding's name is too similar to existing binding","code":{"code":"clippy::similar_names","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4699,"byte_end":4702,"line_start":133,"line_end":133,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let res = {","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"existing binding defined here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":4070,"byte_end":4073,"line_start":111,"line_end":111,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let req = types::Request {","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: binding's name is too similar to existing binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:133:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: existing binding defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:111:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let req = types::Request {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"binding's name is too similar to existing binding","code":{"code":"clippy::similar_names","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11656,"byte_end":11659,"line_start":339,"line_end":339,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"                Ok(res) => res,","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"existing binding defined here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":7624,"byte_end":7627,"line_start":228,"line_end":228,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    let mut req = types::Request {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: binding's name is too similar to existing binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:339:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m339\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok(res) => res,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: existing binding defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:228:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut req = types::Request {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"binding's name is too similar to existing binding","code":{"code":"clippy::similar_names","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13422,"byte_end":13425,"line_start":392,"line_end":392,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"                Ok(res) => res,","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"existing binding defined here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":7624,"byte_end":7627,"line_start":228,"line_end":228,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    let mut req = types::Request {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: binding's name is too similar to existing binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:392:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok(res) => res,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: existing binding defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:228:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut req = types::Request {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"binding's name is too similar to existing binding","code":{"code":"clippy::similar_names","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10465,"byte_end":10468,"line_start":305,"line_end":305,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let res = match &content_type[..] {","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"existing binding defined here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":7624,"byte_end":7627,"line_start":228,"line_end":228,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    let mut req = types::Request {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: binding's name is too similar to existing binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:305:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = match &content_type[..] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: existing binding defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:228:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut req = types::Request {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"usage of `pub` without `in`","code":{"code":"clippy::pub_with_shorthand","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25732,"byte_end":25742,"line_start":740,"line_end":740,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) fn rebuild_url(url: &str) -> String {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::pub-with-shorthand` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::pub_with_shorthand)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add it","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25732,"byte_end":25742,"line_start":740,"line_end":740,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) fn rebuild_url(url: &str) -> String {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"pub(in crate)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `pub` without `in`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:740:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) fn rebuild_url(url: &str) -> String {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add it: `pub(in crate)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::pub-with-shorthand` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::pub_with_shorthand)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"usage of `pub` without `in`","code":{"code":"clippy::pub_with_shorthand","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":62,"byte_end":72,"line_start":5,"line_end":5,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) mod js_glue;","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add it","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":62,"byte_end":72,"line_start":5,"line_end":5,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) mod js_glue;","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"pub(in crate)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `pub` without `in`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:5:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod js_glue;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add it: `pub(in crate)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using `pub use`","code":{"code":"clippy::pub_use","explanation":null},"level":"warning","spans":[{"file_name":"src/js_glue/js_imports.rs","byte_start":2238,"byte_end":2260,"line_start":83,"line_end":83,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"pub use console_error;","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move the exported item to a public module instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::pub-use` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::pub_use)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using `pub use`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/js_imports.rs:83:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use console_error;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: move the exported item to a public module instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::pub-use` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::pub_use)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using `pub use`","code":{"code":"clippy::pub_use","explanation":null},"level":"warning","spans":[{"file_name":"src/js_glue/js_imports.rs","byte_start":2261,"byte_end":2281,"line_start":84,"line_end":84,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"pub use console_log;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move the exported item to a public module instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using `pub use`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/js_imports.rs:84:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use console_log;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: move the exported item to a public module instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"usage of `pub` without `in`","code":{"code":"clippy::pub_with_shorthand","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":86,"byte_end":96,"line_start":6,"line_end":6,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) mod types;","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add it","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":86,"byte_end":96,"line_start":6,"line_end":6,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) mod types;","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"pub(in crate)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `pub` without `in`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod types;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add it: `pub(in crate)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"usage of `pub` without `in`","code":{"code":"clippy::pub_with_shorthand","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1248,"byte_end":1258,"line_start":32,"line_end":32,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) struct InitConfig {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add it","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":1248,"byte_end":1258,"line_start":32,"line_end":32,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) struct InitConfig {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"pub(in crate)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `pub` without `in`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:32:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) struct InitConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add it: `pub(in crate)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"scoped visibility modifier on a field","code":{"code":"clippy::field_scoped_visibility_modifiers","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1283,"byte_end":1293,"line_start":33,"line_end":33,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    pub(crate) proxy: String,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider making the field private and adding a scoped visibility method for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::field-scoped-visibility-modifiers` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::field_scoped_visibility_modifiers)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: scoped visibility modifier on a field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:33:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) proxy: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider making the field private and adding a scoped visibility method for it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::field-scoped-visibility-modifiers` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::field_scoped_visibility_modifiers)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"scoped visibility modifier on a field","code":{"code":"clippy::field_scoped_visibility_modifiers","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1313,"byte_end":1323,"line_start":34,"line_end":34,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    pub(crate) static_paths: Vec<String>,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider making the field private and adding a scoped visibility method for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: scoped visibility modifier on a field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) static_paths: Vec<String>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider making the field private and adding a scoped visibility method for it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"scoped visibility modifier on a field","code":{"code":"clippy::field_scoped_visibility_modifiers","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1355,"byte_end":1365,"line_start":35,"line_end":35,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    pub(crate) providers: Vec<String>,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider making the field private and adding a scoped visibility method for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: scoped visibility modifier on a field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) providers: Vec<String>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider making the field private and adding a scoped visibility method for it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"usage of `pub` without `in`","code":{"code":"clippy::pub_with_shorthand","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":108,"byte_end":118,"line_start":7,"line_end":7,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) mod js_imports_prelude {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add it","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":108,"byte_end":118,"line_start":7,"line_end":7,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) mod js_imports_prelude {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"pub(in crate)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `pub` without `in`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:7:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod js_imports_prelude {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add it: `pub(in crate)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using `pub use`","code":{"code":"clippy::pub_use","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":172,"byte_end":310,"line_start":9,"line_end":9,"column_start":5,"column_end":143,"is_primary":true,"text":[{"text":"    pub use js_glue::js_imports::{clear_expired_cache, console_error, console_log, get_prototype_of, object_entries, serve_static, to_string};","highlight_start":5,"highlight_end":143}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move the exported item to a public module instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using `pub use`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use js_glue::js_imports::{clear_expired_cache, console_error, console_log, get_prototype_of, object_entries, serve_static, to_string};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: move the exported item to a public module instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using `pub use`","code":{"code":"clippy::pub_use","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":345,"byte_end":405,"line_start":12,"line_end":12,"column_start":5,"column_end":65,"is_primary":true,"text":[{"text":"    pub use js_glue::js_imports::{console_error_, console_log_};","highlight_start":5,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move the exported item to a public module instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using `pub use`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use js_glue::js_imports::{console_error_, console_log_};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: move the exported item to a public module instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`clippy::restriction` is not meant to be enabled as a group","code":{"code":"clippy::blanket_clippy_restriction_lints","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"because of the command line `--warn clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"enable the restriction lints you need individually","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::blanket_clippy_restriction_lints)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `clippy::restriction` is not meant to be enabled as a group\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: because of the command line `--warn clippy::restriction`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: enable the restriction lints you need individually\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::blanket_clippy_restriction_lints)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for the crate","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":0,"byte_end":407,"line_start":1,"line_end":13,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod js;","highlight_start":1,"highlight_end":12},{"text":"#[cfg(feature = \"websocket\")]","highlight_start":1,"highlight_end":30},{"text":"pub mod websocket;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub(crate) mod js_glue;","highlight_start":1,"highlight_end":24},{"text":"pub(crate) mod types;","highlight_start":1,"highlight_end":22},{"text":"pub(crate) mod js_imports_prelude {","highlight_start":1,"highlight_end":36},{"text":"    use crate::js_glue;","highlight_start":1,"highlight_end":24},{"text":"    pub use js_glue::js_imports::{clear_expired_cache, console_error, console_log, get_prototype_of, object_entries, serve_static, to_string};","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(debug_assertions)]","highlight_start":1,"highlight_end":29},{"text":"    pub use js_glue::js_imports::{console_error_, console_log_};","highlight_start":1,"highlight_end":65},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::missing-docs-in-private-items` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::missing_docs_in_private_items)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for the crate\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod js;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"websocket\")]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod websocket;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use js_glue::js_imports::{console_error_, console_log_};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::missing-docs-in-private-items` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::missing_docs_in_private_items)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used import from `std` instead of `core`","code":{"code":"clippy::std_instead_of_core","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4,"byte_end":7,"line_start":1,"line_end":1,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::cell::RefCell;","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::std-instead-of-core` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::std_instead_of_core)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing the item from `core`","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4,"byte_end":7,"line_start":1,"line_end":1,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::cell::RefCell;","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"core","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used import from `std` instead of `core`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::cell::RefCell;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider importing the item from `core`: `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::std-instead-of-core` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::std_instead_of_core)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used import from `std` instead of `core`","code":{"code":"clippy::std_instead_of_core","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":28,"byte_end":31,"line_start":2,"line_end":2,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::{cell::Cell, collections::HashMap};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing the item from `core`","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":28,"byte_end":31,"line_start":2,"line_end":2,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::{cell::Cell, collections::HashMap};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"core","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used import from `std` instead of `core`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{cell::Cell, collections::HashMap};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider importing the item from `core`: `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a constant","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":705,"byte_end":748,"line_start":21,"line_end":21,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"const INTERCEPTOR_VERSION: &str = \"0.0.14\";","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a constant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:21:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst INTERCEPTOR_VERSION: &str = \"0.0.14\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a constant","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":749,"byte_end":795,"line_start":22,"line_end":22,"column_start":1,"column_end":47,"is_primary":true,"text":[{"text":"const INDEXED_DB_CACHE: &str = \"_layer8cache\";","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a constant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:22:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst INDEXED_DB_CACHE: &str = \"_layer8cache\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"item in documentation is missing backticks","code":{"code":"clippy::doc_markdown","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":831,"byte_end":840,"line_start":23,"line_end":23,"column_start":36,"column_end":45,"is_primary":true,"text":[{"text":"/// The cache time-to-live for the IndexedDB cache is 2 days.","highlight_start":36,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::doc-markdown` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":831,"byte_end":840,"line_start":23,"line_end":23,"column_start":36,"column_end":45,"is_primary":true,"text":[{"text":"/// The cache time-to-live for the IndexedDB cache is 2 days.","highlight_start":36,"highlight_end":45}],"label":null,"suggested_replacement":"`IndexedDB`","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item in documentation is missing backticks\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:23:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// The cache time-to-live for the IndexedDB cache is 2 days.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::doc-markdown` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m/// The cache time-to-live for the \u001b[0m\u001b[0m\u001b[38;5;10m`IndexedDB`\u001b[0m\u001b[0m cache is 2 days.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1305,"byte_end":1319,"line_start":30,"line_end":30,"column_start":56,"column_end":70,"is_primary":true,"text":[{"text":"    pub(crate) static UP_JWT: Cell<String> = Cell::new(\"\".to_string());","highlight_start":56,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::str-to-string` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::str_to_string)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":1305,"byte_end":1319,"line_start":30,"line_end":30,"column_start":56,"column_end":70,"is_primary":true,"text":[{"text":"    pub(crate) static UP_JWT: Cell<String> = Cell::new(\"\".to_string());","highlight_start":56,"highlight_end":70}],"label":null,"suggested_replacement":"\"\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:30:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) static UP_JWT: Cell<String> = Cell::new(\"\".to_string());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"\".to_owned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::str-to-string` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::str_to_string)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"empty String is being created manually","code":{"code":"clippy::manual_string_new","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1305,"byte_end":1319,"line_start":30,"line_end":30,"column_start":56,"column_end":70,"is_primary":true,"text":[{"text":"    pub(crate) static UP_JWT: Cell<String> = Cell::new(\"\".to_string());","highlight_start":56,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::manual-string-new` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::manual_string_new)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":1305,"byte_end":1319,"line_start":30,"line_end":30,"column_start":56,"column_end":70,"is_primary":true,"text":[{"text":"    pub(crate) static UP_JWT: Cell<String> = Cell::new(\"\".to_string());","highlight_start":56,"highlight_end":70}],"label":null,"suggested_replacement":"String::new()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: empty String is being created manually\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:30:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) static UP_JWT: Cell<String> = Cell::new(\"\".to_string());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using: `String::new()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::manual-string-new` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::manual_string_new)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1461,"byte_end":1475,"line_start":32,"line_end":32,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    pub(crate) static UUID: Cell<String> = Cell::new(\"\".to_string());","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":1461,"byte_end":1475,"line_start":32,"line_end":32,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    pub(crate) static UUID: Cell<String> = Cell::new(\"\".to_string());","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":"\"\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:32:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) static UUID: Cell<String> = Cell::new(\"\".to_string());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"\".to_owned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"empty String is being created manually","code":{"code":"clippy::manual_string_new","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1461,"byte_end":1475,"line_start":32,"line_end":32,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    pub(crate) static UUID: Cell<String> = Cell::new(\"\".to_string());","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":1461,"byte_end":1475,"line_start":32,"line_end":32,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    pub(crate) static UUID: Cell<String> = Cell::new(\"\".to_string());","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":"String::new()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: empty String is being created manually\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:32:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) static UUID: Cell<String> = Cell::new(\"\".to_string());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using: `String::new()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"default numeric fallback might occur","code":{"code":"clippy::default_numeric_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1608,"byte_end":1609,"line_start":35,"line_end":35,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"    static COUNTER: Cell<i32> = const { Cell::new(0) };","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::default-numeric-fallback` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::default_numeric_fallback)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider adding suffix","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":1608,"byte_end":1609,"line_start":35,"line_end":35,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"    static COUNTER: Cell<i32> = const { Cell::new(0) };","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":"0_i32","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: default numeric fallback might occur\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:35:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static COUNTER: Cell<i32> = const { Cell::new(0) };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider adding suffix: `0_i32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::default-numeric-fallback` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::default_numeric_fallback)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1885,"byte_end":1906,"line_start":41,"line_end":41,"column_start":41,"column_end":62,"is_primary":true,"text":[{"text":"    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([","highlight_start":41,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::absolute-paths` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::absolute_paths)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:41:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::absolute-paths` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::absolute_paths)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1885,"byte_end":1906,"line_start":41,"line_end":41,"column_start":41,"column_end":62,"is_primary":true,"text":[{"text":"    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([","highlight_start":41,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:41:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1948,"byte_end":1976,"line_start":43,"line_end":43,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            INDEXED_DB_CACHE.to_string(),","highlight_start":13,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":1948,"byte_end":1976,"line_start":43,"line_end":43,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            INDEXED_DB_CACHE.to_string(),","highlight_start":13,"highlight_end":41}],"label":null,"suggested_replacement":"INDEXED_DB_CACHE.to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:43:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            INDEXED_DB_CACHE.to_string(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `INDEXED_DB_CACHE.to_owned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2023,"byte_end":2043,"line_start":45,"line_end":45,"column_start":24,"column_end":44,"is_primary":true,"text":[{"text":"                store: \"static\".to_string(),","highlight_start":24,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":2023,"byte_end":2043,"line_start":45,"line_end":45,"column_start":24,"column_end":44,"is_primary":true,"text":[{"text":"                store: \"static\".to_string(),","highlight_start":24,"highlight_end":44}],"label":null,"suggested_replacement":"\"static\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:45:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                store: \"static\".to_string(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"static\".to_owned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2071,"byte_end":2088,"line_start":46,"line_end":46,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"                key_path: \"url\".to_string(),","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":2071,"byte_end":2088,"line_start":46,"line_end":46,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"                key_path: \"url\".to_string(),","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":"\"url\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:46:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                key_path: \"url\".to_string(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"url\".to_owned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2115,"byte_end":2136,"line_start":47,"line_end":47,"column_start":26,"column_end":47,"is_primary":true,"text":[{"text":"                indexes: crate::types::Indexes{","highlight_start":26,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:47:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                indexes: crate::types::Indexes{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1885,"byte_end":1906,"line_start":41,"line_end":41,"column_start":41,"column_end":62,"is_primary":true,"text":[{"text":"    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([","highlight_start":41,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:41:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":1885,"byte_end":1906,"line_start":41,"line_end":41,"column_start":41,"column_end":62,"is_primary":true,"text":[{"text":"    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([","highlight_start":41,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:41:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static INDEXED_DBS: HashMap<String, crate::types::DbCache> = HashMap::from([\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"docs for function returning `Result` missing `# Errors` section","code":{"code":"clippy::missing_errors_doc","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2645,"byte_end":2708,"line_start":63,"line_end":63,"column_start":1,"column_end":64,"is_primary":true,"text":[{"text":"pub async fn get_static(url: String) -> Result<String, JsError> {","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: docs for function returning `Result` missing `# Errors` section\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:63:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn get_static(url: String) -> Result<String, JsError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a function","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2645,"byte_end":7029,"line_start":63,"line_end":211,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn get_static(url: String) -> Result<String, JsError> {","highlight_start":1,"highlight_end":66},{"text":"    if url.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Err(JsError::new(\"Invalid url provided to fetch call\"));","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    match check_if_asset_exists(INDEXED_DB_CACHE, &url).await {","highlight_start":1,"highlight_end":64},{"text":"        Ok(val) => {","highlight_start":1,"highlight_end":21},{"text":"            if let Some(val) = val.as_string() {","highlight_start":1,"highlight_end":49},{"text":"                if !val.is_empty() {","highlight_start":1,"highlight_end":37},{"text":"                    // if file is in cache, short-circuit","highlight_start":1,"highlight_end":58},{"text":"                    return Ok(val);","highlight_start":1,"highlight_end":36},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            console_log!(&format!(\"error is {:?}\", e));","highlight_start":1,"highlight_end":56},{"text":"            return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":46},{"text":"                \"Error occurred interacting with IndexDB: {}\",","highlight_start":1,"highlight_end":63},{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":1,"highlight_end":73},{"text":"            )));","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let static_paths = STATIC_PATHS.with(|v| {","highlight_start":1,"highlight_end":47},{"text":"        let val = v.take();","highlight_start":1,"highlight_end":28},{"text":"        v.replace(val.clone());","highlight_start":1,"highlight_end":32},{"text":"        val","highlight_start":1,"highlight_end":12},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\", url);","highlight_start":1,"highlight_end":64},{"text":"    let req_url = rebuild_url(&url);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let client = L8_CLIENTS.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"        let val = v.take();","highlight_start":1,"highlight_end":28},{"text":"        v.replace(val.clone());","highlight_start":1,"highlight_end":32},{"text":"        val.get(&req_url).cloned()","highlight_start":1,"highlight_end":35},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut assets_glob_url = req_url.clone();","highlight_start":1,"highlight_end":47},{"text":"    for static_path in static_paths.iter() {","highlight_start":1,"highlight_end":45},{"text":"        if url.contains(static_path) {","highlight_start":1,"highlight_end":39},{"text":"            assets_glob_url.push_str(static_path);","highlight_start":1,"highlight_end":51},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Request URL: {}\", req_url));","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let req = types::Request {","highlight_start":1,"highlight_end":31},{"text":"        method: \"GET\".to_string(),","highlight_start":1,"highlight_end":35},{"text":"        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),","highlight_start":1,"highlight_end":96},{"text":"        body: json_body.as_bytes().to_vec(),","highlight_start":1,"highlight_end":45},{"text":"        url_path: Some(assets_glob_url.clone()),","highlight_start":1,"highlight_end":49},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let symmetric_key = {","highlight_start":1,"highlight_end":26},{"text":"        let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":1,"highlight_end":58},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match symmetric_key {","highlight_start":1,"highlight_end":30},{"text":"            Some(key) => key,","highlight_start":1,"highlight_end":30},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                return Err(JsError::new(\"symmetric key not found.\"));","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res = {","highlight_start":1,"highlight_end":16},{"text":"        let up_jwt = UP_JWT.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let uuid = UUID.with(|v| {","highlight_start":1,"highlight_end":35},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let res = client","highlight_start":1,"highlight_end":25},{"text":"            .expect_throw(\"client could not be found. This is likely due to the encrypted tunnel not being established correctly.\")","highlight_start":1,"highlight_end":132},{"text":"            .r#do(&req, &symmetric_key, &req_url, true, &up_jwt, &uuid)","highlight_start":1,"highlight_end":72},{"text":"            .await;","highlight_start":1,"highlight_end":20},{"text":"        match res {","highlight_start":1,"highlight_end":20},{"text":"            Ok(val) => val,","highlight_start":1,"highlight_end":28},{"text":"            Err(e) => {","highlight_start":1,"highlight_end":24},{"text":"                console_log!(&format!(","highlight_start":1,"highlight_end":39},{"text":"                    \"Failed to fetch: {}\\nWith request {:?}\\nWith headers {:?}\",","highlight_start":1,"highlight_end":81},{"text":"                    e,","highlight_start":1,"highlight_end":23},{"text":"                    String::from_utf8_lossy(&req.body),","highlight_start":1,"highlight_end":56},{"text":"                    req.headers","highlight_start":1,"highlight_end":32},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"                return Err(JsError::new(&e));","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let file_type = {","highlight_start":1,"highlight_end":22},{"text":"        let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));","highlight_start":1,"highlight_end":105},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match file_type {","highlight_start":1,"highlight_end":26},{"text":"            Some(val) => val.1.clone(),","highlight_start":1,"highlight_end":40},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                return Err(JsError::new(\"Content-Type header not found.\"));","highlight_start":1,"highlight_end":76},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // decompress the file if we compressed it","highlight_start":1,"highlight_end":47},{"text":"    let body = match decompress_data_gzip(&res.body) {","highlight_start":1,"highlight_end":55},{"text":"        Ok(val) => {","highlight_start":1,"highlight_end":21},{"text":"            console_log!(\"File decompressed successfully\");","highlight_start":1,"highlight_end":60},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            if e.eq(\"invalid gzip header\") {","highlight_start":1,"highlight_end":45},{"text":"                res.body","highlight_start":1,"highlight_end":25},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\", e)));","highlight_start":1,"highlight_end":96},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let object_url = match serve_static(","highlight_start":1,"highlight_end":41},{"text":"        INDEXED_DB_CACHE,","highlight_start":1,"highlight_end":26},{"text":"        &body,","highlight_start":1,"highlight_end":15},{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":1,"highlight_end":47},{"text":"        &file_type,","highlight_start":1,"highlight_end":20},{"text":"        &url,","highlight_start":1,"highlight_end":14},{"text":"        INDEXED_DB_CACHE_TTL,","highlight_start":1,"highlight_end":30},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"    .await","highlight_start":1,"highlight_end":11},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),","highlight_start":1,"highlight_end":99},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":46},{"text":"                \"Error occurred interacting with IndexDB: {}\",","highlight_start":1,"highlight_end":63},{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":1,"highlight_end":73},{"text":"            )));","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Object URL: {:?}\", object_url));","highlight_start":1,"highlight_end":60},{"text":"    Ok(object_url)","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::missing-inline-in-public-items` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::missing_inline_in_public_items)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:63:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn get_static(url: String) -> Result<String, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if url.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return Err(JsError::new(\"Invalid url provided to fetch call\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(object_url)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::missing-inline-in-public-items` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::missing_inline_in_public_items)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many lines (130/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2645,"byte_end":7029,"line_start":63,"line_end":211,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn get_static(url: String) -> Result<String, JsError> {","highlight_start":1,"highlight_end":66},{"text":"    if url.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Err(JsError::new(\"Invalid url provided to fetch call\"));","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    match check_if_asset_exists(INDEXED_DB_CACHE, &url).await {","highlight_start":1,"highlight_end":64},{"text":"        Ok(val) => {","highlight_start":1,"highlight_end":21},{"text":"            if let Some(val) = val.as_string() {","highlight_start":1,"highlight_end":49},{"text":"                if !val.is_empty() {","highlight_start":1,"highlight_end":37},{"text":"                    // if file is in cache, short-circuit","highlight_start":1,"highlight_end":58},{"text":"                    return Ok(val);","highlight_start":1,"highlight_end":36},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            console_log!(&format!(\"error is {:?}\", e));","highlight_start":1,"highlight_end":56},{"text":"            return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":46},{"text":"                \"Error occurred interacting with IndexDB: {}\",","highlight_start":1,"highlight_end":63},{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":1,"highlight_end":73},{"text":"            )));","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let static_paths = STATIC_PATHS.with(|v| {","highlight_start":1,"highlight_end":47},{"text":"        let val = v.take();","highlight_start":1,"highlight_end":28},{"text":"        v.replace(val.clone());","highlight_start":1,"highlight_end":32},{"text":"        val","highlight_start":1,"highlight_end":12},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\", url);","highlight_start":1,"highlight_end":64},{"text":"    let req_url = rebuild_url(&url);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let client = L8_CLIENTS.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"        let val = v.take();","highlight_start":1,"highlight_end":28},{"text":"        v.replace(val.clone());","highlight_start":1,"highlight_end":32},{"text":"        val.get(&req_url).cloned()","highlight_start":1,"highlight_end":35},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut assets_glob_url = req_url.clone();","highlight_start":1,"highlight_end":47},{"text":"    for static_path in static_paths.iter() {","highlight_start":1,"highlight_end":45},{"text":"        if url.contains(static_path) {","highlight_start":1,"highlight_end":39},{"text":"            assets_glob_url.push_str(static_path);","highlight_start":1,"highlight_end":51},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Request URL: {}\", req_url));","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let req = types::Request {","highlight_start":1,"highlight_end":31},{"text":"        method: \"GET\".to_string(),","highlight_start":1,"highlight_end":35},{"text":"        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),","highlight_start":1,"highlight_end":96},{"text":"        body: json_body.as_bytes().to_vec(),","highlight_start":1,"highlight_end":45},{"text":"        url_path: Some(assets_glob_url.clone()),","highlight_start":1,"highlight_end":49},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let symmetric_key = {","highlight_start":1,"highlight_end":26},{"text":"        let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":1,"highlight_end":58},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match symmetric_key {","highlight_start":1,"highlight_end":30},{"text":"            Some(key) => key,","highlight_start":1,"highlight_end":30},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                return Err(JsError::new(\"symmetric key not found.\"));","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res = {","highlight_start":1,"highlight_end":16},{"text":"        let up_jwt = UP_JWT.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let uuid = UUID.with(|v| {","highlight_start":1,"highlight_end":35},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let res = client","highlight_start":1,"highlight_end":25},{"text":"            .expect_throw(\"client could not be found. This is likely due to the encrypted tunnel not being established correctly.\")","highlight_start":1,"highlight_end":132},{"text":"            .r#do(&req, &symmetric_key, &req_url, true, &up_jwt, &uuid)","highlight_start":1,"highlight_end":72},{"text":"            .await;","highlight_start":1,"highlight_end":20},{"text":"        match res {","highlight_start":1,"highlight_end":20},{"text":"            Ok(val) => val,","highlight_start":1,"highlight_end":28},{"text":"            Err(e) => {","highlight_start":1,"highlight_end":24},{"text":"                console_log!(&format!(","highlight_start":1,"highlight_end":39},{"text":"                    \"Failed to fetch: {}\\nWith request {:?}\\nWith headers {:?}\",","highlight_start":1,"highlight_end":81},{"text":"                    e,","highlight_start":1,"highlight_end":23},{"text":"                    String::from_utf8_lossy(&req.body),","highlight_start":1,"highlight_end":56},{"text":"                    req.headers","highlight_start":1,"highlight_end":32},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"                return Err(JsError::new(&e));","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let file_type = {","highlight_start":1,"highlight_end":22},{"text":"        let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));","highlight_start":1,"highlight_end":105},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match file_type {","highlight_start":1,"highlight_end":26},{"text":"            Some(val) => val.1.clone(),","highlight_start":1,"highlight_end":40},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                return Err(JsError::new(\"Content-Type header not found.\"));","highlight_start":1,"highlight_end":76},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // decompress the file if we compressed it","highlight_start":1,"highlight_end":47},{"text":"    let body = match decompress_data_gzip(&res.body) {","highlight_start":1,"highlight_end":55},{"text":"        Ok(val) => {","highlight_start":1,"highlight_end":21},{"text":"            console_log!(\"File decompressed successfully\");","highlight_start":1,"highlight_end":60},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            if e.eq(\"invalid gzip header\") {","highlight_start":1,"highlight_end":45},{"text":"                res.body","highlight_start":1,"highlight_end":25},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\", e)));","highlight_start":1,"highlight_end":96},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let object_url = match serve_static(","highlight_start":1,"highlight_end":41},{"text":"        INDEXED_DB_CACHE,","highlight_start":1,"highlight_end":26},{"text":"        &body,","highlight_start":1,"highlight_end":15},{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":1,"highlight_end":47},{"text":"        &file_type,","highlight_start":1,"highlight_end":20},{"text":"        &url,","highlight_start":1,"highlight_end":14},{"text":"        INDEXED_DB_CACHE_TTL,","highlight_start":1,"highlight_end":30},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"    .await","highlight_start":1,"highlight_end":11},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),","highlight_start":1,"highlight_end":99},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":46},{"text":"                \"Error occurred interacting with IndexDB: {}\",","highlight_start":1,"highlight_end":63},{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":1,"highlight_end":73},{"text":"            )));","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Object URL: {:?}\", object_url));","highlight_start":1,"highlight_end":60},{"text":"    Ok(object_url)","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::too-many-lines` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (130/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:63:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn get_static(url: String) -> Result<String, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if url.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return Err(JsError::new(\"Invalid url provided to fetch call\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(object_url)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2645,"byte_end":2708,"line_start":63,"line_end":63,"column_start":1,"column_end":64,"is_primary":true,"text":[{"text":"pub async fn get_static(url: String) -> Result<String, JsError> {","highlight_start":1,"highlight_end":64}],"label":"future returned by `get_static` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":2645,"byte_end":2708,"line_start":63,"line_end":63,"column_start":1,"column_end":64,"is_primary":false,"text":[{"text":"pub async fn get_static(url: String) -> Result<String, JsError> {","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as it awaits another future which is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js_glue/js_imports.rs","byte_start":892,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":60,"is_primary":true,"text":[{"text":"#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]","highlight_start":1,"highlight_end":60}],"label":"await occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js_glue/js_imports.rs","byte_start":892,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[wasm_bindgen]","def_site_span":{"file_name":"/home/ranv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasm-bindgen-macro-0.2.100/src/lib.rs","byte_start":294,"byte_end":367,"line_start":10,"line_end":10,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"pub fn wasm_bindgen(attr: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::future-not-send` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::future_not_send)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:63:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn get_static(url: String) -> Result<String, JsError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `get_static` is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as it awaits another future which is not `Send`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/js_imports.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::future-not-send` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::future_not_send)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant clone","code":{"code":"clippy::redundant_clone","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6698,"byte_end":6710,"line_start":200,"line_end":200,"column_start":86,"column_end":98,"is_primary":true,"text":[{"text":"        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),","highlight_start":86,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this value is dropped without further use","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":6632,"byte_end":6698,"line_start":200,"line_end":200,"column_start":20,"column_end":86,"is_primary":true,"text":[{"text":"        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),","highlight_start":20,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::redundant-clone` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::redundant_clone)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6698,"byte_end":6710,"line_start":200,"line_end":200,"column_start":86,"column_end":98,"is_primary":true,"text":[{"text":"        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),","highlight_start":86,"highlight_end":98}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant clone\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:200:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: this value is dropped without further use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:200:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::redundant-clone` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::redundant_clone)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":2923,"byte_end":2926,"line_start":70,"line_end":70,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"            if let Some(val) = val.as_string() {","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":2889,"byte_end":2892,"line_start":69,"line_end":69,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"        Ok(val) => {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::shadow-reuse` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::shadow_reuse)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` is shadowed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:70:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(val) = val.as_string() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:69:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(val) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::shadow-reuse` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::shadow_reuse)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3133,"byte_end":3134,"line_start":77,"line_end":77,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        Err(e) => {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::min-ident-chars` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::min_ident_chars)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:77:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(e) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::min-ident-chars` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::min_ident_chars)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3167,"byte_end":3194,"line_start":78,"line_end":78,"column_start":27,"column_end":54,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"error is {:?}\", e));","highlight_start":27,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3186,"byte_end":3186,"line_start":78,"line_end":78,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"error is {:?}\", e));","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":3190,"byte_end":3193,"line_start":78,"line_end":78,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"error is {:?}\", e));","highlight_start":50,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:78:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            console_log!(&format!(\"error is {:?}\", e));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            console_log!(&format!(\"error is {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            console_log!(&format!(\"error is {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `unwrap_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3336,"byte_end":3378,"line_start":81,"line_end":81,"column_start":31,"column_end":73,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":31,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::or-fun-call` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::or_fun_call)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3336,"byte_end":3378,"line_start":81,"line_end":81,"column_start":31,"column_end":73,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":31,"highlight_end":73}],"label":null,"suggested_replacement":"unwrap_or_else(|| \"error unwrappable\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `unwrap_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:81:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                e.as_string().unwrap_or(\"error unwrappable\".to_string())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `unwrap_or_else(|| \"error unwrappable\".to_string())`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::or-fun-call` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::or_fun_call)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3346,"byte_end":3377,"line_start":81,"line_end":81,"column_start":41,"column_end":72,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":41,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3346,"byte_end":3377,"line_start":81,"line_end":81,"column_start":41,"column_end":72,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":41,"highlight_end":72}],"label":null,"suggested_replacement":"\"error unwrappable\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:81:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                e.as_string().unwrap_or(\"error unwrappable\".to_string())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"error unwrappable\".to_owned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3529,"byte_end":3532,"line_start":89,"line_end":89,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        val","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::implicit-return` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::implicit_return)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3529,"byte_end":3532,"line_start":89,"line_end":89,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        val","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:89:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::implicit-return` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::implicit_return)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3456,"byte_end":3457,"line_start":86,"line_end":86,"column_start":43,"column_end":44,"is_primary":true,"text":[{"text":"    let static_paths = STATIC_PATHS.with(|v| {","highlight_start":43,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:86:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let static_paths = STATIC_PATHS.with(|v| {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3562,"byte_end":3604,"line_start":92,"line_end":92,"column_start":21,"column_end":63,"is_primary":true,"text":[{"text":"    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\", url);","highlight_start":21,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3592,"byte_end":3592,"line_start":92,"line_end":92,"column_start":51,"column_end":51,"is_primary":true,"text":[{"text":"    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\", url);","highlight_start":51,"highlight_end":51}],"label":null,"suggested_replacement":"url","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":3598,"byte_end":3603,"line_start":92,"line_end":92,"column_start":57,"column_end":62,"is_primary":true,"text":[{"text":"    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\", url);","highlight_start":57,"highlight_end":62}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:92:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\", url);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{}\\\"}}\"\u001b[0m\u001b[0m\u001b[38;5;9m, url\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let json_body = format!(\"{{\\\"__url_path\\\": \\\"{\u001b[0m\u001b[0m\u001b[38;5;10murl\u001b[0m\u001b[0m}\\\"}}\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3751,"byte_end":3777,"line_start":98,"line_end":98,"column_start":9,"column_end":35,"is_primary":true,"text":[{"text":"        val.get(&req_url).cloned()","highlight_start":9,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3751,"byte_end":3777,"line_start":98,"line_end":98,"column_start":9,"column_end":35,"is_primary":true,"text":[{"text":"        val.get(&req_url).cloned()","highlight_start":9,"highlight_end":35}],"label":null,"suggested_replacement":"return val.get(&req_url).cloned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:98:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        val.get(&req_url).cloned()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&req_url).cloned()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3678,"byte_end":3679,"line_start":95,"line_end":95,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    let client = L8_CLIENTS.with(|v| {","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:95:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let client = L8_CLIENTS.with(|v| {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"it is more concise to loop over references to containers instead of using explicit iteration methods","code":{"code":"clippy::explicit_iter_loop","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":3857,"byte_end":3876,"line_start":102,"line_end":102,"column_start":24,"column_end":43,"is_primary":true,"text":[{"text":"    for static_path in static_paths.iter() {","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::explicit-iter-loop` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::explicit_iter_loop)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to write this more concisely, try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":3857,"byte_end":3876,"line_start":102,"line_end":102,"column_start":24,"column_end":43,"is_primary":true,"text":[{"text":"    for static_path in static_paths.iter() {","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":"&static_paths","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: it is more concise to loop over references to containers instead of using explicit iteration methods\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:102:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for static_path in static_paths.iter() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to write this more concisely, try: `&static_paths`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::explicit-iter-loop` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::explicit_iter_loop)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4023,"byte_end":4058,"line_start":109,"line_end":109,"column_start":19,"column_end":54,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Request URL: {}\", req_url));","highlight_start":19,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4046,"byte_end":4046,"line_start":109,"line_end":109,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Request URL: {}\", req_url));","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":"req_url","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":4048,"byte_end":4057,"line_start":109,"line_end":109,"column_start":44,"column_end":53,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Request URL: {}\", req_url));","highlight_start":44,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:109:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"Request URL: {}\", req_url));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    console_log!(&format!(\"Request URL: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, req_url\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    console_log!(&format!(\"Request URL: {\u001b[0m\u001b[0m\u001b[38;5;10mreq_url\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4109,"byte_end":4126,"line_start":112,"line_end":112,"column_start":17,"column_end":34,"is_primary":true,"text":[{"text":"        method: \"GET\".to_string(),","highlight_start":17,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4109,"byte_end":4126,"line_start":112,"line_end":112,"column_start":17,"column_end":34,"is_primary":true,"text":[{"text":"        method: \"GET\".to_string(),","highlight_start":17,"highlight_end":34}],"label":null,"suggested_replacement":"\"GET\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:112:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        method: \"GET\".to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"GET\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4161,"byte_end":4187,"line_start":113,"line_end":113,"column_start":34,"column_end":60,"is_primary":true,"text":[{"text":"        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),","highlight_start":34,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4161,"byte_end":4187,"line_start":113,"line_end":113,"column_start":34,"column_end":60,"is_primary":true,"text":[{"text":"        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),","highlight_start":34,"highlight_end":60}],"label":null,"suggested_replacement":"\"content-type\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:113:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"content-type\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4189,"byte_end":4219,"line_start":113,"line_end":113,"column_start":62,"column_end":92,"is_primary":true,"text":[{"text":"        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),","highlight_start":62,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4189,"byte_end":4219,"line_start":113,"line_end":113,"column_start":62,"column_end":92,"is_primary":true,"text":[{"text":"        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),","highlight_start":62,"highlight_end":92}],"label":null,"suggested_replacement":"\"application/json\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:113:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        headers: HashMap::from([(\"content-type\".to_string(), \"application/json\".to_string())]),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"application/json\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4490,"byte_end":4493,"line_start":122,"line_end":122,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4490,"byte_end":4493,"line_start":122,"line_end":122,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:122:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4405,"byte_end":4406,"line_start":119,"line_end":119,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"        let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:119:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4826,"byte_end":4829,"line_start":137,"line_end":137,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4826,"byte_end":4829,"line_start":137,"line_end":137,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:137:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4741,"byte_end":4742,"line_start":134,"line_end":134,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"        let up_jwt = UP_JWT.with(|v| {","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:134:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let up_jwt = UP_JWT.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4958,"byte_end":4961,"line_start":143,"line_end":143,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":4958,"byte_end":4961,"line_start":143,"line_end":143,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:143:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":4873,"byte_end":4874,"line_start":140,"line_end":140,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"        let uuid = UUID.with(|v| {","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:140:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let uuid = UUID.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":5288,"byte_end":5289,"line_start":152,"line_end":152,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            Err(e) => {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:152:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":5704,"byte_end":5749,"line_start":165,"line_end":165,"column_start":58,"column_end":103,"is_primary":true,"text":[{"text":"        let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));","highlight_start":58,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":5704,"byte_end":5749,"line_start":165,"line_end":165,"column_start":58,"column_end":103,"is_primary":true,"text":[{"text":"        let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));","highlight_start":58,"highlight_end":103}],"label":null,"suggested_replacement":"return k.trim().eq_ignore_ascii_case(\"Content-Type\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:165:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mer().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return k.trim().eq_ignore_ascii_case(\"Content-Type\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type of pattern does not match the expression type","code":{"code":"clippy::pattern_type_mismatch","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":5696,"byte_end":5702,"line_start":165,"line_end":165,"column_start":50,"column_end":56,"is_primary":true,"text":[{"text":"        let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));","highlight_start":50,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly match against a `&_` pattern and adjust the enclosed variable bindings","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::pattern-type-mismatch` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::pattern_type_mismatch)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type of pattern does not match the expression type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:165:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Typ\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: explicitly match against a `&_` pattern and adjust the enclosed variable bindings\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::pattern-type-mismatch` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::pattern_type_mismatch)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":5697,"byte_end":5698,"line_start":165,"line_end":165,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"        let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Type\"));","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:165:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let file_type = res.headers.iter().find(|(k, _)| k.trim().eq_ignore_ascii_case(\"Content-Typ\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6170,"byte_end":6171,"line_start":181,"line_end":181,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        Err(e) => {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:181:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6310,"byte_end":6361,"line_start":185,"line_end":185,"column_start":42,"column_end":93,"is_primary":true,"text":[{"text":"                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\", e)));","highlight_start":42,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6355,"byte_end":6355,"line_start":185,"line_end":185,"column_start":87,"column_end":87,"is_primary":true,"text":[{"text":"                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\", e)));","highlight_start":87,"highlight_end":87}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":6357,"byte_end":6360,"line_start":185,"line_end":185,"column_start":89,"column_end":92,"is_primary":true,"text":[{"text":"                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\", e)));","highlight_start":89,"highlight_end":92}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:185:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\", e)));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                return Err(JsError::new(&format!(\"Error occurred decompressing file: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e\u001b[0m\u001b[0m)));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                return Err(JsError::new(&format!(\"Error occurred decompressing file: {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m}\")));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant closure","code":{"code":"clippy::redundant_closure_for_method_calls","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6512,"byte_end":6523,"line_start":193,"line_end":193,"column_start":34,"column_end":45,"is_primary":true,"text":[{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":34,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::redundant_closure_for_method_calls)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace the closure with the method itself","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6512,"byte_end":6523,"line_start":193,"line_end":193,"column_start":34,"column_end":45,"is_primary":true,"text":[{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":34,"highlight_end":45}],"label":null,"suggested_replacement":"std::cell::Cell::get","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant closure\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:193:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        CACHE_STORAGE_LIMIT.with(|v| v.get()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the closure with the method itself: `std::cell::Cell::get`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::redundant_closure_for_method_calls)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6516,"byte_end":6523,"line_start":193,"line_end":193,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":38,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6516,"byte_end":6523,"line_start":193,"line_end":193,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":38,"highlight_end":45}],"label":null,"suggested_replacement":"return v.get()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:193:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        CACHE_STORAGE_LIMIT.with(|v| v.get()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return v.get()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6513,"byte_end":6514,"line_start":193,"line_end":193,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"        CACHE_STORAGE_LIMIT.with(|v| v.get()),","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:193:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        CACHE_STORAGE_LIMIT.with(|v| v.get()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `String`","code":{"code":"clippy::string_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6632,"byte_end":6710,"line_start":200,"line_end":200,"column_start":20,"column_end":98,"is_primary":true,"text":[{"text":"        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),","highlight_start":20,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `.clone()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::string-to-string` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::string_to_string)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:200:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(val) => val.as_string().expect_throw(\"expected object url to be a string\").to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using `.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::string-to-string` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::string_to_string)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6724,"byte_end":6725,"line_start":201,"line_end":201,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        Err(e) => {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:201:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `unwrap_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6871,"byte_end":6913,"line_start":204,"line_end":204,"column_start":31,"column_end":73,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":31,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6871,"byte_end":6913,"line_start":204,"line_end":204,"column_start":31,"column_end":73,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":31,"highlight_end":73}],"label":null,"suggested_replacement":"unwrap_or_else(|| \"error unwrappable\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `unwrap_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:204:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                e.as_string().unwrap_or(\"error unwrappable\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `unwrap_or_else(|| \"error unwrappable\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6881,"byte_end":6912,"line_start":204,"line_end":204,"column_start":41,"column_end":72,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":41,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6881,"byte_end":6912,"line_start":204,"line_end":204,"column_start":41,"column_end":72,"is_primary":true,"text":[{"text":"                e.as_string().unwrap_or(\"error unwrappable\".to_string())","highlight_start":41,"highlight_end":72}],"label":null,"suggested_replacement":"\"error unwrappable\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:204:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                e.as_string().unwrap_or(\"error unwrappable\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"error unwrappable\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":6967,"byte_end":7006,"line_start":209,"line_end":209,"column_start":19,"column_end":58,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Object URL: {:?}\", object_url));","highlight_start":19,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":6989,"byte_end":6989,"line_start":209,"line_end":209,"column_start":41,"column_end":41,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Object URL: {:?}\", object_url));","highlight_start":41,"highlight_end":41}],"label":null,"suggested_replacement":"object_url","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":6993,"byte_end":7005,"line_start":209,"line_end":209,"column_start":45,"column_end":57,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Object URL: {:?}\", object_url));","highlight_start":45,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:209:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"Object URL: {:?}\", object_url));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    console_log!(&format!(\"Object URL: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, object_url\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    console_log!(&format!(\"Object URL: {\u001b[0m\u001b[0m\u001b[38;5;10mobject_url\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7134,"byte_end":7139,"line_start":215,"line_end":215,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::allow-attributes` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::allow_attributes)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":7134,"byte_end":7139,"line_start":215,"line_end":215,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:215:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::allow-attributes` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::allow_attributes)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7132,"byte_end":7156,"line_start":215,"line_end":215,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::allow-attributes-without-reason` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::allow_attributes_without_reason)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:215:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::allow-attributes-without-reason` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::allow_attributes_without_reason)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a function","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7205,"byte_end":7286,"line_start":217,"line_end":219,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn check_encrypted_tunnel() -> bool {","highlight_start":1,"highlight_end":48},{"text":"    ENCRYPTED_TUNNEL_FLAG.get()","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:217:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn check_encrypted_tunnel() -> bool {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ENCRYPTED_TUNNEL_FLAG.get()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7257,"byte_end":7284,"line_start":218,"line_end":218,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    ENCRYPTED_TUNNEL_FLAG.get()","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":7257,"byte_end":7284,"line_start":218,"line_end":218,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    ENCRYPTED_TUNNEL_FLAG.get()","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":"return ENCRYPTED_TUNNEL_FLAG.get()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:218:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ENCRYPTED_TUNNEL_FLAG.get()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return ENCRYPTED_TUNNEL_FLAG.get()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7132,"byte_end":7156,"line_start":215,"line_end":215,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:215:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7408,"byte_end":7486,"line_start":223,"line_end":223,"column_start":1,"column_end":79,"is_primary":true,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":13266,"byte_end":13305,"line_start":390,"line_end":390,"column_start":24,"column_end":63,"is_primary":true,"text":[{"text":"            req.body = serde_json::to_vec(&form_data).unwrap();","highlight_start":24,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: docs for function which may panic missing `# Panics` section\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:223:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: first possible panic found here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:390:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            req.body = serde_json::to_vec(&form_data).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"docs for function returning `Result` missing `# Errors` section","code":{"code":"clippy::missing_errors_doc","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7408,"byte_end":7486,"line_start":223,"line_end":223,"column_start":1,"column_end":79,"is_primary":true,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: docs for function returning `Result` missing `# Errors` section\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:223:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a function","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7408,"byte_end":14432,"line_start":223,"line_end":427,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":1,"highlight_end":81},{"text":"    if !ENCRYPTED_TUNNEL_FLAG.get() {","highlight_start":1,"highlight_end":38},{"text":"        return Err(JsError::new(\"Encrypted tunnel is closed. Reload page.\"));","highlight_start":1,"highlight_end":78},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut req = types::Request {","highlight_start":1,"highlight_end":35},{"text":"        method: \"GET\".to_string(),","highlight_start":1,"highlight_end":35},{"text":"        url_path: Some(url.clone()),","highlight_start":1,"highlight_end":37},{"text":"        ..Default::default()","highlight_start":1,"highlight_end":29},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut js_body = JsValue::null();","highlight_start":1,"highlight_end":39},{"text":"    if !options.is_null() && !options.is_undefined() {","highlight_start":1,"highlight_end":55},{"text":"        let options = Object::from(options);","highlight_start":1,"highlight_end":45},{"text":"        // [[key, value], ...] result from Object.entries","highlight_start":1,"highlight_end":58},{"text":"        let entries = object_entries(&options);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for entry in entries.iter() {","highlight_start":1,"highlight_end":38},{"text":"            // [key, value] item array","highlight_start":1,"highlight_end":39},{"text":"            let key_value_entry = js_sys::Array::from(&entry);","highlight_start":1,"highlight_end":63},{"text":"            let key = key_value_entry.get(0);","highlight_start":1,"highlight_end":46},{"text":"            let value = key_value_entry.get(1);","highlight_start":1,"highlight_end":48},{"text":"            if key.is_null() || key.is_undefined() || !key.is_string() {","highlight_start":1,"highlight_end":73},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let key = key.as_string().expect_throw(\"key is a string; qed\");","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match key.to_lowercase().as_str() {","highlight_start":1,"highlight_end":48},{"text":"                \"method\" => {","highlight_start":1,"highlight_end":30},{"text":"                    req.method = value.as_string().unwrap_or(\"GET\".to_string());","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"headers\" => {","highlight_start":1,"highlight_end":31},{"text":"                    let headers = object_entries(Object::try_from(&value).expect_throw(\"expected headers to be a [key, val] object array; qed\"));","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    headers.iter().for_each(|header| {","highlight_start":1,"highlight_end":55},{"text":"                        let header_entries = js_sys::Array::from(&header);","highlight_start":1,"highlight_end":75},{"text":"                        req.headers.insert(","highlight_start":1,"highlight_end":44},{"text":"                            header_entries.get(0).as_string().expect_throw(\"key is a string; qed\"),","highlight_start":1,"highlight_end":100},{"text":"                            header_entries.get(1).as_string().expect_throw(\"value is a string; qed\"),","highlight_start":1,"highlight_end":102},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"body\" => {","highlight_start":1,"highlight_end":28},{"text":"                    js_body = value;","highlight_start":1,"highlight_end":37},{"text":"                    if !js_body.is_null() && !js_body.is_undefined() && js_body.is_instance_of::<FormData>() {","highlight_start":1,"highlight_end":111},{"text":"                        req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());","highlight_start":1,"highlight_end":107},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {}","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // if content type is not provided, we default to \"application/json\"","highlight_start":1,"highlight_end":77},{"text":"        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {","highlight_start":1,"highlight_end":86},{"text":"            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let backend_url = rebuild_url(&url);","highlight_start":1,"highlight_end":41},{"text":"    let client = {","highlight_start":1,"highlight_end":19},{"text":"        let l8_clients = L8_CLIENTS.with(|v| {","highlight_start":1,"highlight_end":47},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match l8_clients.get(&backend_url).cloned() {","highlight_start":1,"highlight_end":54},{"text":"            Some(client) => client,","highlight_start":1,"highlight_end":36},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                return Err(JsError::new(\"client could not be found\"));","highlight_start":1,"highlight_end":71},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let content_type = req","highlight_start":1,"highlight_end":27},{"text":"        .headers","highlight_start":1,"highlight_end":17},{"text":"        .get(\"Content-Type\")","highlight_start":1,"highlight_end":29},{"text":"        .map(|v| v.as_str())","highlight_start":1,"highlight_end":29},{"text":"        .unwrap_or(\"application/json\")","highlight_start":1,"highlight_end":39},{"text":"        .to_lowercase();","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res = match &content_type[..] {","highlight_start":1,"highlight_end":40},{"text":"        \"application/json\" => {","highlight_start":1,"highlight_end":32},{"text":"            let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":1,"highlight_end":62},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let symmetric_key = match symmetric_key {","highlight_start":1,"highlight_end":54},{"text":"                Some(key) => key,","highlight_start":1,"highlight_end":34},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                    return Err(JsError::new(\"symmetric key not found.\"));","highlight_start":1,"highlight_end":74},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let up_jwt = UP_JWT.with(|v| {","highlight_start":1,"highlight_end":43},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let uuid = UUID.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // the js_body is expected to be a valid json string","highlight_start":1,"highlight_end":65},{"text":"            if !js_body.is_null() && !js_body.is_undefined() {","highlight_start":1,"highlight_end":63},{"text":"                req.body = js_body.as_string().expect_throw(\"expected body to be a string; qed\").as_bytes().to_vec();","highlight_start":1,"highlight_end":118},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            req.url_path = Some(url.clone());","highlight_start":1,"highlight_end":46},{"text":"            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {","highlight_start":1,"highlight_end":96},{"text":"                Ok(res) => res,","highlight_start":1,"highlight_end":32},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Err(JsError::new(&e));","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        \"multipart/form-data\" => {","highlight_start":1,"highlight_end":35},{"text":"            req.headers","highlight_start":1,"highlight_end":24},{"text":"                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if js_body.is_null() || js_body.is_undefined() {","highlight_start":1,"highlight_end":61},{"text":"                return Err(JsError::new(\"No body provided to fetch call.\"));","highlight_start":1,"highlight_end":77},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // populating the form data from the body","highlight_start":1,"highlight_end":54},{"text":"            let form_data = match construct_form_data(&js_body).await {","highlight_start":1,"highlight_end":72},{"text":"                Ok(val) => val,","highlight_start":1,"highlight_end":32},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    return Err(JsError::new(&e));","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let symmetric_key = {","highlight_start":1,"highlight_end":34},{"text":"                let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":1,"highlight_end":66},{"text":"                    let val = v.take();","highlight_start":1,"highlight_end":40},{"text":"                    v.replace(val.clone());","highlight_start":1,"highlight_end":44},{"text":"                    val","highlight_start":1,"highlight_end":24},{"text":"                });","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match symmetric_key {","highlight_start":1,"highlight_end":38},{"text":"                    Some(key) => key,","highlight_start":1,"highlight_end":38},{"text":"                    None => {","highlight_start":1,"highlight_end":30},{"text":"                        return Err(JsError::new(\"symmetric key not found.\"));","highlight_start":1,"highlight_end":78},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let up_jwt = UP_JWT.with(|v| {","highlight_start":1,"highlight_end":43},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let uuid = UUID.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            req.body = serde_json::to_vec(&form_data).unwrap();","highlight_start":1,"highlight_end":64},{"text":"            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {","highlight_start":1,"highlight_end":96},{"text":"                Ok(res) => res,","highlight_start":1,"highlight_end":32},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    return Err(JsError::new(&e));","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        _ => types::Response {","highlight_start":1,"highlight_end":31},{"text":"            status: 400,","highlight_start":1,"highlight_end":25},{"text":"            status_text: \"Content-Type not supported\".to_string(),","highlight_start":1,"highlight_end":67},{"text":"            ..Default::default()","highlight_start":1,"highlight_end":33},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let response_init = ResponseInit::new();","highlight_start":1,"highlight_end":45},{"text":"    let headers = web_sys::Headers::new().unwrap();","highlight_start":1,"highlight_end":52},{"text":"    for (key, value) in res.headers.iter() {","highlight_start":1,"highlight_end":45},{"text":"        headers","highlight_start":1,"highlight_end":16},{"text":"            .append(key, value)","highlight_start":1,"highlight_end":32},{"text":"            .expect_throw(\"expected headers to be appended to the web_sys::Headers object; qed\");","highlight_start":1,"highlight_end":98},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    response_init.set_headers(&headers);","highlight_start":1,"highlight_end":41},{"text":"    response_init.set_status(res.status);","highlight_start":1,"highlight_end":42},{"text":"    response_init.set_status_text(&res.status_text);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut body = res.body;","highlight_start":1,"highlight_end":29},{"text":"    let response = match Response::new_with_opt_u8_array_and_init(Some(&mut body), &response_init) {","highlight_start":1,"highlight_end":101},{"text":"        Ok(val) => val,","highlight_start":1,"highlight_end":24},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            return Err(JsError::new(&format!(\"{:?}\", e)));","highlight_start":1,"highlight_end":59},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(response)","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:223:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if !ENCRYPTED_TUNNEL_FLAG.get() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return Err(JsError::new(\"Encrypted tunnel is closed. Reload page.\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(response)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many lines (171/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7408,"byte_end":14432,"line_start":223,"line_end":427,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":1,"highlight_end":81},{"text":"    if !ENCRYPTED_TUNNEL_FLAG.get() {","highlight_start":1,"highlight_end":38},{"text":"        return Err(JsError::new(\"Encrypted tunnel is closed. Reload page.\"));","highlight_start":1,"highlight_end":78},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut req = types::Request {","highlight_start":1,"highlight_end":35},{"text":"        method: \"GET\".to_string(),","highlight_start":1,"highlight_end":35},{"text":"        url_path: Some(url.clone()),","highlight_start":1,"highlight_end":37},{"text":"        ..Default::default()","highlight_start":1,"highlight_end":29},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut js_body = JsValue::null();","highlight_start":1,"highlight_end":39},{"text":"    if !options.is_null() && !options.is_undefined() {","highlight_start":1,"highlight_end":55},{"text":"        let options = Object::from(options);","highlight_start":1,"highlight_end":45},{"text":"        // [[key, value], ...] result from Object.entries","highlight_start":1,"highlight_end":58},{"text":"        let entries = object_entries(&options);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for entry in entries.iter() {","highlight_start":1,"highlight_end":38},{"text":"            // [key, value] item array","highlight_start":1,"highlight_end":39},{"text":"            let key_value_entry = js_sys::Array::from(&entry);","highlight_start":1,"highlight_end":63},{"text":"            let key = key_value_entry.get(0);","highlight_start":1,"highlight_end":46},{"text":"            let value = key_value_entry.get(1);","highlight_start":1,"highlight_end":48},{"text":"            if key.is_null() || key.is_undefined() || !key.is_string() {","highlight_start":1,"highlight_end":73},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let key = key.as_string().expect_throw(\"key is a string; qed\");","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match key.to_lowercase().as_str() {","highlight_start":1,"highlight_end":48},{"text":"                \"method\" => {","highlight_start":1,"highlight_end":30},{"text":"                    req.method = value.as_string().unwrap_or(\"GET\".to_string());","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"headers\" => {","highlight_start":1,"highlight_end":31},{"text":"                    let headers = object_entries(Object::try_from(&value).expect_throw(\"expected headers to be a [key, val] object array; qed\"));","highlight_start":1,"highlight_end":146},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    headers.iter().for_each(|header| {","highlight_start":1,"highlight_end":55},{"text":"                        let header_entries = js_sys::Array::from(&header);","highlight_start":1,"highlight_end":75},{"text":"                        req.headers.insert(","highlight_start":1,"highlight_end":44},{"text":"                            header_entries.get(0).as_string().expect_throw(\"key is a string; qed\"),","highlight_start":1,"highlight_end":100},{"text":"                            header_entries.get(1).as_string().expect_throw(\"value is a string; qed\"),","highlight_start":1,"highlight_end":102},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    });","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"body\" => {","highlight_start":1,"highlight_end":28},{"text":"                    js_body = value;","highlight_start":1,"highlight_end":37},{"text":"                    if !js_body.is_null() && !js_body.is_undefined() && js_body.is_instance_of::<FormData>() {","highlight_start":1,"highlight_end":111},{"text":"                        req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());","highlight_start":1,"highlight_end":107},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {}","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // if content type is not provided, we default to \"application/json\"","highlight_start":1,"highlight_end":77},{"text":"        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {","highlight_start":1,"highlight_end":86},{"text":"            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let backend_url = rebuild_url(&url);","highlight_start":1,"highlight_end":41},{"text":"    let client = {","highlight_start":1,"highlight_end":19},{"text":"        let l8_clients = L8_CLIENTS.with(|v| {","highlight_start":1,"highlight_end":47},{"text":"            let val = v.take();","highlight_start":1,"highlight_end":32},{"text":"            v.replace(val.clone());","highlight_start":1,"highlight_end":36},{"text":"            val","highlight_start":1,"highlight_end":16},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match l8_clients.get(&backend_url).cloned() {","highlight_start":1,"highlight_end":54},{"text":"            Some(client) => client,","highlight_start":1,"highlight_end":36},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                return Err(JsError::new(\"client could not be found\"));","highlight_start":1,"highlight_end":71},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let content_type = req","highlight_start":1,"highlight_end":27},{"text":"        .headers","highlight_start":1,"highlight_end":17},{"text":"        .get(\"Content-Type\")","highlight_start":1,"highlight_end":29},{"text":"        .map(|v| v.as_str())","highlight_start":1,"highlight_end":29},{"text":"        .unwrap_or(\"application/json\")","highlight_start":1,"highlight_end":39},{"text":"        .to_lowercase();","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res = match &content_type[..] {","highlight_start":1,"highlight_end":40},{"text":"        \"application/json\" => {","highlight_start":1,"highlight_end":32},{"text":"            let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":1,"highlight_end":62},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let symmetric_key = match symmetric_key {","highlight_start":1,"highlight_end":54},{"text":"                Some(key) => key,","highlight_start":1,"highlight_end":34},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                    return Err(JsError::new(\"symmetric key not found.\"));","highlight_start":1,"highlight_end":74},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let up_jwt = UP_JWT.with(|v| {","highlight_start":1,"highlight_end":43},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let uuid = UUID.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // the js_body is expected to be a valid json string","highlight_start":1,"highlight_end":65},{"text":"            if !js_body.is_null() && !js_body.is_undefined() {","highlight_start":1,"highlight_end":63},{"text":"                req.body = js_body.as_string().expect_throw(\"expected body to be a string; qed\").as_bytes().to_vec();","highlight_start":1,"highlight_end":118},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            req.url_path = Some(url.clone());","highlight_start":1,"highlight_end":46},{"text":"            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {","highlight_start":1,"highlight_end":96},{"text":"                Ok(res) => res,","highlight_start":1,"highlight_end":32},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    return Err(JsError::new(&e));","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        \"multipart/form-data\" => {","highlight_start":1,"highlight_end":35},{"text":"            req.headers","highlight_start":1,"highlight_end":24},{"text":"                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if js_body.is_null() || js_body.is_undefined() {","highlight_start":1,"highlight_end":61},{"text":"                return Err(JsError::new(\"No body provided to fetch call.\"));","highlight_start":1,"highlight_end":77},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // populating the form data from the body","highlight_start":1,"highlight_end":54},{"text":"            let form_data = match construct_form_data(&js_body).await {","highlight_start":1,"highlight_end":72},{"text":"                Ok(val) => val,","highlight_start":1,"highlight_end":32},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    return Err(JsError::new(&e));","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let symmetric_key = {","highlight_start":1,"highlight_end":34},{"text":"                let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":1,"highlight_end":66},{"text":"                    let val = v.take();","highlight_start":1,"highlight_end":40},{"text":"                    v.replace(val.clone());","highlight_start":1,"highlight_end":44},{"text":"                    val","highlight_start":1,"highlight_end":24},{"text":"                });","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match symmetric_key {","highlight_start":1,"highlight_end":38},{"text":"                    Some(key) => key,","highlight_start":1,"highlight_end":38},{"text":"                    None => {","highlight_start":1,"highlight_end":30},{"text":"                        return Err(JsError::new(\"symmetric key not found.\"));","highlight_start":1,"highlight_end":78},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let up_jwt = UP_JWT.with(|v| {","highlight_start":1,"highlight_end":43},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let uuid = UUID.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"                let val = v.take();","highlight_start":1,"highlight_end":36},{"text":"                v.replace(val.clone());","highlight_start":1,"highlight_end":40},{"text":"                val","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            req.body = serde_json::to_vec(&form_data).unwrap();","highlight_start":1,"highlight_end":64},{"text":"            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {","highlight_start":1,"highlight_end":96},{"text":"                Ok(res) => res,","highlight_start":1,"highlight_end":32},{"text":"                Err(e) => {","highlight_start":1,"highlight_end":28},{"text":"                    return Err(JsError::new(&e));","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        _ => types::Response {","highlight_start":1,"highlight_end":31},{"text":"            status: 400,","highlight_start":1,"highlight_end":25},{"text":"            status_text: \"Content-Type not supported\".to_string(),","highlight_start":1,"highlight_end":67},{"text":"            ..Default::default()","highlight_start":1,"highlight_end":33},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let response_init = ResponseInit::new();","highlight_start":1,"highlight_end":45},{"text":"    let headers = web_sys::Headers::new().unwrap();","highlight_start":1,"highlight_end":52},{"text":"    for (key, value) in res.headers.iter() {","highlight_start":1,"highlight_end":45},{"text":"        headers","highlight_start":1,"highlight_end":16},{"text":"            .append(key, value)","highlight_start":1,"highlight_end":32},{"text":"            .expect_throw(\"expected headers to be appended to the web_sys::Headers object; qed\");","highlight_start":1,"highlight_end":98},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    response_init.set_headers(&headers);","highlight_start":1,"highlight_end":41},{"text":"    response_init.set_status(res.status);","highlight_start":1,"highlight_end":42},{"text":"    response_init.set_status_text(&res.status_text);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut body = res.body;","highlight_start":1,"highlight_end":29},{"text":"    let response = match Response::new_with_opt_u8_array_and_init(Some(&mut body), &response_init) {","highlight_start":1,"highlight_end":101},{"text":"        Ok(val) => val,","highlight_start":1,"highlight_end":24},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            return Err(JsError::new(&format!(\"{:?}\", e)));","highlight_start":1,"highlight_end":59},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(response)","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (171/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:223:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if !ENCRYPTED_TUNNEL_FLAG.get() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return Err(JsError::new(\"Encrypted tunnel is closed. Reload page.\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(response)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7408,"byte_end":7486,"line_start":223,"line_end":223,"column_start":1,"column_end":79,"is_primary":true,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":1,"highlight_end":79}],"label":"future returned by `fetch` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":7408,"byte_end":7486,"line_start":223,"line_end":223,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":11629,"byte_end":11634,"line_start":338,"line_end":338,"column_start":89,"column_end":94,"is_primary":true,"text":[{"text":"            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {","highlight_start":89,"highlight_end":94}],"label":"await occurs here, with `options` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":11629,"byte_end":11634,"line_start":338,"line_end":338,"column_start":89,"column_end":94,"is_primary":false,"text":[{"text":"            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {","highlight_start":89,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/js.rs","byte_start":7440,"byte_end":7447,"line_start":223,"line_end":223,"column_start":33,"column_end":40,"is_primary":false,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":33,"highlight_end":40}],"label":"has type `wasm_bindgen::JsValue` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":14463,"byte_end":14470,"line_start":429,"line_end":429,"column_start":30,"column_end":37,"is_primary":true,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":30,"highlight_end":37}],"label":"has type `&wasm_bindgen::JsValue` which is not `Send`, because `wasm_bindgen::JsValue` is not `Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":14463,"byte_end":14470,"line_start":429,"line_end":429,"column_start":30,"column_end":37,"is_primary":false,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":30,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as it awaits another future which is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":18846,"byte_end":18875,"line_start":541,"line_end":541,"column_start":28,"column_end":57,"is_primary":true,"text":[{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":28,"highlight_end":57}],"label":"await occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:223:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `fetch` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:338:89\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::JsValue` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match client.r#do(&req, &symmetric_key, &backend_url, true, &up_jwt, &uuid).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `options` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:429:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `&wasm_bindgen::JsValue` which is not `Send`, because `wasm_bindgen::JsValue` is not `Sync`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Sync`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as it awaits another future which is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:541:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let chunk_object = JsFuture::from(reader.read())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7663,"byte_end":7680,"line_start":229,"line_end":229,"column_start":17,"column_end":34,"is_primary":true,"text":[{"text":"        method: \"GET\".to_string(),","highlight_start":17,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":7663,"byte_end":7680,"line_start":229,"line_end":229,"column_start":17,"column_end":34,"is_primary":true,"text":[{"text":"        method: \"GET\".to_string(),","highlight_start":17,"highlight_end":34}],"label":null,"suggested_replacement":"\"GET\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:229:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        method: \"GET\".to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"GET\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`options` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7862,"byte_end":7869,"line_start":236,"line_end":236,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Object::from(options);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":7440,"byte_end":7447,"line_start":223,"line_end":223,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"pub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `options` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:236:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Object::from(options);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:223:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn fetch(url: String, options: JsValue) -> Result<Response, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`key` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":8366,"byte_end":8369,"line_start":249,"line_end":249,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let key = key.as_string().expect_throw(\"key is a string; qed\");","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":8158,"byte_end":8161,"line_start":243,"line_end":243,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let key = key_value_entry.get(0);","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `key` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:249:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let key = key.as_string().expect_throw(\"key is a string; qed\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:243:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let key = key_value_entry.get(0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `unwrap_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":8556,"byte_end":8584,"line_start":253,"line_end":253,"column_start":52,"column_end":80,"is_primary":true,"text":[{"text":"                    req.method = value.as_string().unwrap_or(\"GET\".to_string());","highlight_start":52,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":8556,"byte_end":8584,"line_start":253,"line_end":253,"column_start":52,"column_end":80,"is_primary":true,"text":[{"text":"                    req.method = value.as_string().unwrap_or(\"GET\".to_string());","highlight_start":52,"highlight_end":80}],"label":null,"suggested_replacement":"unwrap_or_else(|| \"GET\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `unwrap_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:253:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    req.method = value.as_string().unwrap_or(\"GET\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `unwrap_or_else(|| \"GET\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":8566,"byte_end":8583,"line_start":253,"line_end":253,"column_start":62,"column_end":79,"is_primary":true,"text":[{"text":"                    req.method = value.as_string().unwrap_or(\"GET\".to_string());","highlight_start":62,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":8566,"byte_end":8583,"line_start":253,"line_end":253,"column_start":62,"column_end":79,"is_primary":true,"text":[{"text":"                    req.method = value.as_string().unwrap_or(\"GET\".to_string());","highlight_start":62,"highlight_end":79}],"label":null,"suggested_replacement":"\"GET\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:253:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    req.method = value.as_string().unwrap_or(\"GET\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"GET\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9446,"byte_end":9472,"line_start":269,"line_end":269,"column_start":44,"column_end":70,"is_primary":true,"text":[{"text":"                        req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());","highlight_start":44,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":9446,"byte_end":9472,"line_start":269,"line_end":269,"column_start":44,"column_end":70,"is_primary":true,"text":[{"text":"                        req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());","highlight_start":44,"highlight_end":70}],"label":null,"suggested_replacement":"\"Content-Type\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:269:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"Content-Type\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9474,"byte_end":9507,"line_start":269,"line_end":269,"column_start":72,"column_end":105,"is_primary":true,"text":[{"text":"                        req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());","highlight_start":72,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":9474,"byte_end":9507,"line_start":269,"line_end":269,"column_start":72,"column_end":105,"is_primary":true,"text":[{"text":"                        req.headers.insert(\"Content-Type\".to_string(), \"multipart/form-data\".to_string());","highlight_start":72,"highlight_end":105}],"label":null,"suggested_replacement":"\"multipart/form-data\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:269:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0ming(), \"multipart/form-data\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"multipart/form-data\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9720,"byte_end":9758,"line_start":277,"line_end":277,"column_start":45,"column_end":83,"is_primary":true,"text":[{"text":"        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {","highlight_start":45,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":9720,"byte_end":9758,"line_start":277,"line_end":277,"column_start":45,"column_end":83,"is_primary":true,"text":[{"text":"        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {","highlight_start":45,"highlight_end":83}],"label":null,"suggested_replacement":"return k.eq_ignore_ascii_case(\"Content-Type\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:277:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return k.eq_ignore_ascii_case(\"Content-Type\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9713,"byte_end":9714,"line_start":277,"line_end":277,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:277:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !req.headers.iter().any(|(k, _)| k.eq_ignore_ascii_case(\"Content-Type\")) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9793,"byte_end":9819,"line_start":278,"line_end":278,"column_start":32,"column_end":58,"is_primary":true,"text":[{"text":"            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());","highlight_start":32,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":9793,"byte_end":9819,"line_start":278,"line_end":278,"column_start":32,"column_end":58,"is_primary":true,"text":[{"text":"            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());","highlight_start":32,"highlight_end":58}],"label":null,"suggested_replacement":"\"Content-Type\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:278:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"Content-Type\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9821,"byte_end":9851,"line_start":278,"line_end":278,"column_start":60,"column_end":90,"is_primary":true,"text":[{"text":"            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());","highlight_start":60,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":9821,"byte_end":9851,"line_start":278,"line_end":278,"column_start":60,"column_end":90,"is_primary":true,"text":[{"text":"            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());","highlight_start":60,"highlight_end":90}],"label":null,"suggested_replacement":"\"application/json\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:278:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            req.headers.insert(\"Content-Type\".to_string(), \"application/json\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"application/json\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10058,"byte_end":10061,"line_start":287,"line_end":287,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":10058,"byte_end":10061,"line_start":287,"line_end":287,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            val","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:287:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":9973,"byte_end":9974,"line_start":284,"line_end":284,"column_start":43,"column_end":44,"is_primary":true,"text":[{"text":"        let l8_clients = L8_CLIENTS.with(|v| {","highlight_start":43,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:284:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let l8_clients = L8_CLIENTS.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"called `map(<f>).unwrap_or(<a>)` on an `Option` value","code":{"code":"clippy::map_unwrap_or","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10313,"byte_end":10430,"line_start":298,"line_end":302,"column_start":24,"column_end":39,"is_primary":true,"text":[{"text":"    let content_type = req","highlight_start":24,"highlight_end":27},{"text":"        .headers","highlight_start":1,"highlight_end":17},{"text":"        .get(\"Content-Type\")","highlight_start":1,"highlight_end":29},{"text":"        .map(|v| v.as_str())","highlight_start":1,"highlight_end":29},{"text":"        .unwrap_or(\"application/json\")","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::map-unwrap-or` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::map_unwrap_or)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use `map_or(<a>, <f>)` instead","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":10372,"byte_end":10375,"line_start":301,"line_end":301,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":10,"highlight_end":13}],"label":null,"suggested_replacement":"map_or","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":10376,"byte_end":10376,"line_start":301,"line_end":301,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":"\"application/json\", ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":10391,"byte_end":10430,"line_start":301,"line_end":302,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":29,"highlight_end":29},{"text":"        .unwrap_or(\"application/json\")","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: called `map(<f>).unwrap_or(<a>)` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:298:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let content_type = req\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .headers\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get(\"Content-Type\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|v| v.as_str())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .unwrap_or(\"application/json\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::map-unwrap-or` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::map_unwrap_or)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `map_or(<a>, <f>)` instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        .\u001b[0m\u001b[0m\u001b[38;5;9mmap\u001b[0m\u001b[0m(|v| v.as_str())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        .\u001b[0m\u001b[0m\u001b[38;5;10mmap_or\u001b[0m\u001b[0m(\u001b[0m\u001b[0m\u001b[38;5;10m\"application/json\", \u001b[0m\u001b[0m|v| v.as_str())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant closure","code":{"code":"clippy::redundant_closure_for_method_calls","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10376,"byte_end":10390,"line_start":301,"line_end":301,"column_start":14,"column_end":28,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":14,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace the closure with the method itself","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":10376,"byte_end":10390,"line_start":301,"line_end":301,"column_start":14,"column_end":28,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":14,"highlight_end":28}],"label":null,"suggested_replacement":"std::string::String::as_str","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant closure\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:301:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|v| v.as_str())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the closure with the method itself: `std::string::String::as_str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10380,"byte_end":10390,"line_start":301,"line_end":301,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":18,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":10380,"byte_end":10390,"line_start":301,"line_end":301,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":18,"highlight_end":28}],"label":null,"suggested_replacement":"return v.as_str()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:301:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|v| v.as_str())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return v.as_str()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10377,"byte_end":10378,"line_start":301,"line_end":301,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"        .map(|v| v.as_str())","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:301:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|v| v.as_str())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"slicing when dereferencing would work","code":{"code":"clippy::deref_by_slicing","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10477,"byte_end":10494,"line_start":305,"line_end":305,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    let res = match &content_type[..] {","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#deref_by_slicing","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::deref-by-slicing` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::deref_by_slicing)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"dereference the original value instead","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":10477,"byte_end":10494,"line_start":305,"line_end":305,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"    let res = match &content_type[..] {","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":"(&*content_type)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: slicing when dereferencing would work\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:305:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = match &content_type[..] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: dereference the original value instead: `(&*content_type)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#deref_by_slicing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::deref-by-slicing` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::deref_by_slicing)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"indexing into a string may panic if the index is within a UTF-8 character","code":{"code":"clippy::string_slice","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10478,"byte_end":10494,"line_start":305,"line_end":305,"column_start":22,"column_end":38,"is_primary":true,"text":[{"text":"    let res = match &content_type[..] {","highlight_start":22,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_slice","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::string-slice` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::string_slice)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: indexing into a string may panic if the index is within a UTF-8 character\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:305:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res = match &content_type[..] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_slice\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::string-slice` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::string_slice)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10683,"byte_end":10686,"line_start":310,"line_end":310,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":10683,"byte_end":10686,"line_start":310,"line_end":310,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:310:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10586,"byte_end":10587,"line_start":307,"line_end":307,"column_start":58,"column_end":59,"is_primary":true,"text":[{"text":"            let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":58,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:307:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`symmetric_key` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10720,"byte_end":10733,"line_start":313,"line_end":313,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"            let symmetric_key = match symmetric_key {","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":10545,"byte_end":10558,"line_start":307,"line_end":307,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"            let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `symmetric_key` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:313:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let symmetric_key = match symmetric_key {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:307:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11061,"byte_end":11064,"line_start":323,"line_end":323,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":11061,"byte_end":11064,"line_start":323,"line_end":323,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:323:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":10964,"byte_end":10965,"line_start":320,"line_end":320,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"            let up_jwt = UP_JWT.with(|v| {","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:320:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let up_jwt = UP_JWT.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11213,"byte_end":11216,"line_start":329,"line_end":329,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":11213,"byte_end":11216,"line_start":329,"line_end":329,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:329:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11116,"byte_end":11117,"line_start":326,"line_end":326,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"            let uuid = UUID.with(|v| {","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:326:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let uuid = UUID.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11689,"byte_end":11690,"line_start":340,"line_end":340,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                Err(e) => {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:340:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11731,"byte_end":11788,"line_start":341,"line_end":341,"column_start":35,"column_end":92,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":35,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":11758,"byte_end":11758,"line_start":341,"line_end":341,"column_start":62,"column_end":62,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":62,"highlight_end":62}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":11775,"byte_end":11775,"line_start":341,"line_end":341,"column_start":79,"column_end":79,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":79,"highlight_end":79}],"label":null,"suggested_replacement":"req","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":11779,"byte_end":11782,"line_start":341,"line_end":341,"column_start":83,"column_end":86,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":83,"highlight_end":86}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":11782,"byte_end":11787,"line_start":341,"line_end":341,"column_start":86,"column_end":91,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));","highlight_start":86,"highlight_end":91}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:341:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\", e, req));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to fetch: {}\\nWith request {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e, req\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to fetch: {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m}\\nWith request {\u001b[0m\u001b[0m\u001b[38;5;10mreq\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11967,"byte_end":11993,"line_start":349,"line_end":349,"column_start":25,"column_end":51,"is_primary":true,"text":[{"text":"                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());","highlight_start":25,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":11967,"byte_end":11993,"line_start":349,"line_end":349,"column_start":25,"column_end":51,"is_primary":true,"text":[{"text":"                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());","highlight_start":25,"highlight_end":51}],"label":null,"suggested_replacement":"\"Content-Type\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:349:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m349\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"Content-Type\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":11995,"byte_end":12039,"line_start":349,"line_end":349,"column_start":53,"column_end":97,"is_primary":true,"text":[{"text":"                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());","highlight_start":53,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":11995,"byte_end":12039,"line_start":349,"line_end":349,"column_start":53,"column_end":97,"is_primary":true,"text":[{"text":"                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());","highlight_start":53,"highlight_end":97}],"label":null,"suggested_replacement":"\"application/layer8.buffer+json\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:349:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m349\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .insert(\"Content-Type\".to_string(), \"application/layer8.buffer+json\".to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"application/layer8.buffer+json\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":12374,"byte_end":12375,"line_start":358,"line_end":358,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                Err(e) => {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:358:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m358\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":12670,"byte_end":12673,"line_start":367,"line_end":367,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"                    val","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":12670,"byte_end":12673,"line_start":367,"line_end":367,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"                    val","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:367:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m367\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":12561,"byte_end":12562,"line_start":364,"line_end":364,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"                let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:364:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let symmetric_key = USER_SYMMETRIC_KEY.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13070,"byte_end":13073,"line_start":381,"line_end":381,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":13070,"byte_end":13073,"line_start":381,"line_end":381,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:381:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":12973,"byte_end":12974,"line_start":378,"line_end":378,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"            let up_jwt = UP_JWT.with(|v| {","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:378:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let up_jwt = UP_JWT.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13222,"byte_end":13225,"line_start":387,"line_end":387,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":13222,"byte_end":13225,"line_start":387,"line_end":387,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                val","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"return val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:387:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                val\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13125,"byte_end":13126,"line_start":384,"line_end":384,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"            let uuid = UUID.with(|v| {","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:384:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let uuid = UUID.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13266,"byte_end":13305,"line_start":390,"line_end":390,"column_start":24,"column_end":63,"is_primary":true,"text":[{"text":"            req.body = serde_json::to_vec(&form_data).unwrap();","highlight_start":24,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::unwrap-used` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::unwrap_used)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:390:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            req.body = serde_json::to_vec(&form_data).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::unwrap-used` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::unwrap_used)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13455,"byte_end":13456,"line_start":393,"line_end":393,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                Err(e) => {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:393:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13637,"byte_end":13677,"line_start":401,"line_end":401,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            status_text: \"Content-Type not supported\".to_string(),","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":13637,"byte_end":13677,"line_start":401,"line_end":401,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            status_text: \"Content-Type not supported\".to_string(),","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"\"Content-Type not supported\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:401:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            status_text: \"Content-Type not supported\".to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"Content-Type not supported\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13794,"byte_end":13826,"line_start":407,"line_end":407,"column_start":19,"column_end":51,"is_primary":true,"text":[{"text":"    let headers = web_sys::Headers::new().unwrap();","highlight_start":19,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:407:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let headers = web_sys::Headers::new().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"it is more concise to loop over references to containers instead of using explicit iteration methods","code":{"code":"clippy::explicit_iter_loop","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13852,"byte_end":13870,"line_start":408,"line_end":408,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"    for (key, value) in res.headers.iter() {","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to write this more concisely, try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":13852,"byte_end":13870,"line_start":408,"line_end":408,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"    for (key, value) in res.headers.iter() {","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"&res.headers","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: it is more concise to loop over references to containers instead of using explicit iteration methods\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:408:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for (key, value) in res.headers.iter() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to write this more concisely, try: `&res.headers`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type of pattern does not match the expression type","code":{"code":"clippy::pattern_type_mismatch","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":13836,"byte_end":13848,"line_start":408,"line_end":408,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    for (key, value) in res.headers.iter() {","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"explicitly match against a `&_` pattern and adjust the enclosed variable bindings","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type of pattern does not match the expression type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:408:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for (key, value) in res.headers.iter() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: explicitly match against a `&_` pattern and adjust the enclosed variable bindings\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14329,"byte_end":14330,"line_start":421,"line_end":421,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        Err(e) => {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:421:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(e) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14374,"byte_end":14392,"line_start":422,"line_end":422,"column_start":38,"column_end":56,"is_primary":true,"text":[{"text":"            return Err(JsError::new(&format!(\"{:?}\", e)));","highlight_start":38,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":14384,"byte_end":14384,"line_start":422,"line_end":422,"column_start":48,"column_end":48,"is_primary":true,"text":[{"text":"            return Err(JsError::new(&format!(\"{:?}\", e)));","highlight_start":48,"highlight_end":48}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":14388,"byte_end":14391,"line_start":422,"line_end":422,"column_start":52,"column_end":55,"is_primary":true,"text":[{"text":"            return Err(JsError::new(&format!(\"{:?}\", e)));","highlight_start":52,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:422:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(JsError::new(&format!(\"{:?}\", e)));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            return Err(JsError::new(&format!(\"{:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e\u001b[0m\u001b[0m)));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            return Err(JsError::new(&format!(\"{\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m:?}\")));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14434,"byte_end":16769,"line_start":429,"line_end":490,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":1,"highlight_end":92},{"text":"    let mut form_data = HashMap::<String, Value>::new();","highlight_start":1,"highlight_end":57},{"text":"    for entry in FormData::entries(&FormData::from(js_body.clone())) {","highlight_start":1,"highlight_end":71},{"text":"        let entry = entry.map_err(|err| {","highlight_start":1,"highlight_end":42},{"text":"            let msg = format!(","highlight_start":1,"highlight_end":31},{"text":"                \"FormData entry error: {}\",","highlight_start":1,"highlight_end":44},{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":1,"highlight_end":86},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            console_error!(&msg);","highlight_start":1,"highlight_end":34},{"text":"            msg","highlight_start":1,"highlight_end":16},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if entry.is_null() || entry.is_undefined() {","highlight_start":1,"highlight_end":53},{"text":"            // we skip null or undefined entries if any","highlight_start":1,"highlight_end":56},{"text":"            continue;","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // [key, value]","highlight_start":1,"highlight_end":24},{"text":"        let key_val_entry = Array::from(&entry);","highlight_start":1,"highlight_end":49},{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":1,"highlight_end":102},{"text":"        let value = key_val_entry.get(1);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = {","highlight_start":1,"highlight_end":21},{"text":"            if value.is_instance_of::<File>() {","highlight_start":1,"highlight_end":48},{"text":"                construct_file_data(value).await?","highlight_start":1,"highlight_end":50},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                match get_constructor_name(&value).as_str() {","highlight_start":1,"highlight_end":62},{"text":"                    \"String\" => json!({","highlight_start":1,"highlight_end":40},{"text":"                        \"_type\": \"String\",","highlight_start":1,"highlight_end":43},{"text":"                        \"value\": value.as_string().unwrap(),","highlight_start":1,"highlight_end":61},{"text":"                    }),","highlight_start":1,"highlight_end":24},{"text":"                    \"Number\" => json!({","highlight_start":1,"highlight_end":40},{"text":"                        \"_type\": \"Number\",","highlight_start":1,"highlight_end":43},{"text":"                        \"value\": value.as_f64().unwrap(),","highlight_start":1,"highlight_end":58},{"text":"                    }),","highlight_start":1,"highlight_end":24},{"text":"                    \"Boolean\" => json!({","highlight_start":1,"highlight_end":41},{"text":"                        \"_type\": \"Boolean\",","highlight_start":1,"highlight_end":44},{"text":"                        \"value\": value.as_bool().unwrap(),","highlight_start":1,"highlight_end":59},{"text":"                    }),","highlight_start":1,"highlight_end":24},{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":1,"highlight_end":96},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if form_data.contains_key(&key) {","highlight_start":1,"highlight_end":42},{"text":"            if !form_data.get(&key).unwrap().is_array() {","highlight_start":1,"highlight_end":58},{"text":"                let old_value = form_data.get(&key).unwrap();","highlight_start":1,"highlight_end":62},{"text":"                form_data.insert(key, json!([old_value, data]));","highlight_start":1,"highlight_end":65},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let old_value = form_data.get_mut(&key).unwrap();","highlight_start":1,"highlight_end":66},{"text":"                old_value","highlight_start":1,"highlight_end":26},{"text":"                    .as_array_mut()","highlight_start":1,"highlight_end":36},{"text":"                    .expect_throw(\"expected old value to be an array; qed above\")","highlight_start":1,"highlight_end":82},{"text":"                    .push(data);","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            form_data.insert(key, serde_json::to_value(data).unwrap());","highlight_start":1,"highlight_end":72},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(form_data)","highlight_start":1,"highlight_end":18},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:429:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m430\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut form_data = HashMap::<String, Value>::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for entry in FormData::entries(&FormData::from(js_body.clone())) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entry = entry.map_err(|err| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(form_data)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14434,"byte_end":14523,"line_start":429,"line_end":429,"column_start":1,"column_end":90,"is_primary":true,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":1,"highlight_end":90}],"label":"future returned by `construct_form_data` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":14434,"byte_end":14523,"line_start":429,"line_end":429,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":15408,"byte_end":15413,"line_start":453,"line_end":453,"column_start":44,"column_end":49,"is_primary":true,"text":[{"text":"                construct_file_data(value).await?","highlight_start":44,"highlight_end":49}],"label":"await occurs here, with `entry` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":15408,"byte_end":15413,"line_start":453,"line_end":453,"column_start":44,"column_end":49,"is_primary":false,"text":[{"text":"                construct_file_data(value).await?","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/js.rs","byte_start":14666,"byte_end":14671,"line_start":432,"line_end":432,"column_start":13,"column_end":18,"is_primary":false,"text":[{"text":"        let entry = entry.map_err(|err| {","highlight_start":13,"highlight_end":18}],"label":"has type `wasm_bindgen::JsValue` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":14463,"byte_end":14470,"line_start":429,"line_end":429,"column_start":30,"column_end":37,"is_primary":true,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":30,"highlight_end":37}],"label":"has type `&wasm_bindgen::JsValue` which is not `Send`, because `wasm_bindgen::JsValue` is not `Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":14463,"byte_end":14470,"line_start":429,"line_end":429,"column_start":30,"column_end":37,"is_primary":false,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":30,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as it awaits another future which is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":18846,"byte_end":18875,"line_start":541,"line_end":541,"column_start":28,"column_end":57,"is_primary":true,"text":[{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":28,"highlight_end":57}],"label":"await occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:429:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `construct_form_data` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:453:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entry = entry.map_err(|err| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::JsValue` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                construct_file_data(value).await?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `entry` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:429:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `&wasm_bindgen::JsValue` which is not `Send`, because `wasm_bindgen::JsValue` is not `Sync`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Sync`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as it awaits another future which is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:541:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let chunk_object = JsFuture::from(reader.read())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14674,"byte_end":14933,"line_start":432,"line_end":439,"column_start":21,"column_end":12,"is_primary":true,"text":[{"text":"        let entry = entry.map_err(|err| {","highlight_start":21,"highlight_end":42},{"text":"            let msg = format!(","highlight_start":1,"highlight_end":31},{"text":"                \"FormData entry error: {}\",","highlight_start":1,"highlight_end":44},{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":1,"highlight_end":86},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            console_error!(&msg);","highlight_start":1,"highlight_end":34},{"text":"            msg","highlight_start":1,"highlight_end":16},{"text":"        })?;","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::question-mark-used` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::question_mark_used)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:432:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let entry = entry.map_err(|err| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let msg = format!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m434\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"FormData entry error: {}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            msg\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::question-mark-used` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::question_mark_used)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14918,"byte_end":14921,"line_start":438,"line_end":438,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            msg","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":14918,"byte_end":14921,"line_start":438,"line_end":438,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            msg","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"return msg","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:438:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            msg\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return msg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `unwrap_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14803,"byte_end":14856,"line_start":435,"line_end":435,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":14803,"byte_end":14856,"line_start":435,"line_end":435,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"unwrap_or_else(|| \"issue getting FormData entry\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `unwrap_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:435:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `unwrap_or_else(|| \"issue getting FormData entry\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14813,"byte_end":14855,"line_start":435,"line_end":435,"column_start":43,"column_end":85,"is_primary":true,"text":[{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":43,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":14813,"byte_end":14855,"line_start":435,"line_end":435,"column_start":43,"column_end":85,"is_primary":true,"text":[{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":43,"highlight_end":85}],"label":null,"suggested_replacement":"\"issue getting FormData entry\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:435:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"issue getting FormData entry\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`entry` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14666,"byte_end":14671,"line_start":432,"line_end":432,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let entry = entry.map_err(|err| {","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":14591,"byte_end":14596,"line_start":431,"line_end":431,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    for entry in FormData::entries(&FormData::from(js_body.clone())) {","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `entry` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:432:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entry = entry.map_err(|err| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:431:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for entry in FormData::entries(&FormData::from(js_body.clone())) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15169,"byte_end":15251,"line_start":448,"line_end":448,"column_start":19,"column_end":101,"is_primary":true,"text":[{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":19,"highlight_end":101}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:448:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mkey = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15202,"byte_end":15250,"line_start":448,"line_end":448,"column_start":52,"column_end":100,"is_primary":true,"text":[{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":52,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":15202,"byte_end":15250,"line_start":448,"line_end":448,"column_start":52,"column_end":100,"is_primary":true,"text":[{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":52,"highlight_end":100}],"label":null,"suggested_replacement":"ok_or_else(|| \"Object key was not a string\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:448:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mget(0).as_string().ok_or(\"Object key was not a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| \"Object key was not a string\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15208,"byte_end":15249,"line_start":448,"line_end":448,"column_start":58,"column_end":99,"is_primary":true,"text":[{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":58,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":15208,"byte_end":15249,"line_start":448,"line_end":448,"column_start":58,"column_end":99,"is_primary":true,"text":[{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":58,"highlight_end":99}],"label":null,"suggested_replacement":"\"Object key was not a string\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:448:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m0).as_string().ok_or(\"Object key was not a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"Object key was not a string\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15381,"byte_end":15414,"line_start":453,"line_end":453,"column_start":17,"column_end":50,"is_primary":true,"text":[{"text":"                construct_file_data(value).await?","highlight_start":17,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:453:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                construct_file_data(value).await?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15614,"byte_end":15640,"line_start":458,"line_end":458,"column_start":34,"column_end":60,"is_primary":true,"text":[{"text":"                        \"value\": value.as_string().unwrap(),","highlight_start":34,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:458:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"value\": value.as_string().unwrap(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15782,"byte_end":15805,"line_start":462,"line_end":462,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"                        \"value\": value.as_f64().unwrap(),","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:462:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"value\": value.as_f64().unwrap(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":15949,"byte_end":15973,"line_start":466,"line_end":466,"column_start":34,"column_end":58,"is_primary":true,"text":[{"text":"                        \"value\": value.as_bool().unwrap(),","highlight_start":34,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:466:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"value\": value.as_bool().unwrap(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16035,"byte_end":16092,"line_start":468,"line_end":468,"column_start":37,"column_end":94,"is_primary":true,"text":[{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":37,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":16069,"byte_end":16069,"line_start":468,"line_end":468,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"x","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":16081,"byte_end":16081,"line_start":468,"line_end":468,"column_start":83,"column_end":83,"is_primary":true,"text":[{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":83,"highlight_end":83}],"label":null,"suggested_replacement":"key","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":16083,"byte_end":16086,"line_start":468,"line_end":468,"column_start":85,"column_end":88,"is_primary":true,"text":[{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":85,"highlight_end":88}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":16086,"byte_end":16091,"line_start":468,"line_end":468,"column_start":88,"column_end":93,"is_primary":true,"text":[{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":88,"highlight_end":93}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:468:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    x => return Err(format!(\"Unsupported value type: {} for key: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, x, key\u001b[0m\u001b[0m)),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    x => return Err(format!(\"Unsupported value type: {\u001b[0m\u001b[0m\u001b[38;5;10mx\u001b[0m\u001b[0m} for key: {\u001b[0m\u001b[0m\u001b[38;5;10mkey\u001b[0m\u001b[0m}\")),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary boolean `not` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16193,"byte_end":16643,"line_start":474,"line_end":483,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if !form_data.get(&key).unwrap().is_array() {","highlight_start":13,"highlight_end":58},{"text":"                let old_value = form_data.get(&key).unwrap();","highlight_start":1,"highlight_end":62},{"text":"                form_data.insert(key, json!([old_value, data]));","highlight_start":1,"highlight_end":65},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let old_value = form_data.get_mut(&key).unwrap();","highlight_start":1,"highlight_end":66},{"text":"                old_value","highlight_start":1,"highlight_end":26},{"text":"                    .as_array_mut()","highlight_start":1,"highlight_end":36},{"text":"                    .expect_throw(\"expected old value to be an array; qed above\")","highlight_start":1,"highlight_end":82},{"text":"                    .push(data);","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the `!` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::if-not-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::if_not_else)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary boolean `not` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:474:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !form_data.get(&key).unwrap().is_array() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let old_value = form_data.get(&key).unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                form_data.insert(key, json!([old_value, data]));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .push(data);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `!` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::if-not-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::if_not_else)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise","code":{"code":"clippy::get_unwrap","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16197,"byte_end":16225,"line_start":474,"line_end":474,"column_start":17,"column_end":45,"is_primary":true,"text":[{"text":"            if !form_data.get(&key).unwrap().is_array() {","highlight_start":17,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::get-unwrap` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::get_unwrap)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":16197,"byte_end":16225,"line_start":474,"line_end":474,"column_start":17,"column_end":45,"is_primary":true,"text":[{"text":"            if !form_data.get(&key).unwrap().is_array() {","highlight_start":17,"highlight_end":45}],"label":null,"suggested_replacement":"form_data[&key]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:474:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !form_data.get(&key).unwrap().is_array() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `form_data[&key]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::get-unwrap` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::get_unwrap)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16197,"byte_end":16225,"line_start":474,"line_end":474,"column_start":17,"column_end":45,"is_primary":true,"text":[{"text":"            if !form_data.get(&key).unwrap().is_array() {","highlight_start":17,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:474:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !form_data.get(&key).unwrap().is_array() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise","code":{"code":"clippy::get_unwrap","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16271,"byte_end":16299,"line_start":475,"line_end":475,"column_start":33,"column_end":61,"is_primary":true,"text":[{"text":"                let old_value = form_data.get(&key).unwrap();","highlight_start":33,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":16271,"byte_end":16299,"line_start":475,"line_end":475,"column_start":33,"column_end":61,"is_primary":true,"text":[{"text":"                let old_value = form_data.get(&key).unwrap();","highlight_start":33,"highlight_end":61}],"label":null,"suggested_replacement":"&form_data[&key]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:475:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let old_value = form_data.get(&key).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `&form_data[&key]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16271,"byte_end":16299,"line_start":475,"line_end":475,"column_start":33,"column_end":61,"is_primary":true,"text":[{"text":"                let old_value = form_data.get(&key).unwrap();","highlight_start":33,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:475:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let old_value = form_data.get(&key).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16419,"byte_end":16451,"line_start":478,"line_end":478,"column_start":33,"column_end":65,"is_primary":true,"text":[{"text":"                let old_value = form_data.get_mut(&key).unwrap();","highlight_start":33,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:478:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let old_value = form_data.get_mut(&key).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16695,"byte_end":16730,"line_start":485,"line_end":485,"column_start":35,"column_end":70,"is_primary":true,"text":[{"text":"            form_data.insert(key, serde_json::to_value(data).unwrap());","highlight_start":35,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:485:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            form_data.insert(key, serde_json::to_value(data).unwrap());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16771,"byte_end":17805,"line_start":492,"line_end":513,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn get_constructor_name(obj: &JsValue) -> String {","highlight_start":1,"highlight_end":51},{"text":"    // Get the prototype of the object","highlight_start":1,"highlight_end":39},{"text":"    let prototype = get_prototype_of(obj).expect_throw(\"expected prototype to be present since FormData has a finite set of prototypes (?!)\");","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Get the constructor from the prototype using Reflect.get","highlight_start":1,"highlight_end":64},{"text":"    let constructor = js_sys::Reflect::get(&prototype, &JsValue::from(\"constructor\")).expect_throw(\"expected constructor to be present; qed\");","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Check if the constructor is a function","highlight_start":1,"highlight_end":46},{"text":"    if constructor.is_function() {","highlight_start":1,"highlight_end":35},{"text":"        // Convert the function to string and extract the name","highlight_start":1,"highlight_end":63},{"text":"        let constructor_name = to_string(&constructor);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Extract the name from the function string","highlight_start":1,"highlight_end":53},{"text":"        if let Some(name_start) = constructor_name.find(\"function \") {","highlight_start":1,"highlight_end":71},{"text":"            let name_end = constructor_name.find(\"(\").unwrap_or(constructor_name.len());","highlight_start":1,"highlight_end":89},{"text":"            let name = &constructor_name[name_start + 9..name_end].trim(); // Skip \"function \"","highlight_start":1,"highlight_end":95},{"text":"            return name.to_string();","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    \"undefined\".to_string()","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:492:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn get_constructor_name(obj: &JsValue) -> String {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Get the prototype of the object\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let prototype = get_prototype_of(obj).expect_throw(\"expected prototype to be present since \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"undefined\".to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17780,"byte_end":17803,"line_start":512,"line_end":512,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    \"undefined\".to_string()","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":17780,"byte_end":17803,"line_start":512,"line_end":512,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    \"undefined\".to_string()","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"return \"undefined\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:512:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"undefined\".to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"undefined\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17091,"byte_end":17111,"line_start":497,"line_end":497,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"    let constructor = js_sys::Reflect::get(&prototype, &JsValue::from(\"constructor\")).expect_throw(\"expected constructor to be present; qed\");","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:497:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let constructor = js_sys::Reflect::get(&prototype, &JsValue::from(\"constructor\")).expect_thro\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"single-character string constant used as pattern","code":{"code":"clippy::single_char_pattern","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17587,"byte_end":17590,"line_start":506,"line_end":506,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"            let name_end = constructor_name.find(\"(\").unwrap_or(constructor_name.len());","highlight_start":50,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::single-char-pattern` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::single_char_pattern)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using a `char`","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":17587,"byte_end":17590,"line_start":506,"line_end":506,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"            let name_end = constructor_name.find(\"(\").unwrap_or(constructor_name.len());","highlight_start":50,"highlight_end":53}],"label":null,"suggested_replacement":"'('","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: single-character string constant used as pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:506:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let name_end = constructor_name.find(\"(\").unwrap_or(constructor_name.len());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using a `char`: `'('`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::single-char-pattern` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::single_char_pattern)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"indexing into a string may panic if the index is within a UTF-8 character","code":{"code":"clippy::string_slice","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17651,"byte_end":17693,"line_start":507,"line_end":507,"column_start":25,"column_end":67,"is_primary":true,"text":[{"text":"            let name = &constructor_name[name_start + 9..name_end].trim(); // Skip \"function \"","highlight_start":25,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_slice","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: indexing into a string may panic if the index is within a UTF-8 character\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:507:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let name = &constructor_name[name_start + 9..name_end].trim(); // Skip \"function \"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_slice\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arithmetic operation that can potentially result in unexpected side-effects","code":{"code":"clippy::arithmetic_side_effects","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17668,"byte_end":17682,"line_start":507,"line_end":507,"column_start":42,"column_end":56,"is_primary":true,"text":[{"text":"            let name = &constructor_name[name_start + 9..name_end].trim(); // Skip \"function \"","highlight_start":42,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::arithmetic-side-effects` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::arithmetic_side_effects)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: arithmetic operation that can potentially result in unexpected side-effects\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:507:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let name = &constructor_name[name_start + 9..name_end].trim(); // Skip \"function \"\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::arithmetic-side-effects` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::arithmetic_side_effects)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"calling `to_string` on `&&str`","code":{"code":"clippy::inefficient_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17741,"byte_end":17757,"line_start":508,"line_end":508,"column_start":20,"column_end":36,"is_primary":true,"text":[{"text":"            return name.to_string();","highlight_start":20,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::inefficient-to-string` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::inefficient_to_string)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try dereferencing the receiver","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":17741,"byte_end":17757,"line_start":508,"line_end":508,"column_start":20,"column_end":36,"is_primary":true,"text":[{"text":"            return name.to_string();","highlight_start":20,"highlight_end":36}],"label":null,"suggested_replacement":"(*name).to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calling `to_string` on `&&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:508:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return name.to_string();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try dereferencing the receiver: `(*name).to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::inefficient-to-string` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::inefficient_to_string)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17780,"byte_end":17803,"line_start":512,"line_end":512,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    \"undefined\".to_string()","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":17780,"byte_end":17803,"line_start":512,"line_end":512,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    \"undefined\".to_string()","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"\"undefined\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:512:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"undefined\".to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"undefined\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17807,"byte_end":20097,"line_start":515,"line_end":577,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {","highlight_start":1,"highlight_end":84},{"text":"    let reflect_get = js_sys::Reflect::get;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let name = reflect_get(&value, &JsValue::from(\"name\"))","highlight_start":1,"highlight_end":59},{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_string()","highlight_start":1,"highlight_end":21},{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let size = reflect_get(&value, &JsValue::from(\"size\"))","highlight_start":1,"highlight_end":59},{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_f64()","highlight_start":1,"highlight_end":18},{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let type_ = reflect_get(&value, &JsValue::from(\"type\"))","highlight_start":1,"highlight_end":60},{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_string()","highlight_start":1,"highlight_end":21},{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let reader = File::from(value)","highlight_start":1,"highlight_end":35},{"text":"        .stream()","highlight_start":1,"highlight_end":18},{"text":"        .get_reader()","highlight_start":1,"highlight_end":22},{"text":"        .dyn_into::<web_sys::ReadableStreamDefaultReader>()","highlight_start":1,"highlight_end":60},{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut buff = Vec::new();","highlight_start":1,"highlight_end":31},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":1,"highlight_end":57},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":1,"highlight_end":46},{"text":"            .dyn_into::<Object>()","highlight_start":1,"highlight_end":34},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let done = reflect_get(&chunk_object, &JsValue::from_str(\"done\"))","highlight_start":1,"highlight_end":74},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68},{"text":"            .as_bool()","highlight_start":1,"highlight_end":23},{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if done {","highlight_start":1,"highlight_end":18},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk = reflect_get(&chunk_object, &JsValue::from_str(\"value\"))","highlight_start":1,"highlight_end":76},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68},{"text":"            .dyn_into::<Uint8Array>()","highlight_start":1,"highlight_end":38},{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let buff_len = buff.len();","highlight_start":1,"highlight_end":35},{"text":"        buff.resize(buff_len + chunk.length() as usize, 0);","highlight_start":1,"highlight_end":60},{"text":"        chunk.copy_to(&mut buff[buff_len..]);","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // compress and encode the file","highlight_start":1,"highlight_end":36},{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":1,"highlight_end":119},{"text":"    console_log!(&format!(\"File `{name}` compressed and encoded successfully\"));","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(json!({","highlight_start":1,"highlight_end":15},{"text":"        \"_type\": \"File\",","highlight_start":1,"highlight_end":25},{"text":"        \"name\": name,","highlight_start":1,"highlight_end":22},{"text":"        \"size\": size,","highlight_start":1,"highlight_end":22},{"text":"        \"type\": type_,","highlight_start":1,"highlight_end":23},{"text":"        \"buff\": buff,","highlight_start":1,"highlight_end":22},{"text":"    }))","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:515:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let reflect_get = js_sys::Reflect::get;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let name = reflect_get(&value, &JsValue::from(\"name\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17807,"byte_end":17888,"line_start":515,"line_end":515,"column_start":1,"column_end":82,"is_primary":true,"text":[{"text":"async fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {","highlight_start":1,"highlight_end":82}],"label":"future returned by `construct_file_data` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":17807,"byte_end":17888,"line_start":515,"line_end":515,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"async fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as it awaits another future which is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":18846,"byte_end":18875,"line_start":541,"line_end":541,"column_start":28,"column_end":57,"is_primary":true,"text":[{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":28,"highlight_end":57}],"label":"await occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":18889,"byte_end":18894,"line_start":542,"line_end":542,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"            .await","highlight_start":14,"highlight_end":19}],"label":"await occurs here, with `value` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":18889,"byte_end":18894,"line_start":542,"line_end":542,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"            .await","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/js.rs","byte_start":17836,"byte_end":17841,"line_start":515,"line_end":515,"column_start":30,"column_end":35,"is_primary":false,"text":[{"text":"async fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {","highlight_start":30,"highlight_end":35}],"label":"has type `wasm_bindgen::JsValue` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:515:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `construct_file_data` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as it awaits another future which is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:541:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let chunk_object = JsFuture::from(reader.read())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:542:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::JsValue` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `value` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17913,"byte_end":17933,"line_start":516,"line_end":516,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"    let reflect_get = js_sys::Reflect::get;","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:516:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let reflect_get = js_sys::Reflect::get;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17951,"byte_end":18140,"line_start":518,"line_end":521,"column_start":16,"column_end":60,"is_primary":true,"text":[{"text":"    let name = reflect_get(&value, &JsValue::from(\"name\"))","highlight_start":16,"highlight_end":59},{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_string()","highlight_start":1,"highlight_end":21},{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:518:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let name = reflect_get(&value, &JsValue::from(\"name\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected name to be present\".to_string())?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected name to be a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18090,"byte_end":18139,"line_start":521,"line_end":521,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18090,"byte_end":18139,"line_start":521,"line_end":521,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":"ok_or_else(|| \"expected name to be a string\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:521:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected name to be a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| \"expected name to be a string\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17951,"byte_end":18059,"line_start":518,"line_end":519,"column_start":16,"column_end":65,"is_primary":true,"text":[{"text":"    let name = reflect_get(&value, &JsValue::from(\"name\"))","highlight_start":16,"highlight_end":59},{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:518:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let name = reflect_get(&value, &JsValue::from(\"name\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected name to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18012,"byte_end":18015,"line_start":519,"line_end":519,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::map-err-ignore` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::map_err_ignore)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:519:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected name to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::map-err-ignore` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::map_err_ignore)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18016,"byte_end":18057,"line_start":519,"line_end":519,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18016,"byte_end":18057,"line_start":519,"line_end":519,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"return \"expected name to be present\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:519:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected name to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"expected name to be present\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18016,"byte_end":18057,"line_start":519,"line_end":519,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18016,"byte_end":18057,"line_start":519,"line_end":519,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"\"expected name to be present\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:519:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected name to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"expected name to be present\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18096,"byte_end":18138,"line_start":521,"line_end":521,"column_start":16,"column_end":58,"is_primary":true,"text":[{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":16,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18096,"byte_end":18138,"line_start":521,"line_end":521,"column_start":16,"column_end":58,"is_primary":true,"text":[{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":16,"highlight_end":58}],"label":null,"suggested_replacement":"\"expected name to be a string\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:521:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected name to be a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"expected name to be a string\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18158,"byte_end":18344,"line_start":523,"line_end":526,"column_start":16,"column_end":60,"is_primary":true,"text":[{"text":"    let size = reflect_get(&value, &JsValue::from(\"size\"))","highlight_start":16,"highlight_end":59},{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_f64()","highlight_start":1,"highlight_end":18},{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:523:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let size = reflect_get(&value, &JsValue::from(\"size\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected size to be present\".to_string())?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m525\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .as_f64()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected size to be a number\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18294,"byte_end":18343,"line_start":526,"line_end":526,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18294,"byte_end":18343,"line_start":526,"line_end":526,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":"ok_or_else(|| \"expected size to be a number\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:526:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected size to be a number\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| \"expected size to be a number\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18158,"byte_end":18266,"line_start":523,"line_end":524,"column_start":16,"column_end":65,"is_primary":true,"text":[{"text":"    let size = reflect_get(&value, &JsValue::from(\"size\"))","highlight_start":16,"highlight_end":59},{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:523:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let size = reflect_get(&value, &JsValue::from(\"size\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected size to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18219,"byte_end":18222,"line_start":524,"line_end":524,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:524:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected size to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18223,"byte_end":18264,"line_start":524,"line_end":524,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18223,"byte_end":18264,"line_start":524,"line_end":524,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"return \"expected size to be present\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:524:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected size to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"expected size to be present\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18223,"byte_end":18264,"line_start":524,"line_end":524,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18223,"byte_end":18264,"line_start":524,"line_end":524,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"\"expected size to be present\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:524:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected size to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"expected size to be present\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18300,"byte_end":18342,"line_start":526,"line_end":526,"column_start":16,"column_end":58,"is_primary":true,"text":[{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":16,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18300,"byte_end":18342,"line_start":526,"line_end":526,"column_start":16,"column_end":58,"is_primary":true,"text":[{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":16,"highlight_end":58}],"label":null,"suggested_replacement":"\"expected size to be a number\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:526:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected size to be a number\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"expected size to be a number\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18363,"byte_end":18552,"line_start":528,"line_end":531,"column_start":17,"column_end":60,"is_primary":true,"text":[{"text":"    let type_ = reflect_get(&value, &JsValue::from(\"type\"))","highlight_start":17,"highlight_end":60},{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_string()","highlight_start":1,"highlight_end":21},{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:528:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let type_ = reflect_get(&value, &JsValue::from(\"type\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected type to be present\".to_string())?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected type to be a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18502,"byte_end":18551,"line_start":531,"line_end":531,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18502,"byte_end":18551,"line_start":531,"line_end":531,"column_start":10,"column_end":59,"is_primary":true,"text":[{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":10,"highlight_end":59}],"label":null,"suggested_replacement":"ok_or_else(|| \"expected type to be a string\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:531:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected type to be a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| \"expected type to be a string\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18363,"byte_end":18471,"line_start":528,"line_end":529,"column_start":17,"column_end":65,"is_primary":true,"text":[{"text":"    let type_ = reflect_get(&value, &JsValue::from(\"type\"))","highlight_start":17,"highlight_end":60},{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:528:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let type_ = reflect_get(&value, &JsValue::from(\"type\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected type to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18424,"byte_end":18427,"line_start":529,"line_end":529,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:529:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected type to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18428,"byte_end":18469,"line_start":529,"line_end":529,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18428,"byte_end":18469,"line_start":529,"line_end":529,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"return \"expected type to be present\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:529:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected type to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"expected type to be present\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18428,"byte_end":18469,"line_start":529,"line_end":529,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18428,"byte_end":18469,"line_start":529,"line_end":529,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"\"expected type to be present\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:529:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"expected type to be present\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"expected type to be present\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18508,"byte_end":18550,"line_start":531,"line_end":531,"column_start":16,"column_end":58,"is_primary":true,"text":[{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":16,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18508,"byte_end":18550,"line_start":531,"line_end":531,"column_start":16,"column_end":58,"is_primary":true,"text":[{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":16,"highlight_end":58}],"label":null,"suggested_replacement":"\"expected type to be a string\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:531:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or(\"expected type to be a string\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"expected type to be a string\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18572,"byte_end":18774,"line_start":533,"line_end":537,"column_start":18,"column_end":85,"is_primary":true,"text":[{"text":"    let reader = File::from(value)","highlight_start":18,"highlight_end":35},{"text":"        .stream()","highlight_start":1,"highlight_end":18},{"text":"        .get_reader()","highlight_start":1,"highlight_end":22},{"text":"        .dyn_into::<web_sys::ReadableStreamDefaultReader>()","highlight_start":1,"highlight_end":60},{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":1,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:533:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let reader = File::from(value)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m__________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m534\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .stream()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m535\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get_reader()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .dyn_into::<web_sys::ReadableStreamDefaultReader>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|____________________________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18707,"byte_end":18710,"line_start":537,"line_end":537,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:537:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18711,"byte_end":18772,"line_start":537,"line_end":537,"column_start":22,"column_end":83,"is_primary":true,"text":[{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":22,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18711,"byte_end":18772,"line_start":537,"line_end":537,"column_start":22,"column_end":83,"is_primary":true,"text":[{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":22,"highlight_end":83}],"label":null,"suggested_replacement":"return \"issue getting ReadableStreamDefaultReader entry\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:537:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"issue getting ReadableStreamDefaultReader entry\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18711,"byte_end":18772,"line_start":537,"line_end":537,"column_start":22,"column_end":83,"is_primary":true,"text":[{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":22,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18711,"byte_end":18772,"line_start":537,"line_end":537,"column_start":22,"column_end":83,"is_primary":true,"text":[{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":22,"highlight_end":83}],"label":null,"suggested_replacement":"\"issue getting ReadableStreamDefaultReader entry\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:537:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"issue getting ReadableStreamDefaultReader entry\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18846,"byte_end":19042,"line_start":541,"line_end":545,"column_start":28,"column_end":68,"is_primary":true,"text":[{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":28,"highlight_end":57},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":1,"highlight_end":46},{"text":"            .dyn_into::<Object>()","highlight_start":1,"highlight_end":34},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:541:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let chunk_object = JsFuture::from(reader.read())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .await\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"Read\".to_string())?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .dyn_into::<Object>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18996,"byte_end":18999,"line_start":545,"line_end":545,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:545:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18846,"byte_end":18940,"line_start":541,"line_end":543,"column_start":28,"column_end":46,"is_primary":true,"text":[{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":28,"highlight_end":57},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:541:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let chunk_object = JsFuture::from(reader.read())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .await\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"Read\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18916,"byte_end":18919,"line_start":543,"line_end":543,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:543:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"Read\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18920,"byte_end":18938,"line_start":543,"line_end":543,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18920,"byte_end":18938,"line_start":543,"line_end":543,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":"return \"Read\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:543:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"Read\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"Read\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":18920,"byte_end":18938,"line_start":543,"line_end":543,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":18920,"byte_end":18938,"line_start":543,"line_end":543,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":"\"Read\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:543:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"Read\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"Read\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19000,"byte_end":19040,"line_start":545,"line_end":545,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19000,"byte_end":19040,"line_start":545,"line_end":545,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"return \"issue casting Object entry\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:545:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"issue casting Object entry\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19000,"byte_end":19040,"line_start":545,"line_end":545,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19000,"byte_end":19040,"line_start":545,"line_end":545,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"\"issue casting Object entry\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:545:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"issue casting Object entry\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19064,"byte_end":19278,"line_start":547,"line_end":550,"column_start":20,"column_end":69,"is_primary":true,"text":[{"text":"        let done = reflect_get(&chunk_object, &JsValue::from_str(\"done\"))","highlight_start":20,"highlight_end":74},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68},{"text":"            .as_bool()","highlight_start":1,"highlight_end":23},{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:547:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let done = reflect_get(&chunk_object, &JsValue::from_str(\"done\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .as_bool()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .ok_or(\"this value will always be boolean\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|____________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19223,"byte_end":19277,"line_start":550,"line_end":550,"column_start":14,"column_end":68,"is_primary":true,"text":[{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":14,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19223,"byte_end":19277,"line_start":550,"line_end":550,"column_start":14,"column_end":68,"is_primary":true,"text":[{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":14,"highlight_end":68}],"label":null,"suggested_replacement":"ok_or_else(|| \"this value will always be boolean\".to_string())","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:550:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .ok_or(\"this value will always be boolean\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| \"this value will always be boolean\".to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19064,"byte_end":19186,"line_start":547,"line_end":548,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"        let done = reflect_get(&chunk_object, &JsValue::from_str(\"done\"))","highlight_start":20,"highlight_end":74},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:547:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let done = reflect_get(&chunk_object, &JsValue::from_str(\"done\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19140,"byte_end":19143,"line_start":548,"line_end":548,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:548:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19144,"byte_end":19184,"line_start":548,"line_end":548,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19144,"byte_end":19184,"line_start":548,"line_end":548,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"return \"issue casting Object entry\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:548:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"issue casting Object entry\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19144,"byte_end":19184,"line_start":548,"line_end":548,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19144,"byte_end":19184,"line_start":548,"line_end":548,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"\"issue casting Object entry\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:548:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"issue casting Object entry\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19229,"byte_end":19276,"line_start":550,"line_end":550,"column_start":20,"column_end":67,"is_primary":true,"text":[{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":20,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19229,"byte_end":19276,"line_start":550,"line_end":550,"column_start":20,"column_end":67,"is_primary":true,"text":[{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":20,"highlight_end":67}],"label":null,"suggested_replacement":"\"this value will always be boolean\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:550:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .ok_or(\"this value will always be boolean\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"this value will always be boolean\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19349,"byte_end":19571,"line_start":556,"line_end":559,"column_start":21,"column_end":61,"is_primary":true,"text":[{"text":"        let chunk = reflect_get(&chunk_object, &JsValue::from_str(\"value\"))","highlight_start":21,"highlight_end":76},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68},{"text":"            .dyn_into::<Uint8Array>()","highlight_start":1,"highlight_end":38},{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:556:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let chunk = reflect_get(&chunk_object, &JsValue::from_str(\"value\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .dyn_into::<Uint8Array>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"we're copying bytes\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|____________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19532,"byte_end":19535,"line_start":559,"line_end":559,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:559:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"we're copying bytes\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19349,"byte_end":19472,"line_start":556,"line_end":557,"column_start":21,"column_end":68,"is_primary":true,"text":[{"text":"        let chunk = reflect_get(&chunk_object, &JsValue::from_str(\"value\"))","highlight_start":21,"highlight_end":76},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:556:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let chunk = reflect_get(&chunk_object, &JsValue::from_str(\"value\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`map_err(|_|...` wildcard pattern discards the original error","code":{"code":"clippy::map_err_ignore","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19426,"byte_end":19429,"line_start":557,"line_end":557,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `map_err(|_|...` wildcard pattern discards the original error\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:557:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19430,"byte_end":19470,"line_start":557,"line_end":557,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19430,"byte_end":19470,"line_start":557,"line_end":557,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"return \"issue casting Object entry\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:557:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"issue casting Object entry\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19430,"byte_end":19470,"line_start":557,"line_end":557,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19430,"byte_end":19470,"line_start":557,"line_end":557,"column_start":26,"column_end":66,"is_primary":true,"text":[{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":26,"highlight_end":66}],"label":null,"suggested_replacement":"\"issue casting Object entry\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:557:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"issue casting Object entry\".to_string())?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"issue casting Object entry\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19536,"byte_end":19569,"line_start":559,"line_end":559,"column_start":26,"column_end":59,"is_primary":true,"text":[{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19536,"byte_end":19569,"line_start":559,"line_end":559,"column_start":26,"column_end":59,"is_primary":true,"text":[{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":"return \"we're copying bytes\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:559:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"we're copying bytes\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return \"we're copying bytes\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19536,"byte_end":19569,"line_start":559,"line_end":559,"column_start":26,"column_end":59,"is_primary":true,"text":[{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19536,"byte_end":19569,"line_start":559,"line_end":559,"column_start":26,"column_end":59,"is_primary":true,"text":[{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":"\"we're copying bytes\".to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:559:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|_| \"we're copying bytes\".to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `\"we're copying bytes\".to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arithmetic operation that can potentially result in unexpected side-effects","code":{"code":"clippy::arithmetic_side_effects","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19629,"byte_end":19663,"line_start":562,"line_end":562,"column_start":21,"column_end":55,"is_primary":true,"text":[{"text":"        buff.resize(buff_len + chunk.length() as usize, 0);","highlight_start":21,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: arithmetic operation that can potentially result in unexpected side-effects\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:562:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        buff.resize(buff_len + chunk.length() as usize, 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using a potentially dangerous silent `as` conversion","code":{"code":"clippy::as_conversions","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19640,"byte_end":19663,"line_start":562,"line_end":562,"column_start":32,"column_end":55,"is_primary":true,"text":[{"text":"        buff.resize(buff_len + chunk.length() as usize, 0);","highlight_start":32,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a safe wrapper for this conversion","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::as-conversions` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::as_conversions)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using a potentially dangerous silent `as` conversion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:562:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        buff.resize(buff_len + chunk.length() as usize, 0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a safe wrapper for this conversion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::as-conversions` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::as_conversions)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"slicing may panic","code":{"code":"clippy::indexing_slicing","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19696,"byte_end":19712,"line_start":563,"line_end":563,"column_start":28,"column_end":44,"is_primary":true,"text":[{"text":"        chunk.copy_to(&mut buff[buff_len..]);","highlight_start":28,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `.get(n..)` or .get_mut(n..)` instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::indexing-slicing` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::indexing_slicing)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: slicing may panic\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:563:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        chunk.copy_to(&mut buff[buff_len..]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using `.get(n..)` or .get_mut(n..)` instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::indexing-slicing` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::indexing_slicing)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19773,"byte_end":19875,"line_start":567,"line_end":567,"column_start":16,"column_end":118,"is_primary":true,"text":[{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":16,"highlight_end":118}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:567:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e)\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19818,"byte_end":19819,"line_start":567,"line_end":567,"column_start":61,"column_end":62,"is_primary":true,"text":[{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":61,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:567:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and en\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19821,"byte_end":19873,"line_start":567,"line_end":567,"column_start":64,"column_end":116,"is_primary":true,"text":[{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":64,"highlight_end":116}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":19867,"byte_end":19867,"line_start":567,"line_end":567,"column_start":110,"column_end":110,"is_primary":true,"text":[{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":110,"highlight_end":110}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":19869,"byte_end":19872,"line_start":567,"line_end":567,"column_start":112,"column_end":115,"is_primary":true,"text":[{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":112,"highlight_end":115}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:567:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m4(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e\u001b[0m\u001b[0m))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m}\"))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`buff` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":19766,"byte_end":19770,"line_start":567,"line_end":567,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":18785,"byte_end":18793,"line_start":539,"line_end":539,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let mut buff = Vec::new();","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `buff` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:567:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and en\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:539:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut buff = Vec::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"docs for function returning `Result` missing `# Errors` section","code":{"code":"clippy::missing_errors_doc","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20216,"byte_end":20279,"line_start":582,"line_end":582,"column_start":1,"column_end":64,"is_primary":true,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: docs for function returning `Result` missing `# Errors` section\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:582:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20157,"byte_end":20162,"line_start":580,"line_end":580,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20157,"byte_end":20162,"line_start":580,"line_end":580,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:580:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20155,"byte_end":20179,"line_start":580,"line_end":580,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:580:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a function","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20216,"byte_end":20572,"line_start":582,"line_end":588,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":1,"highlight_end":66},{"text":"    if arg.is_null() || arg.is_undefined() {","highlight_start":1,"highlight_end":45},{"text":"        return Err(JsError::new(\"The argument is null or undefined.\"));","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\", arg))","highlight_start":1,"highlight_end":165},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:582:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if arg.is_null() || arg.is_undefined() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return Err(JsError::new(\"The argument is null or undefined.\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument pa\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m588\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20216,"byte_end":20279,"line_start":582,"line_end":582,"column_start":1,"column_end":64,"is_primary":true,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":1,"highlight_end":64}],"label":"future returned by `test_wasm` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":20216,"byte_end":20279,"line_start":582,"line_end":582,"column_start":1,"column_end":64,"is_primary":false,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":20239,"byte_end":20242,"line_start":582,"line_end":582,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":24,"highlight_end":27}],"label":"has type `wasm_bindgen::JsValue` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":20239,"byte_end":20242,"line_start":582,"line_end":582,"column_start":24,"column_end":27,"is_primary":false,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:582:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `test_wasm` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:582:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `wasm_bindgen::JsValue` which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20413,"byte_end":20569,"line_start":587,"line_end":587,"column_start":8,"column_end":164,"is_primary":true,"text":[{"text":"    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\", arg))","highlight_start":8,"highlight_end":164}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20508,"byte_end":20508,"line_start":587,"line_end":587,"column_start":103,"column_end":103,"is_primary":true,"text":[{"text":"    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\", arg))","highlight_start":103,"highlight_end":103}],"label":null,"suggested_replacement":"arg","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":20563,"byte_end":20568,"line_start":587,"line_end":587,"column_start":158,"column_end":163,"is_primary":true,"text":[{"text":"    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\", arg))","highlight_start":158,"highlight_end":163}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:587:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mOk(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\", ar\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\"\u001b[0m\u001b[0m\u001b[38;5;9m, arg\u001b[0m\u001b[0m))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {\u001b[0m\u001b[0m\u001b[38;5;10marg\u001b[0m\u001b[0m:?}. To test promise rejection, call with no argument.\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20155,"byte_end":20179,"line_start":580,"line_end":580,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:580:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20649,"byte_end":20654,"line_start":591,"line_end":591,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20649,"byte_end":20654,"line_start":591,"line_end":591,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:591:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20647,"byte_end":20671,"line_start":591,"line_end":591,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:591:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a function","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20716,"byte_end":20918,"line_start":593,"line_end":601,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn persistence_check() -> i32 {","highlight_start":1,"highlight_end":42},{"text":"    let counter = COUNTER.with(|v| {","highlight_start":1,"highlight_end":37},{"text":"        v.set(v.get() + 1);","highlight_start":1,"highlight_end":28},{"text":"        v.get()","highlight_start":1,"highlight_end":16},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"WASM Counter: {}\", counter));","highlight_start":1,"highlight_end":57},{"text":"    counter","highlight_start":1,"highlight_end":12},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:593:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m593\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn persistence_check() -> i32 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let counter = COUNTER.with(|v| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.set(v.get() + 1);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m596\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.get()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    counter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20909,"byte_end":20916,"line_start":600,"line_end":600,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    counter","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20909,"byte_end":20916,"line_start":600,"line_end":600,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    counter","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"return counter","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:600:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    counter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return counter`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20831,"byte_end":20838,"line_start":596,"line_end":596,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        v.get()","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20831,"byte_end":20838,"line_start":596,"line_end":596,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        v.get()","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"return v.get()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:596:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m596\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.get()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return v.get()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"default numeric fallback might occur","code":{"code":"clippy::default_numeric_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20819,"byte_end":20820,"line_start":595,"line_end":595,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"        v.set(v.get() + 1);","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider adding suffix","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20819,"byte_end":20820,"line_start":595,"line_end":595,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"        v.set(v.get() + 1);","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":"1_i32","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: default numeric fallback might occur\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:595:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.set(v.get() + 1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider adding suffix: `1_i32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20790,"byte_end":20791,"line_start":594,"line_end":594,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"    let counter = COUNTER.with(|v| {","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:594:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let counter = COUNTER.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arithmetic operation that can potentially result in unexpected side-effects","code":{"code":"clippy::arithmetic_side_effects","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20809,"byte_end":20820,"line_start":595,"line_end":595,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"        v.set(v.get() + 1);","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: arithmetic operation that can potentially result in unexpected side-effects\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:595:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.set(v.get() + 1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20866,"byte_end":20902,"line_start":599,"line_end":599,"column_start":19,"column_end":55,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"WASM Counter: {}\", counter));","highlight_start":19,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":20890,"byte_end":20890,"line_start":599,"line_end":599,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"WASM Counter: {}\", counter));","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"counter","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":20892,"byte_end":20901,"line_start":599,"line_end":599,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"WASM Counter: {}\", counter));","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:599:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m599\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"WASM Counter: {}\", counter));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m599\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    console_log!(&format!(\"WASM Counter: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, counter\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m599\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    console_log!(&format!(\"WASM Counter: {\u001b[0m\u001b[0m\u001b[38;5;10mcounter\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20647,"byte_end":20671,"line_start":591,"line_end":591,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:591:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"docs for function returning `Result` missing `# Errors` section","code":{"code":"clippy::missing_errors_doc","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21776,"byte_end":21881,"line_start":623,"line_end":623,"column_start":1,"column_end":106,"is_primary":true,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":1,"highlight_end":106}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: docs for function returning `Result` missing `# Errors` section\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:623:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21706,"byte_end":21711,"line_start":621,"line_end":621,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":21706,"byte_end":21711,"line_start":621,"line_end":621,"column_start":3,"column_end":8,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":3,"highlight_end":8}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:621:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21704,"byte_end":21728,"line_start":621,"line_end":621,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:621:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a function","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21776,"byte_end":23022,"line_start":623,"line_end":653,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":1,"highlight_end":108},{"text":"    let init_config = InitConfig::new(init_config).await?;","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // populating the staticPaths static","highlight_start":1,"highlight_end":41},{"text":"    STATIC_PATHS.with(|v| {","highlight_start":1,"highlight_end":28},{"text":"        console_log!(&format!(\"Static paths: {:?}\", init_config.static_paths));","highlight_start":1,"highlight_end":80},{"text":"        v.replace(init_config.static_paths.clone());","highlight_start":1,"highlight_end":53},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let cache = INDEXED_DBS.with(|v| {","highlight_start":1,"highlight_end":39},{"text":"        let val = v.get(INDEXED_DB_CACHE).expect_throw(\"expected indexed db to be present; qed\");","highlight_start":1,"highlight_end":98},{"text":"        val.clone()","highlight_start":1,"highlight_end":20},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    clear_expired_cache(INDEXED_DB_CACHE, cache);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut providers = Vec::new();","highlight_start":1,"highlight_end":36},{"text":"    for provider in init_config.providers.iter() {","highlight_start":1,"highlight_end":51},{"text":"        console_log!(&format!(\"Establishing encrypted tunnel with provider: {}\", provider));","highlight_start":1,"highlight_end":93},{"text":"        init_tunnel(provider, &init_config.proxy).await.map_err(|e| {","highlight_start":1,"highlight_end":70},{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":1,"highlight_end":120},{"text":"            JsError::new(&e)","highlight_start":1,"highlight_end":29},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        providers.push(provider);","highlight_start":1,"highlight_end":34},{"text":"        console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":1,"highlight_end":92},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Encrypted tunnel established with providers: {:?}\", providers));","highlight_start":1,"highlight_end":92},{"text":"    Ok(())","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:623:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<()\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let init_config = InitConfig::new(init_config).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // populating the staticPaths static\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m652\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m653\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21776,"byte_end":21881,"line_start":623,"line_end":623,"column_start":1,"column_end":106,"is_primary":true,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":1,"highlight_end":106}],"label":"future returned by `init_encrypted_tunnel` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":21776,"byte_end":21881,"line_start":623,"line_end":623,"column_start":1,"column_end":106,"is_primary":false,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":1,"highlight_end":106}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":21811,"byte_end":21822,"line_start":623,"line_end":623,"column_start":36,"column_end":47,"is_primary":true,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":36,"highlight_end":47}],"label":"has type `js_sys::Object` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js.rs","byte_start":21811,"byte_end":21822,"line_start":623,"line_end":623,"column_start":36,"column_end":47,"is_primary":false,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":36,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as it awaits another future which is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js_glue/js_imports.rs","byte_start":892,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":60,"is_primary":true,"text":[{"text":"#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]","highlight_start":1,"highlight_end":60}],"label":"await occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js_glue/js_imports.rs","byte_start":892,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[wasm_bindgen]","def_site_span":{"file_name":"/home/ranv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasm-bindgen-macro-0.2.100/src/lib.rs","byte_start":294,"byte_end":367,"line_start":10,"line_end":10,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"pub fn wasm_bindgen(attr: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":3875,"byte_end":3880,"line_start":91,"line_end":91,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":59,"highlight_end":64}],"label":"await occurs here, with `entries.iter()` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":3875,"byte_end":3880,"line_start":91,"line_end":91,"column_start":59,"column_end":64,"is_primary":false,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/types.rs","byte_start":1611,"byte_end":1625,"line_start":43,"line_end":43,"column_start":22,"column_end":36,"is_primary":false,"text":[{"text":"        for entry in entries.iter() {","highlight_start":22,"highlight_end":36}],"label":"has type `js_sys::ArrayIter<'_>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":1611,"byte_end":1625,"line_start":43,"line_end":43,"column_start":22,"column_end":36,"is_primary":false,"text":[{"text":"        for entry in entries.iter() {","highlight_start":22,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:623:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `init_encrypted_tunnel` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:623:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `js_sys::Object` which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as it awaits another future which is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/js_imports.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:91:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for entry in entries.iter() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `js_sys::ArrayIter<'_>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let estimate = get_storage_estimate().await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `entries.iter()` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Sync`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21906,"byte_end":21941,"line_start":624,"line_end":624,"column_start":23,"column_end":58,"is_primary":true,"text":[{"text":"    let init_config = InitConfig::new(init_config).await?;","highlight_start":23,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:624:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let init_config = InitConfig::new(init_config).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`init_config` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21892,"byte_end":21903,"line_start":624,"line_end":624,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"    let init_config = InitConfig::new(init_config).await?;","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":21811,"byte_end":21822,"line_start":623,"line_end":623,"column_start":36,"column_end":47,"is_primary":true,"text":[{"text":"pub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), JsError> {","highlight_start":36,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `init_config` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:624:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let init_config = InitConfig::new(init_config).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:623:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn init_encrypted_tunnel(init_config: js_sys::Object, _: Option<String>) -> Result<(), \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22008,"byte_end":22009,"line_start":627,"line_end":627,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    STATIC_PATHS.with(|v| {","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:627:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    STATIC_PATHS.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22300,"byte_end":22311,"line_start":634,"line_end":634,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        val.clone()","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22300,"byte_end":22311,"line_start":634,"line_end":634,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        val.clone()","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":"return val.clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:634:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m634\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        val.clone()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22189,"byte_end":22190,"line_start":632,"line_end":632,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    let cache = INDEXED_DBS.with(|v| {","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:632:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cache = INDEXED_DBS.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"it is more concise to loop over references to containers instead of using explicit iteration methods","code":{"code":"clippy::explicit_iter_loop","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22428,"byte_end":22456,"line_start":640,"line_end":640,"column_start":21,"column_end":49,"is_primary":true,"text":[{"text":"    for provider in init_config.providers.iter() {","highlight_start":21,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to write this more concisely, try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22428,"byte_end":22456,"line_start":640,"line_end":640,"column_start":21,"column_end":49,"is_primary":true,"text":[{"text":"    for provider in init_config.providers.iter() {","highlight_start":21,"highlight_end":49}],"label":null,"suggested_replacement":"&init_config.providers","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: it is more concise to loop over references to containers instead of using explicit iteration methods\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:640:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for provider in init_config.providers.iter() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to write this more concisely, try: `&init_config.providers`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22481,"byte_end":22549,"line_start":641,"line_end":641,"column_start":23,"column_end":91,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Establishing encrypted tunnel with provider: {}\", provider));","highlight_start":23,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22536,"byte_end":22536,"line_start":641,"line_end":641,"column_start":78,"column_end":78,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Establishing encrypted tunnel with provider: {}\", provider));","highlight_start":78,"highlight_end":78}],"label":null,"suggested_replacement":"provider","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":22538,"byte_end":22548,"line_start":641,"line_end":641,"column_start":80,"column_end":90,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Establishing encrypted tunnel with provider: {}\", provider));","highlight_start":80,"highlight_end":90}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:641:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\"Establishing encrypted tunnel with provider: {}\", provider));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        console_log!(&format!(\"Establishing encrypted tunnel with provider: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, provider\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        console_log!(&format!(\"Establishing encrypted tunnel with provider: {\u001b[0m\u001b[0m\u001b[38;5;10mprovider\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22560,"byte_end":22782,"line_start":642,"line_end":645,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        init_tunnel(provider, &init_config.proxy).await.map_err(|e| {","highlight_start":9,"highlight_end":70},{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":1,"highlight_end":120},{"text":"            JsError::new(&e)","highlight_start":1,"highlight_end":29},{"text":"        })?;","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:642:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   init_tunnel(provider, &init_config.proxy).await.map_err(|e| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Erro\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       JsError::new(&e)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22754,"byte_end":22770,"line_start":644,"line_end":644,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"            JsError::new(&e)","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22754,"byte_end":22770,"line_start":644,"line_end":644,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"            JsError::new(&e)","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":"return JsError::new(&e)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:644:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsError::new(&e)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsError::new(&e)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22617,"byte_end":22618,"line_start":642,"line_end":642,"column_start":66,"column_end":67,"is_primary":true,"text":[{"text":"        init_tunnel(provider, &init_config.proxy).await.map_err(|e| {","highlight_start":66,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:642:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        init_tunnel(provider, &init_config.proxy).await.map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22650,"byte_end":22739,"line_start":643,"line_end":643,"column_start":29,"column_end":118,"is_primary":true,"text":[{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":29,"highlight_end":118}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22712,"byte_end":22712,"line_start":643,"line_end":643,"column_start":91,"column_end":91,"is_primary":true,"text":[{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":91,"highlight_end":91}],"label":null,"suggested_replacement":"provider","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":22723,"byte_end":22723,"line_start":643,"line_end":643,"column_start":102,"column_end":102,"is_primary":true,"text":[{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":102,"highlight_end":102}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":22725,"byte_end":22735,"line_start":643,"line_end":643,"column_start":104,"column_end":114,"is_primary":true,"text":[{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":104,"highlight_end":114}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":22735,"byte_end":22738,"line_start":643,"line_end":643,"column_start":114,"column_end":117,"is_primary":true,"text":[{"text":"            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));","highlight_start":114,"highlight_end":117}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:643:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\", provider, e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {}. Error: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, provider, e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            console_error!(&format!(\"Failed to establish encrypted tunnel with provider: {\u001b[0m\u001b[0m\u001b[38;5;10mprovider\u001b[0m\u001b[0m}. Error: {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22841,"byte_end":22908,"line_start":648,"line_end":648,"column_start":23,"column_end":90,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":23,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22895,"byte_end":22895,"line_start":648,"line_end":648,"column_start":77,"column_end":77,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":77,"highlight_end":77}],"label":null,"suggested_replacement":"provider","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":22897,"byte_end":22907,"line_start":648,"line_end":648,"column_start":79,"column_end":89,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":79,"highlight_end":89}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:648:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        console_log!(&format!(\"Encrypted tunnel established with provider: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, provider\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        console_log!(&format!(\"Encrypted tunnel established with provider: {\u001b[0m\u001b[0m\u001b[38;5;10mprovider\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":22936,"byte_end":23007,"line_start":651,"line_end":651,"column_start":19,"column_end":90,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Encrypted tunnel established with providers: {:?}\", providers));","highlight_start":19,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":22991,"byte_end":22991,"line_start":651,"line_end":651,"column_start":74,"column_end":74,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Encrypted tunnel established with providers: {:?}\", providers));","highlight_start":74,"highlight_end":74}],"label":null,"suggested_replacement":"providers","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":22995,"byte_end":23006,"line_start":651,"line_end":651,"column_start":78,"column_end":89,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Encrypted tunnel established with providers: {:?}\", providers));","highlight_start":78,"highlight_end":89}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:651:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m651\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"Encrypted tunnel established with providers: {:?}\", providers));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m651\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    console_log!(&format!(\"Encrypted tunnel established with providers: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, providers\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m651\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    console_log!(&format!(\"Encrypted tunnel established with providers: {\u001b[0m\u001b[0m\u001b[38;5;10mproviders\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":21704,"byte_end":21728,"line_start":621,"line_end":621,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[allow(non_snake_case)]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:621:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[allow(non_snake_case)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23024,"byte_end":25730,"line_start":655,"line_end":738,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn init_tunnel(provider: &str, proxy: &str) -> Result<(), String> {","highlight_start":1,"highlight_end":74},{"text":"    let _provider_url = rebuild_url(provider);","highlight_start":1,"highlight_end":47},{"text":"    let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(crypto::KeyUse::Ecdh)?;","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    PRIVATE_JWK_ECDH.with(|v| {","highlight_start":1,"highlight_end":32},{"text":"        v.set(Some(private_jwk_ecdh.clone()));","highlight_start":1,"highlight_end":47},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let b64_pub_jwk = pub_jwk_ecdh.export_as_base64();","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let proxy = format!(\"{proxy}/init-tunnel?backend={provider}\");","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res = reqwest::Client::new()","highlight_start":1,"highlight_end":37},{"text":"        .post(&proxy)","highlight_start":1,"highlight_end":22},{"text":"        // .body(b64_pub_jwk.clone())","highlight_start":1,"highlight_end":38},{"text":"        .headers({","highlight_start":1,"highlight_end":19},{"text":"            let mut headers = reqwest::header::HeaderMap::new();","highlight_start":1,"highlight_end":65},{"text":"            let uuid = Uuid::new_v4().to_string();","highlight_start":1,"highlight_end":51},{"text":"            UUID.set(uuid.clone());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            headers.insert(\"x-ecdh-init\", HeaderValue::from_str(&b64_pub_jwk).unwrap());","highlight_start":1,"highlight_end":89},{"text":"            headers.insert(\"x-client-uuid\", HeaderValue::from_str(&uuid).unwrap());","highlight_start":1,"highlight_end":84},{"text":"            headers","highlight_start":1,"highlight_end":20},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"        .send()","highlight_start":1,"highlight_end":16},{"text":"        .await","highlight_start":1,"highlight_end":15},{"text":"        .map_err(|e| {","highlight_start":1,"highlight_end":23},{"text":"            console_log!(&format!(\"Failed to send request: {}\", e));","highlight_start":1,"highlight_end":69},{"text":"            e.to_string()","highlight_start":1,"highlight_end":26},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if res.status().eq(&401) {","highlight_start":1,"highlight_end":31},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(false);","highlight_start":1,"highlight_end":42},{"text":"        return Err(String::from(\"401 response from proxy, user is not authorized.\"));","highlight_start":1,"highlight_end":86},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res_bytes = res.bytes().await.map_err(|e| {","highlight_start":1,"highlight_end":52},{"text":"        console_log!(&format!(\"Failed to read response: {}\", e));","highlight_start":1,"highlight_end":66},{"text":"        e.to_string()","highlight_start":1,"highlight_end":22},{"text":"    })?;","highlight_start":1,"highlight_end":9},{"text":"    let mut proxy_data: serde_json::Map<String, serde_json::Value> = serde_json::from_slice(res_bytes.as_ref()).map_err(|val| {","highlight_start":1,"highlight_end":128},{"text":"        console_log!(&format!(","highlight_start":1,"highlight_end":31},{"text":"            \"Failed to decode response: {}, Data is :{}\",","highlight_start":1,"highlight_end":58},{"text":"            val,","highlight_start":1,"highlight_end":17},{"text":"            String::from_utf8_lossy(res_bytes.as_ref())","highlight_start":1,"highlight_end":56},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        val.to_string()","highlight_start":1,"highlight_end":24},{"text":"    })?;","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    UP_JWT.set(","highlight_start":1,"highlight_end":16},{"text":"        proxy_data","highlight_start":1,"highlight_end":19},{"text":"            .remove(\"up-JWT\")","highlight_start":1,"highlight_end":30},{"text":"            .ok_or(\"up_jwt not found\")?","highlight_start":1,"highlight_end":40},{"text":"            .as_str()","highlight_start":1,"highlight_end":22},{"text":"            .unwrap() // infalliable","highlight_start":1,"highlight_end":37},{"text":"            .to_string(),","highlight_start":1,"highlight_end":26},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    USER_SYMMETRIC_KEY.set(Some(private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?));","highlight_start":1,"highlight_end":104},{"text":"    ENCRYPTED_TUNNEL_FLAG.set(true);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let url_proxy_ = &format!(","highlight_start":1,"highlight_end":31},{"text":"        \"{}://{}:{}\",","highlight_start":1,"highlight_end":22},{"text":"        proxy_url.scheme(),","highlight_start":1,"highlight_end":28},{"text":"        proxy_url.host().expect_throw(\"expected host to be present; qed\"),","highlight_start":1,"highlight_end":75},{"text":"        proxy_url.port().unwrap_or(443)","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let provider_client = new_client(url_proxy_).map_err(|e| {","highlight_start":1,"highlight_end":63},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(false);","highlight_start":1,"highlight_end":42},{"text":"        e.to_string()","highlight_start":1,"highlight_end":22},{"text":"    })?;","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    L8_CLIENTS.with(|v| {","highlight_start":1,"highlight_end":26},{"text":"        let mut map = v.take();","highlight_start":1,"highlight_end":32},{"text":"        map.insert(provider.to_string(), provider_client);","highlight_start":1,"highlight_end":59},{"text":"        v.replace(map);","highlight_start":1,"highlight_end":24},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":1,"highlight_end":88},{"text":"    Ok(())","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:655:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn init_tunnel(provider: &str, proxy: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m656\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let _provider_url = rebuild_url(provider);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m657\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(crypto::KeyUse::Ecdh)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23188,"byte_end":23228,"line_start":657,"line_end":657,"column_start":44,"column_end":84,"is_primary":true,"text":[{"text":"    let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(crypto::KeyUse::Ecdh)?;","highlight_start":44,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:657:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m657\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(crypto::KeyUse::Ecdh)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23258,"byte_end":23259,"line_start":659,"line_end":659,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"    PRIVATE_JWK_ECDH.with(|v| {","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:659:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PRIVATE_JWK_ECDH.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`proxy` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23383,"byte_end":23388,"line_start":665,"line_end":665,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    let proxy = format!(\"{proxy}/init-tunnel?backend={provider}\");","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":23061,"byte_end":23066,"line_start":655,"line_end":655,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"async fn init_tunnel(provider: &str, proxy: &str) -> Result<(), String> {","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `proxy` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:665:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m665\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let proxy = format!(\"{proxy}/init-tunnel?backend={provider}\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:655:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn init_tunnel(provider: &str, proxy: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23457,"byte_end":24076,"line_start":667,"line_end":684,"column_start":15,"column_end":12,"is_primary":true,"text":[{"text":"    let res = reqwest::Client::new()","highlight_start":15,"highlight_end":37},{"text":"        .post(&proxy)","highlight_start":1,"highlight_end":22},{"text":"        // .body(b64_pub_jwk.clone())","highlight_start":1,"highlight_end":38},{"text":"        .headers({","highlight_start":1,"highlight_end":19},{"text":"            let mut headers = reqwest::header::HeaderMap::new();","highlight_start":1,"highlight_end":65},{"text":"            let uuid = Uuid::new_v4().to_string();","highlight_start":1,"highlight_end":51},{"text":"            UUID.set(uuid.clone());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            headers.insert(\"x-ecdh-init\", HeaderValue::from_str(&b64_pub_jwk).unwrap());","highlight_start":1,"highlight_end":89},{"text":"            headers.insert(\"x-client-uuid\", HeaderValue::from_str(&uuid).unwrap());","highlight_start":1,"highlight_end":84},{"text":"            headers","highlight_start":1,"highlight_end":20},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"        .send()","highlight_start":1,"highlight_end":16},{"text":"        .await","highlight_start":1,"highlight_end":15},{"text":"        .map_err(|e| {","highlight_start":1,"highlight_end":23},{"text":"            console_log!(&format!(\"Failed to send request: {}\", e));","highlight_start":1,"highlight_end":69},{"text":"            e.to_string()","highlight_start":1,"highlight_end":26},{"text":"        })?;","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:667:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let res = reqwest::Client::new()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .post(&proxy)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // .body(b64_pub_jwk.clone())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .headers({\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m683\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            e.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider bringing this path into scope with the `use` keyword","code":{"code":"clippy::absolute_paths","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23589,"byte_end":23615,"line_start":671,"line_end":671,"column_start":31,"column_end":57,"is_primary":true,"text":[{"text":"            let mut headers = reqwest::header::HeaderMap::new();","highlight_start":31,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider bringing this path into scope with the `use` keyword\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:671:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut headers = reqwest::header::HeaderMap::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23754,"byte_end":23798,"line_start":675,"line_end":675,"column_start":43,"column_end":87,"is_primary":true,"text":[{"text":"            headers.insert(\"x-ecdh-init\", HeaderValue::from_str(&b64_pub_jwk).unwrap());","highlight_start":43,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:675:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            headers.insert(\"x-ecdh-init\", HeaderValue::from_str(&b64_pub_jwk).unwrap());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23845,"byte_end":23882,"line_start":676,"line_end":676,"column_start":45,"column_end":82,"is_primary":true,"text":[{"text":"            headers.insert(\"x-client-uuid\", HeaderValue::from_str(&uuid).unwrap());","highlight_start":45,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:676:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m676\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            headers.insert(\"x-client-uuid\", HeaderValue::from_str(&uuid).unwrap());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24051,"byte_end":24064,"line_start":683,"line_end":683,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"            e.to_string()","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":24051,"byte_end":24064,"line_start":683,"line_end":683,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"            e.to_string()","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"return e.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:683:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m683\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            e.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return e.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23965,"byte_end":23966,"line_start":681,"line_end":681,"column_start":19,"column_end":20,"is_primary":true,"text":[{"text":"        .map_err(|e| {","highlight_start":19,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:681:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23996,"byte_end":24036,"line_start":682,"line_end":682,"column_start":27,"column_end":67,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to send request: {}\", e));","highlight_start":27,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":24030,"byte_end":24030,"line_start":682,"line_end":682,"column_start":61,"column_end":61,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to send request: {}\", e));","highlight_start":61,"highlight_end":61}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":24032,"byte_end":24035,"line_start":682,"line_end":682,"column_start":63,"column_end":66,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to send request: {}\", e));","highlight_start":63,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:682:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to send request: {}\", e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to send request: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to send request: {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24265,"byte_end":24392,"line_start":691,"line_end":694,"column_start":21,"column_end":8,"is_primary":true,"text":[{"text":"    let res_bytes = res.bytes().await.map_err(|e| {","highlight_start":21,"highlight_end":52},{"text":"        console_log!(&format!(\"Failed to read response: {}\", e));","highlight_start":1,"highlight_end":66},{"text":"        e.to_string()","highlight_start":1,"highlight_end":22},{"text":"    })?;","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:691:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let res_bytes = res.bytes().await.map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\"Failed to read response: {}\", e));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24371,"byte_end":24384,"line_start":693,"line_end":693,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":24371,"byte_end":24384,"line_start":693,"line_end":693,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":"return e.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:693:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return e.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24292,"byte_end":24293,"line_start":691,"line_end":691,"column_start":48,"column_end":49,"is_primary":true,"text":[{"text":"    let res_bytes = res.bytes().await.map_err(|e| {","highlight_start":48,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:691:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let res_bytes = res.bytes().await.map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24319,"byte_end":24360,"line_start":692,"line_end":692,"column_start":23,"column_end":64,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Failed to read response: {}\", e));","highlight_start":23,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":24354,"byte_end":24354,"line_start":692,"line_end":692,"column_start":58,"column_end":58,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Failed to read response: {}\", e));","highlight_start":58,"highlight_end":58}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":24356,"byte_end":24359,"line_start":692,"line_end":692,"column_start":60,"column_end":63,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Failed to read response: {}\", e));","highlight_start":60,"highlight_end":63}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:692:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\"Failed to read response: {}\", e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        console_log!(&format!(\"Failed to read response: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        console_log!(&format!(\"Failed to read response: {\u001b[0m\u001b[0m\u001b[38;5;10me\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24463,"byte_end":24727,"line_start":695,"line_end":702,"column_start":70,"column_end":8,"is_primary":true,"text":[{"text":"    let mut proxy_data: serde_json::Map<String, serde_json::Value> = serde_json::from_slice(res_bytes.as_ref()).map_err(|val| {","highlight_start":70,"highlight_end":128},{"text":"        console_log!(&format!(","highlight_start":1,"highlight_end":31},{"text":"            \"Failed to decode response: {}, Data is :{}\",","highlight_start":1,"highlight_end":58},{"text":"            val,","highlight_start":1,"highlight_end":17},{"text":"            String::from_utf8_lossy(res_bytes.as_ref())","highlight_start":1,"highlight_end":56},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        val.to_string()","highlight_start":1,"highlight_end":24},{"text":"    })?;","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:695:70\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let mut proxy_data: serde_json::Map<String, serde_json::Value> = serde_json::from_slice(res\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m697\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"Failed to decode response: {}, Data is :{}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m698\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            val,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m701\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        val.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m702\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24704,"byte_end":24719,"line_start":701,"line_end":701,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        val.to_string()","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":24704,"byte_end":24719,"line_start":701,"line_end":701,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        val.to_string()","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":"return val.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:701:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m701\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        val.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24754,"byte_end":24918,"line_start":705,"line_end":710,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        proxy_data","highlight_start":9,"highlight_end":19},{"text":"            .remove(\"up-JWT\")","highlight_start":1,"highlight_end":30},{"text":"            .ok_or(\"up_jwt not found\")?","highlight_start":1,"highlight_end":40},{"text":"            .as_str()","highlight_start":1,"highlight_end":22},{"text":"            .unwrap() // infalliable","highlight_start":1,"highlight_end":37},{"text":"            .to_string(),","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":24754,"byte_end":24918,"line_start":705,"line_end":710,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        proxy_data","highlight_start":9,"highlight_end":19},{"text":"            .remove(\"up-JWT\")","highlight_start":1,"highlight_end":30},{"text":"            .ok_or(\"up_jwt not found\")?","highlight_start":1,"highlight_end":40},{"text":"            .as_str()","highlight_start":1,"highlight_end":22},{"text":"            .unwrap() // infalliable","highlight_start":1,"highlight_end":37},{"text":"            .to_string(),","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"proxy_data\n            .remove(\"up-JWT\")\n            .ok_or(\"up_jwt not found\")?\n            .as_str()\n            .unwrap().to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:705:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m705\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        proxy_data\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .remove(\"up-JWT\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .ok_or(\"up_jwt not found\")?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .as_str()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m709\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap() // infalliable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m710\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m705\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mproxy_data\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .remove(\"up-JWT\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .ok_or(\"up_jwt not found\")?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .as_str()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m709\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~             .unwrap().to_owned()\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24754,"byte_end":24878,"line_start":705,"line_end":709,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        proxy_data","highlight_start":9,"highlight_end":19},{"text":"            .remove(\"up-JWT\")","highlight_start":1,"highlight_end":30},{"text":"            .ok_or(\"up_jwt not found\")?","highlight_start":1,"highlight_end":40},{"text":"            .as_str()","highlight_start":1,"highlight_end":22},{"text":"            .unwrap() // infalliable","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:705:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m705\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        proxy_data\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .remove(\"up-JWT\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .ok_or(\"up_jwt not found\")?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .as_str()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m709\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap() // infalliable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24754,"byte_end":24834,"line_start":705,"line_end":707,"column_start":9,"column_end":40,"is_primary":true,"text":[{"text":"        proxy_data","highlight_start":9,"highlight_end":19},{"text":"            .remove(\"up-JWT\")","highlight_start":1,"highlight_end":30},{"text":"            .ok_or(\"up_jwt not found\")?","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:705:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m705\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        proxy_data\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .remove(\"up-JWT\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .ok_or(\"up_jwt not found\")?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":24960,"byte_end":25028,"line_start":713,"line_end":713,"column_start":33,"column_end":101,"is_primary":true,"text":[{"text":"    USER_SYMMETRIC_KEY.set(Some(private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?));","highlight_start":33,"highlight_end":101}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:713:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mKEY.set(Some(private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25001,"byte_end":25026,"line_start":713,"line_end":713,"column_start":74,"column_end":99,"is_primary":true,"text":[{"text":"    USER_SYMMETRIC_KEY.set(Some(private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?));","highlight_start":74,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:713:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25090,"byte_end":25136,"line_start":716,"line_end":716,"column_start":21,"column_end":67,"is_primary":true,"text":[{"text":"    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;","highlight_start":21,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:716:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25121,"byte_end":25134,"line_start":716,"line_end":716,"column_start":52,"column_end":65,"is_primary":true,"text":[{"text":"    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;","highlight_start":52,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25121,"byte_end":25134,"line_start":716,"line_end":716,"column_start":52,"column_end":65,"is_primary":true,"text":[{"text":"    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;","highlight_start":52,"highlight_end":65}],"label":null,"suggested_replacement":"return e.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:716:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return e.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25118,"byte_end":25119,"line_start":716,"line_end":716,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:716:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25369,"byte_end":25477,"line_start":725,"line_end":728,"column_start":27,"column_end":8,"is_primary":true,"text":[{"text":"    let provider_client = new_client(url_proxy_).map_err(|e| {","highlight_start":27,"highlight_end":63},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(false);","highlight_start":1,"highlight_end":42},{"text":"        e.to_string()","highlight_start":1,"highlight_end":22},{"text":"    })?;","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:725:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m725\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let provider_client = new_client(url_proxy_).map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m___________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m726\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ENCRYPTED_TUNNEL_FLAG.set(false);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m728\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25456,"byte_end":25469,"line_start":727,"line_end":727,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25456,"byte_end":25469,"line_start":727,"line_end":727,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":"return e.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:727:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return e.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant clone","code":{"code":"clippy::redundant_clone","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25457,"byte_end":25469,"line_start":727,"line_end":727,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":10,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this value is dropped without further use","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":25456,"byte_end":25457,"line_start":727,"line_end":727,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25457,"byte_end":25469,"line_start":727,"line_end":727,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":10,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant clone\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:727:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: this value is dropped without further use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:727:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25401,"byte_end":25402,"line_start":725,"line_end":725,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"    let provider_client = new_client(url_proxy_).map_err(|e| {","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:725:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m725\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let provider_client = new_client(url_proxy_).map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `String`","code":{"code":"clippy::string_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25456,"byte_end":25469,"line_start":727,"line_end":727,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        e.to_string()","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `.clone()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:727:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        e.to_string()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using `.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25501,"byte_end":25502,"line_start":730,"line_end":730,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"    L8_CLIENTS.with(|v| {","highlight_start":22,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:730:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    L8_CLIENTS.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25557,"byte_end":25577,"line_start":732,"line_end":732,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        map.insert(provider.to_string(), provider_client);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25557,"byte_end":25577,"line_start":732,"line_end":732,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        map.insert(provider.to_string(), provider_client);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":"provider.to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:732:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map.insert(provider.to_string(), provider_client);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `provider.to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25648,"byte_end":25715,"line_start":736,"line_end":736,"column_start":19,"column_end":86,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":19,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25702,"byte_end":25702,"line_start":736,"line_end":736,"column_start":73,"column_end":73,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":73,"highlight_end":73}],"label":null,"suggested_replacement":"provider","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":25704,"byte_end":25714,"line_start":736,"line_end":736,"column_start":75,"column_end":85,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":75,"highlight_end":85}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:736:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    console_log!(&format!(\"Encrypted tunnel established with provider: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, provider\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    console_log!(&format!(\"Encrypted tunnel established with provider: {\u001b[0m\u001b[0m\u001b[38;5;10mprovider\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25732,"byte_end":26171,"line_start":740,"line_end":749,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub(crate) fn rebuild_url(url: &str) -> String {","highlight_start":1,"highlight_end":49},{"text":"    console_log!(&format!(\"Rebuilding URL: `{}`\", url));","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let url = url::Url::parse(url).expect_throw(\"expected provider to be a valid URL; qed\");","highlight_start":1,"highlight_end":93},{"text":"    let rebuilt_url = format!(\"{}://{}\", url.scheme(), url.host_str().expect_throw(\"expected host to be present; qed\"));","highlight_start":1,"highlight_end":121},{"text":"    match url.port() {","highlight_start":1,"highlight_end":23},{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":1,"highlight_end":59},{"text":"        None => rebuilt_url,","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:740:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) fn rebuild_url(url: &str) -> String {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"Rebuilding URL: `{}`\", url));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m742\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let url = url::Url::parse(url).expect_throw(\"expected provider to be a valid URL; qed\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":26098,"byte_end":26133,"line_start":746,"line_end":746,"column_start":23,"column_end":58,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":23,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":26098,"byte_end":26133,"line_start":746,"line_end":746,"column_start":23,"column_end":58,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":23,"highlight_end":58}],"label":null,"suggested_replacement":"return format!(\"{}:{}\", rebuilt_url, port)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:746:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Some(port) => format!(\"{}:{}\", rebuilt_url, port),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return format!(\"{}:{}\", rebuilt_url, port)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":26151,"byte_end":26162,"line_start":747,"line_end":747,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        None => rebuilt_url,","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":26151,"byte_end":26162,"line_start":747,"line_end":747,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        None => rebuilt_url,","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"return rebuilt_url","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:747:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m747\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        None => rebuilt_url,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return rebuilt_url`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25799,"byte_end":25835,"line_start":741,"line_end":741,"column_start":19,"column_end":55,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Rebuilding URL: `{}`\", url));","highlight_start":19,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":25826,"byte_end":25826,"line_start":741,"line_end":741,"column_start":46,"column_end":46,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Rebuilding URL: `{}`\", url));","highlight_start":46,"highlight_end":46}],"label":null,"suggested_replacement":"url","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":25829,"byte_end":25834,"line_start":741,"line_end":741,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    console_log!(&format!(\"Rebuilding URL: `{}`\", url));","highlight_start":49,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:741:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    console_log!(&format!(\"Rebuilding URL: `{}`\", url));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    console_log!(&format!(\"Rebuilding URL: `{}`\"\u001b[0m\u001b[0m\u001b[38;5;9m, url\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    console_log!(&format!(\"Rebuilding URL: `{\u001b[0m\u001b[0m\u001b[38;5;10murl\u001b[0m\u001b[0m}`\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`url` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":25847,"byte_end":25850,"line_start":743,"line_end":743,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let url = url::Url::parse(url).expect_throw(\"expected provider to be a valid URL; qed\");","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":25758,"byte_end":25761,"line_start":740,"line_end":740,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"pub(crate) fn rebuild_url(url: &str) -> String {","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `url` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:743:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let url = url::Url::parse(url).expect_throw(\"expected provider to be a valid URL; qed\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:740:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) fn rebuild_url(url: &str) -> String {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":26098,"byte_end":26133,"line_start":746,"line_end":746,"column_start":23,"column_end":58,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":23,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/js.rs","byte_start":26108,"byte_end":26108,"line_start":746,"line_end":746,"column_start":33,"column_end":33,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":33,"highlight_end":33}],"label":null,"suggested_replacement":"rebuilt_url","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":26111,"byte_end":26111,"line_start":746,"line_end":746,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"port","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":26113,"byte_end":26126,"line_start":746,"line_end":746,"column_start":38,"column_end":51,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":38,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/js.rs","byte_start":26126,"byte_end":26132,"line_start":746,"line_end":746,"column_start":51,"column_end":57,"is_primary":true,"text":[{"text":"        Some(port) => format!(\"{}:{}\", rebuilt_url, port),","highlight_start":51,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:746:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Some(port) => format!(\"{}:{}\", rebuilt_url, port),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        Some(port) => format!(\"{}:{}\"\u001b[0m\u001b[0m\u001b[38;5;9m, rebuilt_url, port\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        Some(port) => format!(\"{\u001b[0m\u001b[0m\u001b[38;5;10mrebuilt_url\u001b[0m\u001b[0m}:{\u001b[0m\u001b[0m\u001b[38;5;10mport\u001b[0m\u001b[0m}\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used import from `std` instead of `core`","code":{"code":"clippy::std_instead_of_core","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":155,"byte_end":158,"line_start":4,"line_end":4,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::{cell::RefCell, collections::HashMap};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing the item from `core`","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":155,"byte_end":158,"line_start":4,"line_end":4,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::{cell::RefCell, collections::HashMap};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"core","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used import from `std` instead of `core`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{cell::RefCell, collections::HashMap};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider importing the item from `core`: `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"exported structs should not be exhaustive","code":{"code":"clippy::exhaustive_structs","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":979,"byte_end":1113,"line_start":28,"line_end":33,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct InitConfig {","highlight_start":1,"highlight_end":24},{"text":"    pub url: String,","highlight_start":1,"highlight_end":21},{"text":"    pub proxy: String,","highlight_start":1,"highlight_end":23},{"text":"    pub reconnect: bool,","highlight_start":1,"highlight_end":25},{"text":"    pub protocols: Option<Vec<String>>,","highlight_start":1,"highlight_end":40},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::exhaustive-structs` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::exhaustive_structs)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding #[non_exhaustive]","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":979,"byte_end":979,"line_start":28,"line_end":28,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct InitConfig {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[non_exhaustive]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: exported structs should not be exhaustive\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct InitConfig {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub url: String,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub proxy: String,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub reconnect: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub protocols: Option<Vec<String>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::exhaustive-structs` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::exhaustive_structs)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try adding #[non_exhaustive]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[non_exhaustive]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct InitConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `#[inline]` for a method","code":{"code":"clippy::missing_inline_in_public_items","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1149,"byte_end":1332,"line_start":36,"line_end":43,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn default() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        InitConfig {","highlight_start":1,"highlight_end":21},{"text":"            url: String::new(),","highlight_start":1,"highlight_end":32},{"text":"            proxy: String::new(),","highlight_start":1,"highlight_end":34},{"text":"            reconnect: true,","highlight_start":1,"highlight_end":29},{"text":"            protocols: None,","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `#[inline]` for a method\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:36:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InitConfig {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            url: String::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            proxy: String::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1180,"byte_end":1326,"line_start":37,"line_end":42,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        InitConfig {","highlight_start":9,"highlight_end":21},{"text":"            url: String::new(),","highlight_start":1,"highlight_end":32},{"text":"            proxy: String::new(),","highlight_start":1,"highlight_end":34},{"text":"            reconnect: true,","highlight_start":1,"highlight_end":29},{"text":"            protocols: None,","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":1180,"byte_end":1326,"line_start":37,"line_end":42,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        InitConfig {","highlight_start":9,"highlight_end":21},{"text":"            url: String::new(),","highlight_start":1,"highlight_end":32},{"text":"            proxy: String::new(),","highlight_start":1,"highlight_end":34},{"text":"            reconnect: true,","highlight_start":1,"highlight_end":29},{"text":"            protocols: None,","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"return InitConfig {\n            url: String::new(),\n            proxy: String::new(),\n            reconnect: true,\n            protocols: None,\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:37:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InitConfig {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            url: String::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            proxy: String::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            reconnect: true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            protocols: None,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn InitConfig {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             url: String::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             proxy: String::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             reconnect: true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             protocols: None,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary structure name repetition","code":{"code":"clippy::use_self","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1180,"byte_end":1190,"line_start":37,"line_end":37,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        InitConfig {","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::use-self` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::use_self)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the applicable keyword","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":1180,"byte_end":1190,"line_start":37,"line_end":37,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        InitConfig {","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary structure name repetition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:37:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InitConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use the applicable keyword: `Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::use-self` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::use_self)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for an associated function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1358,"byte_end":3904,"line_start":47,"line_end":102,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":5,"highlight_end":59},{"text":"        let mut init_config = InitConfig::default();","highlight_start":1,"highlight_end":53},{"text":"        let entries = object_entries(&obj);","highlight_start":1,"highlight_end":44},{"text":"        for entry in entries.iter() {","highlight_start":1,"highlight_end":38},{"text":"            let val = js_sys::Array::from(&entry); // [key, value] result from Object.entries","highlight_start":1,"highlight_end":94},{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":1,"highlight_end":111},{"text":"                \"url\" => {","highlight_start":1,"highlight_end":27},{"text":"                    init_config.url = val","highlight_start":1,"highlight_end":42},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;","highlight_start":1,"highlight_end":97},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"proxy\" => {","highlight_start":1,"highlight_end":29},{"text":"                    init_config.proxy = val","highlight_start":1,"highlight_end":44},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":1,"highlight_end":99},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"protocols\" => {","highlight_start":1,"highlight_end":33},{"text":"                    if val.get(1).is_instance_of::<js_sys::Array>() {","highlight_start":1,"highlight_end":70},{"text":"                        let protocols = js_sys::Array::from(&val.get(1));","highlight_start":1,"highlight_end":74},{"text":"                        let mut protocol_list = Vec::new();","highlight_start":1,"highlight_end":60},{"text":"                        for protocol in protocols.iter() {","highlight_start":1,"highlight_end":59},{"text":"                            protocol_list.push(","highlight_start":1,"highlight_end":48},{"text":"                                protocol","highlight_start":1,"highlight_end":41},{"text":"                                    .as_string()","highlight_start":1,"highlight_end":49},{"text":"                                    .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,","highlight_start":1,"highlight_end":115},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        init_config.protocols = Some(protocol_list);","highlight_start":1,"highlight_end":69},{"text":"                    } else if val.get(1).is_string() {","highlight_start":1,"highlight_end":55},{"text":"                        let protocols = val","highlight_start":1,"highlight_end":44},{"text":"                            .get(1)","highlight_start":1,"highlight_end":36},{"text":"                            .as_string()","highlight_start":1,"highlight_end":41},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        init_config.protocols = Some(vec![protocols]);","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(JsError::new(\"expected `InitConfig.protocols` value to be a string or an array\"));","highlight_start":1,"highlight_end":118},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    // we rather pipe the issues now than have them silently ignored","highlight_start":1,"highlight_end":85},{"text":"                    return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":54},{"text":"                        \"unexpected key in `InitConfig`: {}\",","highlight_start":1,"highlight_end":62},{"text":"                        val.get(0).as_string().expect_throw(\"expected object key to be a string\")","highlight_start":1,"highlight_end":98},{"text":"                    )));","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(init_config)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for an associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:47:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(obj: js_sys::Object) -> Result<Self, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut init_config = InitConfig::default();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entries = object_entries(&obj);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for entry in entries.iter() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(init_config)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":3883,"byte_end":3898,"line_start":101,"line_end":101,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        Ok(init_config)","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":3883,"byte_end":3898,"line_start":101,"line_end":101,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"        Ok(init_config)","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":"return Ok(init_config)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:101:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(init_config)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return Ok(init_config)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this argument is passed by value, but not consumed in the function body","code":{"code":"clippy::needless_pass_by_value","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1370,"byte_end":1384,"line_start":47,"line_end":47,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"    fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::needless_pass_by_value)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider taking a reference instead","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":1370,"byte_end":1384,"line_start":47,"line_end":47,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"    fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":"&js_sys::Object","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument is passed by value, but not consumed in the function body\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:47:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(obj: js_sys::Object) -> Result<Self, JsError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider taking a reference instead: `&js_sys::Object`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::needless_pass_by_value)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary structure name repetition","code":{"code":"clippy::use_self","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1443,"byte_end":1453,"line_start":48,"line_end":48,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        let mut init_config = InitConfig::default();","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the applicable keyword","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":1443,"byte_end":1453,"line_start":48,"line_end":48,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        let mut init_config = InitConfig::default();","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary structure name repetition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:48:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut init_config = InitConfig::default();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use the applicable keyword: `Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1660,"byte_end":1741,"line_start":52,"line_end":52,"column_start":19,"column_end":100,"is_primary":true,"text":[{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":19,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:52:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1683,"byte_end":1740,"line_start":52,"line_end":52,"column_start":42,"column_end":99,"is_primary":true,"text":[{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":42,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":1683,"byte_end":1740,"line_start":52,"line_end":52,"column_start":42,"column_end":99,"is_primary":true,"text":[{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":42,"highlight_end":99}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected object key to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:52:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected object key to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1818,"byte_end":1986,"line_start":54,"line_end":57,"column_start":39,"column_end":96,"is_primary":true,"text":[{"text":"                    init_config.url = val","highlight_start":39,"highlight_end":42},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;","highlight_start":1,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:54:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    init_config.url = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .get(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1916,"byte_end":1985,"line_start":57,"line_end":57,"column_start":26,"column_end":95,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;","highlight_start":26,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":1916,"byte_end":1985,"line_start":57,"line_end":57,"column_start":26,"column_end":95,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;","highlight_start":26,"highlight_end":95}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.url` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:57:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.url` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":2076,"byte_end":2246,"line_start":61,"line_end":64,"column_start":41,"column_end":98,"is_primary":true,"text":[{"text":"                    init_config.proxy = val","highlight_start":41,"highlight_end":44},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":1,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:61:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    init_config.proxy = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .get(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":2174,"byte_end":2245,"line_start":64,"line_end":64,"column_start":26,"column_end":97,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":26,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":2174,"byte_end":2245,"line_start":64,"line_end":64,"column_start":26,"column_end":97,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":26,"highlight_end":97}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.proxy` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:64:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.proxy` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":2643,"byte_end":2814,"line_start":73,"line_end":75,"column_start":33,"column_end":114,"is_primary":true,"text":[{"text":"                                protocol","highlight_start":33,"highlight_end":41},{"text":"                                    .as_string()","highlight_start":1,"highlight_end":49},{"text":"                                    .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,","highlight_start":1,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:73:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   protocol\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":2738,"byte_end":2813,"line_start":75,"line_end":75,"column_start":38,"column_end":113,"is_primary":true,"text":[{"text":"                                    .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,","highlight_start":38,"highlight_end":113}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":2738,"byte_end":2813,"line_start":75,"line_end":75,"column_start":38,"column_end":113,"is_primary":true,"text":[{"text":"                                    .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,","highlight_start":38,"highlight_end":113}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.protocols` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:75:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.protocols` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":3037,"byte_end":3223,"line_start":80,"line_end":83,"column_start":41,"column_end":106,"is_primary":true,"text":[{"text":"                        let protocols = val","highlight_start":41,"highlight_end":44},{"text":"                            .get(1)","highlight_start":1,"highlight_end":36},{"text":"                            .as_string()","highlight_start":1,"highlight_end":41},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;","highlight_start":1,"highlight_end":106}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:80:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let protocols = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .get(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":3147,"byte_end":3222,"line_start":83,"line_end":83,"column_start":30,"column_end":105,"is_primary":true,"text":[{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;","highlight_start":30,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":3147,"byte_end":3222,"line_start":83,"line_end":83,"column_start":30,"column_end":105,"is_primary":true,"text":[{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;","highlight_start":30,"highlight_end":105}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.protocols` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:83:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.protocols` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":3997,"byte_end":4095,"line_start":107,"line_end":110,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"struct WasmWebSocket {","highlight_start":1,"highlight_end":23},{"text":"    // This is the actual WebSocket object.","highlight_start":1,"highlight_end":44},{"text":"    socket: BrowserWebSocket,","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:107:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct WasmWebSocket {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // This is the actual WebSocket object.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    socket: BrowserWebSocket,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4068,"byte_end":4092,"line_start":109,"line_end":109,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    socket: BrowserWebSocket,","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:109:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    socket: BrowserWebSocket,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4160,"byte_end":4183,"line_start":114,"line_end":114,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        _ = self.socket.close()","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::semicolon_if_nothing_returned)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":4160,"byte_end":4183,"line_start":114,"line_end":114,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        _ = self.socket.close()","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":"_ = self.socket.close();","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:114:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _ = self.socket.close()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `_ = self.socket.close();`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::semicolon_if_nothing_returned)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for an associated function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4543,"byte_end":9974,"line_start":127,"line_end":260,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":5,"highlight_end":83},{"text":"        let options = InitConfig::new(options)?;","highlight_start":1,"highlight_end":49},{"text":"        let rebuilt_url = rebuild_url(&options.url);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // if already present & in open state, return the existing socket ref","highlight_start":1,"highlight_end":78},{"text":"        if let Some(val) = LAYER8_SOCKETS.with_borrow_mut(|val| match val.get(&rebuilt_url) {","highlight_start":1,"highlight_end":94},{"text":"            Some(x) if x.socket.ready_state() <= BrowserWebSocket::OPEN => Some(rebuilt_url.clone()),","highlight_start":1,"highlight_end":102},{"text":"            _ => None,","highlight_start":1,"highlight_end":23},{"text":"        }) {","highlight_start":1,"highlight_end":13},{"text":"            return Ok(WasmWebSocketRef(val));","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(KeyUse::Ecdh)?;","highlight_start":1,"highlight_end":81},{"text":"        PRIVATE_JWK_ECDH.with(|v| {","highlight_start":1,"highlight_end":36},{"text":"            v.set(Some(private_jwk_ecdh.clone()));","highlight_start":1,"highlight_end":51},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let b64_pub_jwk = pub_jwk_ecdh.export_as_base64();","highlight_start":1,"highlight_end":59},{"text":"        console_log!(&format!(\"Connecting to proxy: {}\", options.proxy));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {","highlight_start":1,"highlight_end":74},{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":1,"highlight_end":76},{"text":"            JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":60},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // waiting for the connection to be ready","highlight_start":1,"highlight_end":50},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |_event: Event| {","highlight_start":1,"highlight_end":63},{"text":"                tx.send(())","highlight_start":1,"highlight_end":28},{"text":"                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")","highlight_start":1,"highlight_end":127},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket.set_onopen(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            rx.await.map_err(|_e| {","highlight_start":1,"highlight_end":36},{"text":"                console_log!(\"Failed to connect to proxy\");","highlight_start":1,"highlight_end":60},{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":64},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Connected to proxy\");","highlight_start":1,"highlight_end":48},{"text":"            socket.set_onopen(None);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // let's make the initECDH handshake first","highlight_start":1,"highlight_end":51},{"text":"        let resp_bytes = {","highlight_start":1,"highlight_end":27},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |event: MessageEvent| {","highlight_start":1,"highlight_end":69},{"text":"                let data = event.data().as_string().expect_throw(\"expected the message frame o be a string\");","highlight_start":1,"highlight_end":110},{"text":"                console_log!(&format!(\"Received response: {}\", data));","highlight_start":1,"highlight_end":71},{"text":"                tx.send(data).unwrap();","highlight_start":1,"highlight_end":40},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Setting onmessage\");","highlight_start":1,"highlight_end":47},{"text":"            socket.set_onmessage(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // fixme: should be reusable for other operations","highlight_start":1,"highlight_end":62},{"text":"            let uuid = Uuid::new_v4().to_string();","highlight_start":1,"highlight_end":51},{"text":"            UUID.set(uuid.clone());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // sending the public key","highlight_start":1,"highlight_end":38},{"text":"            let payload = Layer8Envelope::WebSocket(WebSocketPayload {","highlight_start":1,"highlight_end":71},{"text":"                payload: None,","highlight_start":1,"highlight_end":31},{"text":"                metadata: json!({","highlight_start":1,"highlight_end":34},{"text":"                    \"backend_url\": rebuilt_url,","highlight_start":1,"highlight_end":48},{"text":"                    \"x-ecdh-init\": b64_pub_jwk,","highlight_start":1,"highlight_end":48},{"text":"                    \"x-client-uuid\": uuid,","highlight_start":1,"highlight_end":43},{"text":"                }),","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket","highlight_start":1,"highlight_end":19},{"text":"                .send_with_u8_array(","highlight_start":1,"highlight_end":37},{"text":"                    &serde_json::to_vec(&payload)","highlight_start":1,"highlight_end":50},{"text":"                        .map_err(|_e| {","highlight_start":1,"highlight_end":40},{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":91},{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":75},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .unwrap(),","highlight_start":1,"highlight_end":35},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|_e| {","highlight_start":1,"highlight_end":32},{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":83},{"text":"                    JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":67},{"text":"                })?;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Waiting for response\");","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // this will be a blocking operation; we need to wait for the response","highlight_start":1,"highlight_end":83},{"text":"            rx.await","highlight_start":1,"highlight_end":21},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(\"Received response\");","highlight_start":1,"highlight_end":55},{"text":"                    socket.set_onmessage(None); // reset the onmessage callback","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":1,"highlight_end":65},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        console_log!(\"Decoding response\");","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut proxy_data = {","highlight_start":1,"highlight_end":31},{"text":"            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {","highlight_start":1,"highlight_end":97},{"text":"                console_log!(&format!(","highlight_start":1,"highlight_end":39},{"text":"                    \"Failed to decode response: {_e}, Data is :{}\",","highlight_start":1,"highlight_end":68},{"text":"                    String::from_utf8_lossy(resp_bytes.as_ref())","highlight_start":1,"highlight_end":65},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                JsValue::from_str(\"Failed to decode response\")","highlight_start":1,"highlight_end":63},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match envelope {","highlight_start":1,"highlight_end":29},{"text":"                Layer8Envelope::WebSocket(payload) => {","highlight_start":1,"highlight_end":56},{"text":"                    // we only care about the metadata to make sure the tunnel is secure","highlight_start":1,"highlight_end":89},{"text":"                    serde_json::from_value::<serde_json::Map<String, serde_json::Value>>(payload.metadata)","highlight_start":1,"highlight_end":107},{"text":"                        .expect_throw(\"we expect a json object as the metadata\")","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    return Err(JsValue::from_str(\"we expect a websocket response\"));","highlight_start":1,"highlight_end":85},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;","highlight_start":1,"highlight_end":95},{"text":"        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));","highlight_start":1,"highlight_end":58},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(true);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            val.insert(rebuilt_url.clone(), WasmWebSocket { socket });","highlight_start":1,"highlight_end":71},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(WasmWebSocketRef(rebuilt_url))","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for an associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = InitConfig::new(options)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let rebuilt_url = rebuild_url(&options.url);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(WasmWebSocketRef(rebuilt_url))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many lines (104/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4543,"byte_end":9974,"line_start":127,"line_end":260,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":5,"highlight_end":83},{"text":"        let options = InitConfig::new(options)?;","highlight_start":1,"highlight_end":49},{"text":"        let rebuilt_url = rebuild_url(&options.url);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // if already present & in open state, return the existing socket ref","highlight_start":1,"highlight_end":78},{"text":"        if let Some(val) = LAYER8_SOCKETS.with_borrow_mut(|val| match val.get(&rebuilt_url) {","highlight_start":1,"highlight_end":94},{"text":"            Some(x) if x.socket.ready_state() <= BrowserWebSocket::OPEN => Some(rebuilt_url.clone()),","highlight_start":1,"highlight_end":102},{"text":"            _ => None,","highlight_start":1,"highlight_end":23},{"text":"        }) {","highlight_start":1,"highlight_end":13},{"text":"            return Ok(WasmWebSocketRef(val));","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(KeyUse::Ecdh)?;","highlight_start":1,"highlight_end":81},{"text":"        PRIVATE_JWK_ECDH.with(|v| {","highlight_start":1,"highlight_end":36},{"text":"            v.set(Some(private_jwk_ecdh.clone()));","highlight_start":1,"highlight_end":51},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let b64_pub_jwk = pub_jwk_ecdh.export_as_base64();","highlight_start":1,"highlight_end":59},{"text":"        console_log!(&format!(\"Connecting to proxy: {}\", options.proxy));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {","highlight_start":1,"highlight_end":74},{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":1,"highlight_end":76},{"text":"            JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":60},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // waiting for the connection to be ready","highlight_start":1,"highlight_end":50},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |_event: Event| {","highlight_start":1,"highlight_end":63},{"text":"                tx.send(())","highlight_start":1,"highlight_end":28},{"text":"                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")","highlight_start":1,"highlight_end":127},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket.set_onopen(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            rx.await.map_err(|_e| {","highlight_start":1,"highlight_end":36},{"text":"                console_log!(\"Failed to connect to proxy\");","highlight_start":1,"highlight_end":60},{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":64},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Connected to proxy\");","highlight_start":1,"highlight_end":48},{"text":"            socket.set_onopen(None);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // let's make the initECDH handshake first","highlight_start":1,"highlight_end":51},{"text":"        let resp_bytes = {","highlight_start":1,"highlight_end":27},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |event: MessageEvent| {","highlight_start":1,"highlight_end":69},{"text":"                let data = event.data().as_string().expect_throw(\"expected the message frame o be a string\");","highlight_start":1,"highlight_end":110},{"text":"                console_log!(&format!(\"Received response: {}\", data));","highlight_start":1,"highlight_end":71},{"text":"                tx.send(data).unwrap();","highlight_start":1,"highlight_end":40},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Setting onmessage\");","highlight_start":1,"highlight_end":47},{"text":"            socket.set_onmessage(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // fixme: should be reusable for other operations","highlight_start":1,"highlight_end":62},{"text":"            let uuid = Uuid::new_v4().to_string();","highlight_start":1,"highlight_end":51},{"text":"            UUID.set(uuid.clone());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // sending the public key","highlight_start":1,"highlight_end":38},{"text":"            let payload = Layer8Envelope::WebSocket(WebSocketPayload {","highlight_start":1,"highlight_end":71},{"text":"                payload: None,","highlight_start":1,"highlight_end":31},{"text":"                metadata: json!({","highlight_start":1,"highlight_end":34},{"text":"                    \"backend_url\": rebuilt_url,","highlight_start":1,"highlight_end":48},{"text":"                    \"x-ecdh-init\": b64_pub_jwk,","highlight_start":1,"highlight_end":48},{"text":"                    \"x-client-uuid\": uuid,","highlight_start":1,"highlight_end":43},{"text":"                }),","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket","highlight_start":1,"highlight_end":19},{"text":"                .send_with_u8_array(","highlight_start":1,"highlight_end":37},{"text":"                    &serde_json::to_vec(&payload)","highlight_start":1,"highlight_end":50},{"text":"                        .map_err(|_e| {","highlight_start":1,"highlight_end":40},{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":91},{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":75},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .unwrap(),","highlight_start":1,"highlight_end":35},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|_e| {","highlight_start":1,"highlight_end":32},{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":83},{"text":"                    JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":67},{"text":"                })?;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Waiting for response\");","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // this will be a blocking operation; we need to wait for the response","highlight_start":1,"highlight_end":83},{"text":"            rx.await","highlight_start":1,"highlight_end":21},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(\"Received response\");","highlight_start":1,"highlight_end":55},{"text":"                    socket.set_onmessage(None); // reset the onmessage callback","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":1,"highlight_end":65},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        console_log!(\"Decoding response\");","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut proxy_data = {","highlight_start":1,"highlight_end":31},{"text":"            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {","highlight_start":1,"highlight_end":97},{"text":"                console_log!(&format!(","highlight_start":1,"highlight_end":39},{"text":"                    \"Failed to decode response: {_e}, Data is :{}\",","highlight_start":1,"highlight_end":68},{"text":"                    String::from_utf8_lossy(resp_bytes.as_ref())","highlight_start":1,"highlight_end":65},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                JsValue::from_str(\"Failed to decode response\")","highlight_start":1,"highlight_end":63},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match envelope {","highlight_start":1,"highlight_end":29},{"text":"                Layer8Envelope::WebSocket(payload) => {","highlight_start":1,"highlight_end":56},{"text":"                    // we only care about the metadata to make sure the tunnel is secure","highlight_start":1,"highlight_end":89},{"text":"                    serde_json::from_value::<serde_json::Map<String, serde_json::Value>>(payload.metadata)","highlight_start":1,"highlight_end":107},{"text":"                        .expect_throw(\"we expect a json object as the metadata\")","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    return Err(JsValue::from_str(\"we expect a websocket response\"));","highlight_start":1,"highlight_end":85},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;","highlight_start":1,"highlight_end":95},{"text":"        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));","highlight_start":1,"highlight_end":58},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(true);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            val.insert(rebuilt_url.clone(), WasmWebSocket { socket });","highlight_start":1,"highlight_end":71},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(WasmWebSocketRef(rebuilt_url))","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (104/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = InitConfig::new(options)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let rebuilt_url = rebuild_url(&options.url);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(WasmWebSocketRef(rebuilt_url))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4543,"byte_end":4619,"line_start":127,"line_end":127,"column_start":5,"column_end":81,"is_primary":true,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":5,"highlight_end":81}],"label":"future returned by `init_` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":4543,"byte_end":4619,"line_start":127,"line_end":127,"column_start":5,"column_end":81,"is_primary":false,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":5,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":4558,"byte_end":4565,"line_start":127,"line_end":127,"column_start":20,"column_end":27,"is_primary":true,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":20,"highlight_end":27}],"label":"has type `js_sys::Object` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":4558,"byte_end":4565,"line_start":127,"line_end":127,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":6060,"byte_end":6065,"line_start":162,"line_end":162,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"            rx.await.map_err(|_e| {","highlight_start":16,"highlight_end":21}],"label":"await occurs here, with `closure` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":6060,"byte_end":6065,"line_start":162,"line_end":162,"column_start":16,"column_end":21,"is_primary":false,"text":[{"text":"            rx.await.map_err(|_e| {","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/websocket.rs","byte_start":5754,"byte_end":5761,"line_start":155,"line_end":155,"column_start":17,"column_end":24,"is_primary":false,"text":[{"text":"            let closure = Closure::once(move |_event: Event| {","highlight_start":17,"highlight_end":24}],"label":"has type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::Event)>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`dyn std::ops::FnMut(web_sys::Event)` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":8248,"byte_end":8253,"line_start":217,"line_end":217,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"            rx.await","highlight_start":16,"highlight_end":21}],"label":"await occurs here, with `closure` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":8248,"byte_end":8253,"line_start":217,"line_end":217,"column_start":16,"column_end":21,"is_primary":false,"text":[{"text":"            rx.await","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/websocket.rs","byte_start":6460,"byte_end":6467,"line_start":174,"line_end":174,"column_start":17,"column_end":24,"is_primary":false,"text":[{"text":"            let closure = Closure::once(move |event: MessageEvent| {","highlight_start":17,"highlight_end":24}],"label":"has type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::MessageEvent)>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`dyn std::ops::FnMut(web_sys::MessageEvent)` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `init_` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:127:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `js_sys::Object` which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:162:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let closure = Closure::once(move |_event: Event| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::Event)>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rx.await.map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `closure` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `dyn std::ops::FnMut(web_sys::Event)` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:217:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let closure = Closure::once(move |event: MessageEvent| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::MessageEvent)>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rx.await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `closure` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `dyn std::ops::FnMut(web_sys::MessageEvent)` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant clone","code":{"code":"clippy::redundant_clone","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9742,"byte_end":9750,"line_start":252,"line_end":252,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));","highlight_start":47,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this value is dropped without further use","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":9732,"byte_end":9742,"line_start":252,"line_end":252,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));","highlight_start":37,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":9742,"byte_end":9750,"line_start":252,"line_end":252,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));","highlight_start":47,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant clone\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:252:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: this value is dropped without further use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:252:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4644,"byte_end":4669,"line_start":128,"line_end":128,"column_start":23,"column_end":48,"is_primary":true,"text":[{"text":"        let options = InitConfig::new(options)?;","highlight_start":23,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:128:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = InitConfig::new(options)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`options` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4634,"byte_end":4641,"line_start":128,"line_end":128,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = InitConfig::new(options)?;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":4558,"byte_end":4565,"line_start":127,"line_end":127,"column_start":20,"column_end":27,"is_primary":true,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `options` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:128:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = InitConfig::new(options)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:127:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4972,"byte_end":4997,"line_start":133,"line_end":133,"column_start":76,"column_end":101,"is_primary":true,"text":[{"text":"            Some(x) if x.socket.ready_state() <= BrowserWebSocket::OPEN => Some(rebuilt_url.clone()),","highlight_start":76,"highlight_end":101}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":4972,"byte_end":4997,"line_start":133,"line_end":133,"column_start":76,"column_end":101,"is_primary":true,"text":[{"text":"            Some(x) if x.socket.ready_state() <= BrowserWebSocket::OPEN => Some(rebuilt_url.clone()),","highlight_start":76,"highlight_end":101}],"label":null,"suggested_replacement":"return Some(rebuilt_url.clone())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:133:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m BrowserWebSocket::OPEN => Some(rebuilt_url.clone()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return Some(rebuilt_url.clone())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5016,"byte_end":5020,"line_start":134,"line_end":134,"column_start":18,"column_end":22,"is_primary":true,"text":[{"text":"            _ => None,","highlight_start":18,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":5016,"byte_end":5020,"line_start":134,"line_end":134,"column_start":18,"column_end":22,"is_primary":true,"text":[{"text":"            _ => None,","highlight_start":18,"highlight_end":22}],"label":null,"suggested_replacement":"return None","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:134:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => None,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return None`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5139,"byte_end":5171,"line_start":139,"line_end":139,"column_start":48,"column_end":80,"is_primary":true,"text":[{"text":"        let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(KeyUse::Ecdh)?;","highlight_start":48,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:139:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(KeyUse::Ecdh)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5204,"byte_end":5205,"line_start":140,"line_end":140,"column_start":32,"column_end":33,"is_primary":true,"text":[{"text":"        PRIVATE_JWK_ECDH.with(|v| {","highlight_start":32,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:140:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        PRIVATE_JWK_ECDH.with(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5428,"byte_end":5628,"line_start":147,"line_end":150,"column_start":22,"column_end":12,"is_primary":true,"text":[{"text":"        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {","highlight_start":22,"highlight_end":74},{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":1,"highlight_end":76},{"text":"            JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":60},{"text":"        })?;","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:147:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsValue::from_str(\"Failed to connect to proxy\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5569,"byte_end":5616,"line_start":149,"line_end":149,"column_start":13,"column_end":60,"is_primary":true,"text":[{"text":"            JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":13,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":5569,"byte_end":5616,"line_start":149,"line_end":149,"column_start":13,"column_end":60,"is_primary":true,"text":[{"text":"            JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":13,"highlight_end":60}],"label":null,"suggested_replacement":"return JsValue::from_str(\"Failed to connect to proxy\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:149:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsValue::from_str(\"Failed to connect to proxy\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsValue::from_str(\"Failed to connect to proxy\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5507,"byte_end":5554,"line_start":148,"line_end":148,"column_start":27,"column_end":74,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":27,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":5545,"byte_end":5545,"line_start":148,"line_end":148,"column_start":65,"column_end":65,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":65,"highlight_end":65}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":5549,"byte_end":5553,"line_start":148,"line_end":148,"column_start":69,"column_end":73,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":69,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:148:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to connect to proxy: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, _e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to connect to proxy: {\u001b[0m\u001b[0m\u001b[38;5;10m_e\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5551,"byte_end":5553,"line_start":148,"line_end":148,"column_start":71,"column_end":73,"is_primary":true,"text":[{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":71,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_e` is defined here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":5475,"byte_end":5477,"line_start":147,"line_end":147,"column_start":69,"column_end":71,"is_primary":true,"text":[{"text":"        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {","highlight_start":69,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::used_underscore_binding)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:148:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_e` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:147:69\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::used_underscore_binding)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider moving the `;` outside the block for consistent formatting","code":{"code":"clippy::semicolon_outside_block","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5689,"byte_end":6317,"line_start":153,"line_end":169,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        {","highlight_start":9,"highlight_end":10},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |_event: Event| {","highlight_start":1,"highlight_end":63},{"text":"                tx.send(())","highlight_start":1,"highlight_end":28},{"text":"                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")","highlight_start":1,"highlight_end":127},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket.set_onopen(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            rx.await.map_err(|_e| {","highlight_start":1,"highlight_end":36},{"text":"                console_log!(\"Failed to connect to proxy\");","highlight_start":1,"highlight_end":60},{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":64},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Connected to proxy\");","highlight_start":1,"highlight_end":48},{"text":"            socket.set_onopen(None);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::semicolon-outside-block` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::semicolon_outside_block)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"put the `;` here","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":6306,"byte_end":6307,"line_start":168,"line_end":168,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"            socket.set_onopen(None);","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":6317,"byte_end":6317,"line_start":169,"line_end":169,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":10,"highlight_end":10}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider moving the `;` outside the block for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:153:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let (tx, rx) = oneshot::channel();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let closure = Closure::once(move |_event: Event| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                tx.send(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            socket.set_onopen(None);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::semicolon-outside-block` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::semicolon_outside_block)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: put the `;` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            socket.set_onopen(None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":5817,"byte_end":5955,"line_start":156,"line_end":157,"column_start":17,"column_end":127,"is_primary":true,"text":[{"text":"                tx.send(())","highlight_start":17,"highlight_end":28},{"text":"                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")","highlight_start":1,"highlight_end":127}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":5817,"byte_end":5955,"line_start":156,"line_end":157,"column_start":17,"column_end":127,"is_primary":true,"text":[{"text":"                tx.send(())","highlight_start":17,"highlight_end":28},{"text":"                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")","highlight_start":1,"highlight_end":127}],"label":null,"suggested_replacement":"tx.send(())\n                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\");","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:156:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   tx.send(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|____________________________________________________________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add a `;` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mtx.send(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":6057,"byte_end":6220,"line_start":162,"line_end":165,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            rx.await.map_err(|_e| {","highlight_start":13,"highlight_end":36},{"text":"                console_log!(\"Failed to connect to proxy\");","highlight_start":1,"highlight_end":60},{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":64},{"text":"            })?;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:162:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rx.await.map_err(|_e| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                console_log!(\"Failed to connect to proxy\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                JsValue::from_str(\"Failed to connect to proxy\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":6157,"byte_end":6204,"line_start":164,"line_end":164,"column_start":17,"column_end":64,"is_primary":true,"text":[{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":17,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":6157,"byte_end":6204,"line_start":164,"line_end":164,"column_start":17,"column_end":64,"is_primary":true,"text":[{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":17,"highlight_end":64}],"label":null,"suggested_replacement":"return JsValue::from_str(\"Failed to connect to proxy\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:164:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                JsValue::from_str(\"Failed to connect to proxy\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsValue::from_str(\"Failed to connect to proxy\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":6653,"byte_end":6691,"line_start":176,"line_end":176,"column_start":31,"column_end":69,"is_primary":true,"text":[{"text":"                console_log!(&format!(\"Received response: {}\", data));","highlight_start":31,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":6682,"byte_end":6682,"line_start":176,"line_end":176,"column_start":60,"column_end":60,"is_primary":true,"text":[{"text":"                console_log!(&format!(\"Received response: {}\", data));","highlight_start":60,"highlight_end":60}],"label":null,"suggested_replacement":"data","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":6684,"byte_end":6690,"line_start":176,"line_end":176,"column_start":62,"column_end":68,"is_primary":true,"text":[{"text":"                console_log!(&format!(\"Received response: {}\", data));","highlight_start":62,"highlight_end":68}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:176:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                console_log!(&format!(\"Received response: {}\", data));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                console_log!(&format!(\"Received response: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, data\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                console_log!(&format!(\"Received response: {\u001b[0m\u001b[0m\u001b[38;5;10mdata\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":6710,"byte_end":6732,"line_start":177,"line_end":177,"column_start":17,"column_end":39,"is_primary":true,"text":[{"text":"                tx.send(data).unwrap();","highlight_start":17,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:177:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                tx.send(data).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7385,"byte_end":8096,"line_start":197,"line_end":212,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            socket","highlight_start":13,"highlight_end":19},{"text":"                .send_with_u8_array(","highlight_start":1,"highlight_end":37},{"text":"                    &serde_json::to_vec(&payload)","highlight_start":1,"highlight_end":50},{"text":"                        .map_err(|_e| {","highlight_start":1,"highlight_end":40},{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":91},{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":75},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .unwrap(),","highlight_start":1,"highlight_end":35},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|_e| {","highlight_start":1,"highlight_end":32},{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":83},{"text":"                    JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":67},{"text":"                })?;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:197:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            socket\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .send_with_u8_array(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    &serde_json::to_vec(&payload)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .map_err(|_e| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    JsValue::from_str(\"Failed to send public key\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7450,"byte_end":7745,"line_start":199,"line_end":204,"column_start":22,"column_end":34,"is_primary":true,"text":[{"text":"                    &serde_json::to_vec(&payload)","highlight_start":22,"highlight_end":50},{"text":"                        .map_err(|_e| {","highlight_start":1,"highlight_end":40},{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":91},{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":75},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .unwrap(),","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:199:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    &serde_json::to_vec(&payload)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .map_err(|_e| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            JsValue::from_str(\"Failed to send public key\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .unwrap(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7638,"byte_end":7684,"line_start":202,"line_end":202,"column_start":29,"column_end":75,"is_primary":true,"text":[{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":29,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":7638,"byte_end":7684,"line_start":202,"line_end":202,"column_start":29,"column_end":75,"is_primary":true,"text":[{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":29,"highlight_end":75}],"label":null,"suggested_replacement":"return JsValue::from_str(\"Failed to send public key\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:202:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   JsValue::from_str(\"Failed to send public key\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsValue::from_str(\"Failed to send public key\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7561,"byte_end":7607,"line_start":201,"line_end":201,"column_start":43,"column_end":89,"is_primary":true,"text":[{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":43,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":7598,"byte_end":7598,"line_start":201,"line_end":201,"column_start":80,"column_end":80,"is_primary":true,"text":[{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":80,"highlight_end":80}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":7602,"byte_end":7606,"line_start":201,"line_end":201,"column_start":84,"column_end":88,"is_primary":true,"text":[{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":84,"highlight_end":88}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:201:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   console_log!(&format!(\"Failed to send public key: {:?}\", _e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                            console_log!(&format!(\"Failed to send public key: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, _e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                            console_log!(&format!(\"Failed to send public key: {\u001b[0m\u001b[0m\u001b[38;5;10m_e\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7604,"byte_end":7606,"line_start":201,"line_end":201,"column_start":86,"column_end":88,"is_primary":true,"text":[{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":86,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_e` is defined here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":7513,"byte_end":7515,"line_start":200,"line_end":200,"column_start":35,"column_end":37,"is_primary":true,"text":[{"text":"                        .map_err(|_e| {","highlight_start":35,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:201:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   console_log!(&format!(\"Failed to send public key: {:?}\", _e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_e` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:200:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"matching over `()` is more explicit","code":{"code":"clippy::ignored_unit_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7791,"byte_end":7792,"line_start":206,"line_end":206,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"                .inspect(|_| {","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::ignored-unit-patterns` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::ignored_unit_patterns)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use `()` instead of `_`","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":7791,"byte_end":7792,"line_start":206,"line_end":206,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"                .inspect(|_| {","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":"()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: matching over `()` is more explicit\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:206:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .inspect(|_| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `()` instead of `_`: `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::ignored-unit-patterns` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::ignored_unit_patterns)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7830,"byte_end":7873,"line_start":207,"line_end":207,"column_start":35,"column_end":78,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":35,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":7857,"byte_end":7857,"line_start":207,"line_end":207,"column_start":62,"column_end":62,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":62,"highlight_end":62}],"label":null,"suggested_replacement":"b64_pub_jwk","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":7859,"byte_end":7872,"line_start":207,"line_end":207,"column_start":64,"column_end":77,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":64,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:207:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    console_log!(&format!(\"Sent public key: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, b64_pub_jwk\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    console_log!(&format!(\"Sent public key: {\u001b[0m\u001b[0m\u001b[38;5;10mb64_pub_jwk\u001b[0m\u001b[0m}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8030,"byte_end":8076,"line_start":211,"line_end":211,"column_start":21,"column_end":67,"is_primary":true,"text":[{"text":"                    JsValue::from_str(\"Failed to send public key\")","highlight_start":21,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":8030,"byte_end":8076,"line_start":211,"line_end":211,"column_start":21,"column_end":67,"is_primary":true,"text":[{"text":"                    JsValue::from_str(\"Failed to send public key\")","highlight_start":21,"highlight_end":67}],"label":null,"suggested_replacement":"return JsValue::from_str(\"Failed to send public key\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:211:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    JsValue::from_str(\"Failed to send public key\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsValue::from_str(\"Failed to send public key\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":7961,"byte_end":8007,"line_start":210,"line_end":210,"column_start":35,"column_end":81,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":35,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":7998,"byte_end":7998,"line_start":210,"line_end":210,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":8002,"byte_end":8006,"line_start":210,"line_end":210,"column_start":76,"column_end":80,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":76,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:210:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to send public key: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, _e\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to send public key: {\u001b[0m\u001b[0m\u001b[38;5;10m_e\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8004,"byte_end":8006,"line_start":210,"line_end":210,"column_start":78,"column_end":80,"is_primary":true,"text":[{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":78,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_e` is defined here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":7921,"byte_end":7923,"line_start":209,"line_end":209,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"                .map_err(|_e| {","highlight_start":27,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:210:78\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_e` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:209:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8245,"byte_end":8503,"line_start":217,"line_end":222,"column_start":13,"column_end":65,"is_primary":true,"text":[{"text":"            rx.await","highlight_start":13,"highlight_end":21},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(\"Received response\");","highlight_start":1,"highlight_end":55},{"text":"                    socket.set_onmessage(None); // reset the onmessage callback","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:217:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rx.await\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .inspect(|_| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    console_log!(\"Received response\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    socket.set_onmessage(None); // reset the onmessage callback\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .map_err(|e| JsValue::from_str(&e.to_string()))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8468,"byte_end":8501,"line_start":222,"line_end":222,"column_start":30,"column_end":63,"is_primary":true,"text":[{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":8468,"byte_end":8501,"line_start":222,"line_end":222,"column_start":30,"column_end":63,"is_primary":true,"text":[{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":"return JsValue::from_str(&e.to_string())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:222:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .map_err(|e| JsValue::from_str(&e.to_string()))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsValue::from_str(&e.to_string())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8465,"byte_end":8466,"line_start":222,"line_end":222,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:222:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .map_err(|e| JsValue::from_str(&e.to_string()))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8618,"byte_end":8959,"line_start":228,"line_end":235,"column_start":28,"column_end":16,"is_primary":true,"text":[{"text":"            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {","highlight_start":28,"highlight_end":97},{"text":"                console_log!(&format!(","highlight_start":1,"highlight_end":39},{"text":"                    \"Failed to decode response: {_e}, Data is :{}\",","highlight_start":1,"highlight_end":68},{"text":"                    String::from_utf8_lossy(resp_bytes.as_ref())","highlight_start":1,"highlight_end":65},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                JsValue::from_str(\"Failed to decode response\")","highlight_start":1,"highlight_end":63},{"text":"            })?;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:228:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                console_log!(&format!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    \"Failed to decode response: {_e}, Data is :{}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    String::from_utf8_lossy(resp_bytes.as_ref())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                JsValue::from_str(\"Failed to decode response\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8897,"byte_end":8943,"line_start":234,"line_end":234,"column_start":17,"column_end":63,"is_primary":true,"text":[{"text":"                JsValue::from_str(\"Failed to decode response\")","highlight_start":17,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":8897,"byte_end":8943,"line_start":234,"line_end":234,"column_start":17,"column_end":63,"is_primary":true,"text":[{"text":"                JsValue::from_str(\"Failed to decode response\")","highlight_start":17,"highlight_end":63}],"label":null,"suggested_replacement":"return JsValue::from_str(\"Failed to decode response\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:234:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                JsValue::from_str(\"Failed to decode response\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return JsValue::from_str(\"Failed to decode response\")`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":8776,"byte_end":8778,"line_start":230,"line_end":230,"column_start":50,"column_end":52,"is_primary":true,"text":[{"text":"                    \"Failed to decode response: {_e}, Data is :{}\",","highlight_start":50,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_e` is defined here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":8682,"byte_end":8684,"line_start":228,"line_end":228,"column_start":92,"column_end":94,"is_primary":true,"text":[{"text":"            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {","highlight_start":92,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_e` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:230:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    \"Failed to decode response: {_e}, Data is :{}\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_e` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:228:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"wildcard match will also match any future added variants","code":{"code":"clippy::wildcard_enum_match_arm","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9358,"byte_end":9359,"line_start":243,"line_end":243,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                _ => {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::wildcard-enum-match-arm` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::wildcard_enum_match_arm)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":9358,"byte_end":9359,"line_start":243,"line_end":243,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                _ => {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"Layer8Envelope::Http(_) | Layer8Envelope::Raw(_)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: wildcard match will also match any future added variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:243:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `Layer8Envelope::Http(_) | Layer8Envelope::Raw(_)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::wildcard-enum-match-arm` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::wildcard_enum_match_arm)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `&str`","code":{"code":"clippy::str_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9513,"byte_end":9597,"line_start":249,"line_end":249,"column_start":20,"column_end":104,"is_primary":true,"text":[{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":20,"highlight_end":104}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":9513,"byte_end":9597,"line_start":249,"line_end":249,"column_start":20,"column_end":104,"is_primary":true,"text":[{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":20,"highlight_end":104}],"label":null,"suggested_replacement":"proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_owned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:249:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0met(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_owned()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9513,"byte_end":9585,"line_start":249,"line_end":249,"column_start":20,"column_end":92,"is_primary":true,"text":[{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":20,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:249:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_stri\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9513,"byte_end":9567,"line_start":249,"line_end":249,"column_start":20,"column_end":74,"is_primary":true,"text":[{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":20,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:249:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_stri\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9626,"byte_end":9694,"line_start":251,"line_end":251,"column_start":26,"column_end":94,"is_primary":true,"text":[{"text":"        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;","highlight_start":26,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:251:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9667,"byte_end":9692,"line_start":251,"line_end":251,"column_start":67,"column_end":92,"is_primary":true,"text":[{"text":"        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;","highlight_start":67,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:251:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary structure name repetition","code":{"code":"clippy::use_self","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":9887,"byte_end":9900,"line_start":256,"line_end":256,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"            val.insert(rebuilt_url.clone(), WasmWebSocket { socket });","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the applicable keyword","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":9887,"byte_end":9900,"line_start":256,"line_end":256,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"            val.insert(rebuilt_url.clone(), WasmWebSocket { socket });","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary structure name repetition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:256:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            val.insert(rebuilt_url.clone(), WasmWebSocket { socket });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use the applicable keyword: `Self`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10119,"byte_end":10124,"line_start":266,"line_end":266,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10119,"byte_end":10124,"line_start":266,"line_end":266,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:266:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10334,"byte_end":10348,"line_start":270,"line_end":270,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        self.0.clone()","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10334,"byte_end":10348,"line_start":270,"line_end":270,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        self.0.clone()","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"return self.0.clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:270:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.0.clone()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return self.0.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10362,"byte_end":10367,"line_start":273,"line_end":273,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10362,"byte_end":10367,"line_start":273,"line_end":273,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:273:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10589,"byte_end":10721,"line_start":277,"line_end":279,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":1,"highlight_end":85},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10589,"byte_end":10721,"line_start":277,"line_end":279,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":1,"highlight_end":85},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:277:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10635,"byte_end":10687,"line_start":278,"line_end":278,"column_start":32,"column_end":84,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":32,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10635,"byte_end":10687,"line_start":278,"line_end":278,"column_start":32,"column_end":84,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":32,"highlight_end":84}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.ready_state())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:278:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.ready_state())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10662,"byte_end":10686,"line_start":278,"line_end":278,"column_start":59,"column_end":83,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":59,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10662,"byte_end":10686,"line_start":278,"line_end":278,"column_start":59,"column_end":83,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":59,"highlight_end":83}],"label":null,"suggested_replacement":"return val.socket.ready_state()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:278:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.ready_state()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10657,"byte_end":10660,"line_start":278,"line_end":278,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":10630,"byte_end":10633,"line_start":278,"line_end":278,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::shadow-unrelated` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::shadow_unrelated)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:278:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:278:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::shadow-unrelated` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::shadow_unrelated)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10735,"byte_end":10740,"line_start":282,"line_end":282,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10735,"byte_end":10740,"line_start":282,"line_end":282,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:282:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":10970,"byte_end":11106,"line_start":286,"line_end":288,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":1,"highlight_end":89},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":10970,"byte_end":11106,"line_start":286,"line_end":288,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":1,"highlight_end":89},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:286:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11016,"byte_end":11072,"line_start":287,"line_end":287,"column_start":32,"column_end":88,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":32,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11016,"byte_end":11072,"line_start":287,"line_end":287,"column_start":32,"column_end":88,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":32,"highlight_end":88}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.buffered_amount())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:287:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.buffered_amount())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11043,"byte_end":11071,"line_start":287,"line_end":287,"column_start":59,"column_end":87,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":59,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11043,"byte_end":11071,"line_start":287,"line_end":287,"column_start":59,"column_end":87,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":59,"highlight_end":87}],"label":null,"suggested_replacement":"return val.socket.buffered_amount()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:287:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.buffered_amount()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11038,"byte_end":11041,"line_start":287,"line_end":287,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":11011,"byte_end":11014,"line_start":287,"line_end":287,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:287:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:287:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11120,"byte_end":11125,"line_start":291,"line_end":291,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11120,"byte_end":11125,"line_start":291,"line_end":291,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:291:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11351,"byte_end":11478,"line_start":295,"line_end":297,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":1,"highlight_end":80},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11351,"byte_end":11478,"line_start":295,"line_end":297,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":1,"highlight_end":80},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:295:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11397,"byte_end":11444,"line_start":296,"line_end":296,"column_start":32,"column_end":79,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":32,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11397,"byte_end":11444,"line_start":296,"line_end":296,"column_start":32,"column_end":79,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":32,"highlight_end":79}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.onopen())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:296:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.onopen())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11424,"byte_end":11443,"line_start":296,"line_end":296,"column_start":59,"column_end":78,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":59,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11424,"byte_end":11443,"line_start":296,"line_end":296,"column_start":59,"column_end":78,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":59,"highlight_end":78}],"label":null,"suggested_replacement":"return val.socket.onopen()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:296:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.onopen()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11419,"byte_end":11422,"line_start":296,"line_end":296,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":11392,"byte_end":11395,"line_start":296,"line_end":296,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:296:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:296:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11492,"byte_end":11497,"line_start":300,"line_end":300,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11492,"byte_end":11497,"line_start":300,"line_end":300,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:300:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this argument is passed by value, but not consumed in the function body","code":{"code":"clippy::needless_pass_by_value","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11722,"byte_end":11738,"line_start":303,"line_end":303,"column_start":37,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn set_onopen(&self, value: Option<Function>) {","highlight_start":37,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider taking a reference instead","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11722,"byte_end":11738,"line_start":303,"line_end":303,"column_start":37,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn set_onopen(&self, value: Option<Function>) {","highlight_start":37,"highlight_end":53}],"label":null,"suggested_replacement":"&Option<Function>","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument is passed by value, but not consumed in the function body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:303:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_onopen(&self, value: Option<Function>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider taking a reference instead: `&Option<Function>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":11943,"byte_end":11948,"line_start":311,"line_end":311,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":11943,"byte_end":11948,"line_start":311,"line_end":311,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:311:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12176,"byte_end":12304,"line_start":315,"line_end":317,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":1,"highlight_end":81},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":12176,"byte_end":12304,"line_start":315,"line_end":317,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":1,"highlight_end":81},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:315:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12222,"byte_end":12270,"line_start":316,"line_end":316,"column_start":32,"column_end":80,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":32,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":12222,"byte_end":12270,"line_start":316,"line_end":316,"column_start":32,"column_end":80,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":32,"highlight_end":80}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.onerror())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:316:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.onerror())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12249,"byte_end":12269,"line_start":316,"line_end":316,"column_start":59,"column_end":79,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":59,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":12249,"byte_end":12269,"line_start":316,"line_end":316,"column_start":59,"column_end":79,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":59,"highlight_end":79}],"label":null,"suggested_replacement":"return val.socket.onerror()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:316:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.onerror()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12244,"byte_end":12247,"line_start":316,"line_end":316,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":12217,"byte_end":12220,"line_start":316,"line_end":316,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:316:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:316:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12318,"byte_end":12323,"line_start":320,"line_end":320,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":12318,"byte_end":12323,"line_start":320,"line_end":320,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:320:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this argument is passed by value, but not consumed in the function body","code":{"code":"clippy::needless_pass_by_value","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12551,"byte_end":12567,"line_start":323,"line_end":323,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn set_onerror(&self, value: Option<Function>) {","highlight_start":38,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider taking a reference instead","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":12551,"byte_end":12567,"line_start":323,"line_end":323,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn set_onerror(&self, value: Option<Function>) {","highlight_start":38,"highlight_end":54}],"label":null,"suggested_replacement":"&Option<Function>","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument is passed by value, but not consumed in the function body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:323:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_onerror(&self, value: Option<Function>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider taking a reference instead: `&Option<Function>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":12773,"byte_end":12778,"line_start":331,"line_end":331,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":12773,"byte_end":12778,"line_start":331,"line_end":331,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:331:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13006,"byte_end":13134,"line_start":335,"line_end":337,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":1,"highlight_end":81},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13006,"byte_end":13134,"line_start":335,"line_end":337,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":1,"highlight_end":81},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:335:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13052,"byte_end":13100,"line_start":336,"line_end":336,"column_start":32,"column_end":80,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":32,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13052,"byte_end":13100,"line_start":336,"line_end":336,"column_start":32,"column_end":80,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":32,"highlight_end":80}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.onclose())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:336:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.onclose())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13079,"byte_end":13099,"line_start":336,"line_end":336,"column_start":59,"column_end":79,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":59,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13079,"byte_end":13099,"line_start":336,"line_end":336,"column_start":59,"column_end":79,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":59,"highlight_end":79}],"label":null,"suggested_replacement":"return val.socket.onclose()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:336:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.onclose()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13074,"byte_end":13077,"line_start":336,"line_end":336,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":13047,"byte_end":13050,"line_start":336,"line_end":336,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:336:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:336:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13148,"byte_end":13153,"line_start":340,"line_end":340,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13148,"byte_end":13153,"line_start":340,"line_end":340,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:340:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this argument is passed by value, but not consumed in the function body","code":{"code":"clippy::needless_pass_by_value","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13381,"byte_end":13397,"line_start":343,"line_end":343,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn set_onclose(&self, value: Option<Function>) {","highlight_start":38,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider taking a reference instead","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13381,"byte_end":13397,"line_start":343,"line_end":343,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn set_onclose(&self, value: Option<Function>) {","highlight_start":38,"highlight_end":54}],"label":null,"suggested_replacement":"&Option<Function>","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument is passed by value, but not consumed in the function body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:343:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_onclose(&self, value: Option<Function>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider taking a reference instead: `&Option<Function>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13603,"byte_end":13608,"line_start":351,"line_end":351,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13603,"byte_end":13608,"line_start":351,"line_end":351,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:351:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13832,"byte_end":13963,"line_start":355,"line_end":357,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":1,"highlight_end":84},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13832,"byte_end":13963,"line_start":355,"line_end":357,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":1,"highlight_end":84},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:355:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13878,"byte_end":13929,"line_start":356,"line_end":356,"column_start":32,"column_end":83,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":32,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13878,"byte_end":13929,"line_start":356,"line_end":356,"column_start":32,"column_end":83,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":32,"highlight_end":83}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.extensions())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:356:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.extensions())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13905,"byte_end":13928,"line_start":356,"line_end":356,"column_start":59,"column_end":82,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":59,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13905,"byte_end":13928,"line_start":356,"line_end":356,"column_start":59,"column_end":82,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":59,"highlight_end":82}],"label":null,"suggested_replacement":"return val.socket.extensions()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:356:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.extensions()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13900,"byte_end":13903,"line_start":356,"line_end":356,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":13873,"byte_end":13876,"line_start":356,"line_end":356,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:356:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:356:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":13977,"byte_end":13982,"line_start":360,"line_end":360,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":13977,"byte_end":13982,"line_start":360,"line_end":360,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:360:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14202,"byte_end":14331,"line_start":364,"line_end":366,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":1,"highlight_end":82},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14202,"byte_end":14331,"line_start":364,"line_end":366,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":1,"highlight_end":82},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:364:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14248,"byte_end":14297,"line_start":365,"line_end":365,"column_start":32,"column_end":81,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":32,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14248,"byte_end":14297,"line_start":365,"line_end":365,"column_start":32,"column_end":81,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":32,"highlight_end":81}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.protocol())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:365:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.protocol())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14275,"byte_end":14296,"line_start":365,"line_end":365,"column_start":59,"column_end":80,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":59,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14275,"byte_end":14296,"line_start":365,"line_end":365,"column_start":59,"column_end":80,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":59,"highlight_end":80}],"label":null,"suggested_replacement":"return val.socket.protocol()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:365:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.protocol()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14270,"byte_end":14273,"line_start":365,"line_end":365,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":14243,"byte_end":14246,"line_start":365,"line_end":365,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:365:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:365:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14345,"byte_end":14350,"line_start":369,"line_end":369,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14345,"byte_end":14350,"line_start":369,"line_end":369,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:369:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14583,"byte_end":14713,"line_start":373,"line_end":375,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":1,"highlight_end":83},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14583,"byte_end":14713,"line_start":373,"line_end":375,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":1,"highlight_end":83},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\n            .unwrap_or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:373:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or_default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14629,"byte_end":14679,"line_start":374,"line_end":374,"column_start":32,"column_end":82,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":32,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14629,"byte_end":14679,"line_start":374,"line_end":374,"column_start":32,"column_end":82,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":32,"highlight_end":82}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.onmessage())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:374:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.onmessage())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14656,"byte_end":14678,"line_start":374,"line_end":374,"column_start":59,"column_end":81,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":59,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14656,"byte_end":14678,"line_start":374,"line_end":374,"column_start":59,"column_end":81,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":59,"highlight_end":81}],"label":null,"suggested_replacement":"return val.socket.onmessage()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:374:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.onmessage()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14651,"byte_end":14654,"line_start":374,"line_end":374,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":14624,"byte_end":14627,"line_start":374,"line_end":374,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:374:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:374:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":14727,"byte_end":14732,"line_start":378,"line_end":378,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":14727,"byte_end":14732,"line_start":378,"line_end":378,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:378:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m378\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":15294,"byte_end":15299,"line_start":391,"line_end":391,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":15294,"byte_end":15299,"line_start":391,"line_end":391,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:391:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type of pattern does not match the expression type","code":{"code":"clippy::pattern_type_mismatch","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16023,"byte_end":16037,"line_start":403,"line_end":403,"column_start":20,"column_end":34,"is_primary":true,"text":[{"text":"            if let Some(listener) = &listener {","highlight_start":20,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type of pattern does not match the expression type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:403:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(listener) = &listener {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`listener` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16028,"byte_end":16036,"line_start":403,"line_end":403,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"            if let Some(listener) = &listener {","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":15638,"byte_end":15646,"line_start":395,"line_end":395,"column_start":51,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn add_event_listener(&self, type_: &str, listener: Option<Function>) {","highlight_start":51,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `listener` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:403:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(listener) = &listener {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:395:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m395\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn add_event_listener(&self, type_: &str, listener: Option<Function>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16068,"byte_end":16269,"line_start":404,"line_end":407,"column_start":17,"column_end":96,"is_primary":true,"text":[{"text":"                stream","highlight_start":17,"highlight_end":23},{"text":"                    .socket","highlight_start":1,"highlight_end":28},{"text":"                    .add_event_listener_with_callback(type_, listener)","highlight_start":1,"highlight_end":71},{"text":"                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))","highlight_start":1,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16068,"byte_end":16269,"line_start":404,"line_end":407,"column_start":17,"column_end":96,"is_primary":true,"text":[{"text":"                stream","highlight_start":17,"highlight_end":23},{"text":"                    .socket","highlight_start":1,"highlight_end":28},{"text":"                    .add_event_listener_with_callback(type_, listener)","highlight_start":1,"highlight_end":71},{"text":"                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))","highlight_start":1,"highlight_end":96}],"label":null,"suggested_replacement":"stream\n                    .socket\n                    .add_event_listener_with_callback(type_, listener)\n                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_));","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:404:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                stream\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .socket\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m406\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .add_event_listener_with_callback(type_, listener)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add a `;` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mstream\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     .socket\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m406\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     .add_event_listener_with_callback(type_, listener)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16209,"byte_end":16268,"line_start":407,"line_end":407,"column_start":36,"column_end":95,"is_primary":true,"text":[{"text":"                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))","highlight_start":36,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16258,"byte_end":16258,"line_start":407,"line_end":407,"column_start":85,"column_end":85,"is_primary":true,"text":[{"text":"                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))","highlight_start":85,"highlight_end":85}],"label":null,"suggested_replacement":"type_","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":16260,"byte_end":16267,"line_start":407,"line_end":407,"column_start":87,"column_end":94,"is_primary":true,"text":[{"text":"                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))","highlight_start":87,"highlight_end":94}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:407:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    .expect_throw(&format!(\"Failed to add event listener for type: {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, type_\u001b[0m\u001b[0m))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    .expect_throw(&format!(\"Failed to add event listener for type: {\u001b[0m\u001b[0m\u001b[38;5;10mtype_\u001b[0m\u001b[0m}\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16309,"byte_end":16314,"line_start":412,"line_end":412,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16309,"byte_end":16314,"line_start":412,"line_end":412,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:412:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m412\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16565,"byte_end":16712,"line_start":416,"line_end":418,"column_start":9,"column_end":48,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":1,"highlight_end":85},{"text":"            .unwrap_or(BinaryType::Arraybuffer)","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16565,"byte_end":16712,"line_start":416,"line_end":418,"column_start":9,"column_end":48,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS","highlight_start":9,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":1,"highlight_end":85},{"text":"            .unwrap_or(BinaryType::Arraybuffer)","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS\n            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\n            .unwrap_or(BinaryType::Arraybuffer)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:416:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or(BinaryType::Arraybuffer)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             .unwrap_or(BinaryType::Arraybuffer)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16611,"byte_end":16663,"line_start":417,"line_end":417,"column_start":32,"column_end":84,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":32,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16611,"byte_end":16663,"line_start":417,"line_end":417,"column_start":32,"column_end":84,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":32,"highlight_end":84}],"label":null,"suggested_replacement":"return val.get(&self.0).map(|val| val.socket.binary_type())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:417:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.get(&self.0).map(|val| val.socket.binary_type())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16638,"byte_end":16662,"line_start":417,"line_end":417,"column_start":59,"column_end":83,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":59,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16638,"byte_end":16662,"line_start":417,"line_end":417,"column_start":59,"column_end":83,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":59,"highlight_end":83}],"label":null,"suggested_replacement":"return val.socket.binary_type()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:417:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.binary_type()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16633,"byte_end":16636,"line_start":417,"line_end":417,"column_start":54,"column_end":57,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":54,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":16606,"byte_end":16609,"line_start":417,"line_end":417,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:417:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:417:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16726,"byte_end":16731,"line_start":421,"line_end":421,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":16726,"byte_end":16731,"line_start":421,"line_end":421,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:421:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `self` argument","code":{"code":"clippy::unused_self","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17021,"byte_end":17026,"line_start":425,"line_end":425,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn set_binary_type(&self, _: BinaryType) {}","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider refactoring to an associated function","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::unused-self` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::unused_self)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `self` argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:425:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_binary_type(&self, _: BinaryType) {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider refactoring to an associated function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::unused-self` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::unused_self)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this could be a `const fn`","code":{"code":"clippy::missing_const_for_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":16998,"byte_end":17045,"line_start":425,"line_end":425,"column_start":5,"column_end":52,"is_primary":true,"text":[{"text":"    pub fn set_binary_type(&self, _: BinaryType) {}","highlight_start":5,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"make the function `const`","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":17001,"byte_end":17001,"line_start":425,"line_end":425,"column_start":8,"column_end":8,"is_primary":true,"text":[{"text":"    pub fn set_binary_type(&self, _: BinaryType) {}","highlight_start":8,"highlight_end":8}],"label":null,"suggested_replacement":" const","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this could be a `const fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:425:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_binary_type(&self, _: BinaryType) {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: make the function `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub\u001b[0m\u001b[0m\u001b[38;5;10m const\u001b[0m\u001b[0m fn set_binary_type(&self, _: BinaryType) {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17101,"byte_end":17106,"line_start":428,"line_end":428,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":17101,"byte_end":17106,"line_start":428,"line_end":428,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:428:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17263,"byte_end":17290,"line_start":431,"line_end":431,"column_start":9,"column_end":36,"is_primary":true,"text":[{"text":"        WasmWebSocketRef::default()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":17263,"byte_end":17290,"line_start":431,"line_end":431,"column_start":9,"column_end":36,"is_primary":true,"text":[{"text":"        WasmWebSocketRef::default()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":"return WasmWebSocketRef::default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:431:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        WasmWebSocketRef::default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return WasmWebSocketRef::default()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary structure name repetition","code":{"code":"clippy::use_self","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17263,"byte_end":17279,"line_start":431,"line_end":431,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        WasmWebSocketRef::default()","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the applicable keyword","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":17263,"byte_end":17279,"line_start":431,"line_end":431,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        WasmWebSocketRef::default()","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary structure name repetition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:431:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        WasmWebSocketRef::default()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use the applicable keyword: `Self`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17715,"byte_end":17720,"line_start":445,"line_end":445,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":17715,"byte_end":17720,"line_start":445,"line_end":445,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:445:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17713,"byte_end":17732,"line_start":445,"line_end":445,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    #[allow(dead_code)]","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:445:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17737,"byte_end":17813,"line_start":446,"line_end":446,"column_start":5,"column_end":81,"is_primary":true,"text":[{"text":"    pub async fn init(&mut self, options: js_sys::Object) -> Result<(), JsValue> {","highlight_start":5,"highlight_end":81}],"label":"future returned by `init` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":17737,"byte_end":17813,"line_start":446,"line_end":446,"column_start":5,"column_end":81,"is_primary":false,"text":[{"text":"    pub async fn init(&mut self, options: js_sys::Object) -> Result<(), JsValue> {","highlight_start":5,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":17766,"byte_end":17773,"line_start":446,"line_end":446,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"    pub async fn init(&mut self, options: js_sys::Object) -> Result<(), JsValue> {","highlight_start":34,"highlight_end":41}],"label":"has type `js_sys::Object` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":17766,"byte_end":17773,"line_start":446,"line_end":446,"column_start":34,"column_end":41,"is_primary":false,"text":[{"text":"    pub async fn init(&mut self, options: js_sys::Object) -> Result<(), JsValue> {","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":6060,"byte_end":6065,"line_start":162,"line_end":162,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"            rx.await.map_err(|_e| {","highlight_start":16,"highlight_end":21}],"label":"await occurs here, with `closure` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":6060,"byte_end":6065,"line_start":162,"line_end":162,"column_start":16,"column_end":21,"is_primary":false,"text":[{"text":"            rx.await.map_err(|_e| {","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/websocket.rs","byte_start":5754,"byte_end":5761,"line_start":155,"line_end":155,"column_start":17,"column_end":24,"is_primary":false,"text":[{"text":"            let closure = Closure::once(move |_event: Event| {","highlight_start":17,"highlight_end":24}],"label":"has type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::Event)>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`dyn std::ops::FnMut(web_sys::Event)` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":8248,"byte_end":8253,"line_start":217,"line_end":217,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"            rx.await","highlight_start":16,"highlight_end":21}],"label":"await occurs here, with `closure` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/websocket.rs","byte_start":8248,"byte_end":8253,"line_start":217,"line_end":217,"column_start":16,"column_end":21,"is_primary":false,"text":[{"text":"            rx.await","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/websocket.rs","byte_start":6460,"byte_end":6467,"line_start":174,"line_end":174,"column_start":17,"column_end":24,"is_primary":false,"text":[{"text":"            let closure = Closure::once(move |event: MessageEvent| {","highlight_start":17,"highlight_end":24}],"label":"has type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::MessageEvent)>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`dyn std::ops::FnMut(web_sys::MessageEvent)` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:446:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn init(&mut self, options: js_sys::Object) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `init` is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:446:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn init(&mut self, options: js_sys::Object) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `js_sys::Object` which is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:162:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let closure = Closure::once(move |_event: Event| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::Event)>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rx.await.map_err(|_e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `closure` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `dyn std::ops::FnMut(web_sys::Event)` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:217:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let closure = Closure::once(move |event: MessageEvent| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::prelude::Closure<dyn std::ops::FnMut(web_sys::MessageEvent)>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            rx.await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `closure` maybe used later\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `dyn std::ops::FnMut(web_sys::MessageEvent)` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`allow` attribute without specifying a reason","code":{"code":"clippy::allow_attributes_without_reason","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17713,"byte_end":17732,"line_start":445,"line_end":445,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    #[allow(dead_code)]","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a reason at the end with `, reason = \"..\"`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `allow` attribute without specifying a reason\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:445:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: try adding a reason at the end with `, reason = \"..\"`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17832,"byte_end":17868,"line_start":447,"line_end":447,"column_start":17,"column_end":53,"is_primary":true,"text":[{"text":"        *self = WasmWebSocket::init_(options).await?;","highlight_start":17,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:447:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        *self = WasmWebSocket::init_(options).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17927,"byte_end":17932,"line_start":452,"line_end":452,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":17927,"byte_end":17932,"line_start":452,"line_end":452,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:452:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18121,"byte_end":18600,"line_start":454,"line_end":464,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":9,"highlight_end":47},{"text":"            if let Some(val) = val.get_mut(&self.0) {","highlight_start":1,"highlight_end":54},{"text":"                match (code, reason) {","highlight_start":1,"highlight_end":39},{"text":"                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),","highlight_start":1,"highlight_end":104},{"text":"                    (Some(code), None) => val.socket.close_with_code(code),","highlight_start":1,"highlight_end":76},{"text":"                    _ => val.socket.close(),","highlight_start":1,"highlight_end":45},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Err(JsValue::from_str(\"Socket not found\"))","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18121,"byte_end":18600,"line_start":454,"line_end":464,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":9,"highlight_end":47},{"text":"            if let Some(val) = val.get_mut(&self.0) {","highlight_start":1,"highlight_end":54},{"text":"                match (code, reason) {","highlight_start":1,"highlight_end":39},{"text":"                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),","highlight_start":1,"highlight_end":104},{"text":"                    (Some(code), None) => val.socket.close_with_code(code),","highlight_start":1,"highlight_end":76},{"text":"                    _ => val.socket.close(),","highlight_start":1,"highlight_end":45},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Err(JsValue::from_str(\"Socket not found\"))","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS.with_borrow_mut(|val| {\n            if let Some(val) = val.get_mut(&self.0) {\n                match (code, reason) {\n                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),\n                    (Some(code), None) => val.socket.close_with_code(code),\n                    _ => val.socket.close(),\n                }\n            } else {\n                Err(JsValue::from_str(\"Socket not found\"))\n            }\n        })","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:454:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   LAYER8_SOCKETS.with_borrow_mut(|val| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       if let Some(val) = val.get_mut(&self.0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m           match (code, reason) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m               (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &re\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS.with_borrow_mut(|val| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             if let Some(val) = val.get_mut(&self.0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 match (code, reason) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     (Some(code), None) => val.socket.close_with_code(code),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     _ => val.socket.close(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 Err(JsValue::from_str(\"Socket not found\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18303,"byte_end":18355,"line_start":457,"line_end":457,"column_start":51,"column_end":103,"is_primary":true,"text":[{"text":"                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),","highlight_start":51,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18303,"byte_end":18355,"line_start":457,"line_end":457,"column_start":51,"column_end":103,"is_primary":true,"text":[{"text":"                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),","highlight_start":51,"highlight_end":103}],"label":null,"suggested_replacement":"return val.socket.close_with_code_and_reason(code, &reason)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:457:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mSome(reason)) => val.socket.close_with_code_and_reason(code, &reason),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.close_with_code_and_reason(code, &reason)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18399,"byte_end":18431,"line_start":458,"line_end":458,"column_start":43,"column_end":75,"is_primary":true,"text":[{"text":"                    (Some(code), None) => val.socket.close_with_code(code),","highlight_start":43,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18399,"byte_end":18431,"line_start":458,"line_end":458,"column_start":43,"column_end":75,"is_primary":true,"text":[{"text":"                    (Some(code), None) => val.socket.close_with_code(code),","highlight_start":43,"highlight_end":75}],"label":null,"suggested_replacement":"return val.socket.close_with_code(code)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:458:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    (Some(code), None) => val.socket.close_with_code(code),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.close_with_code(code)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18458,"byte_end":18476,"line_start":459,"line_end":459,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"                    _ => val.socket.close(),","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18458,"byte_end":18476,"line_start":459,"line_end":459,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"                    _ => val.socket.close(),","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":"return val.socket.close()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:459:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    _ => val.socket.close(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return val.socket.close()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18533,"byte_end":18575,"line_start":462,"line_end":462,"column_start":17,"column_end":59,"is_primary":true,"text":[{"text":"                Err(JsValue::from_str(\"Socket not found\"))","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18533,"byte_end":18575,"line_start":462,"line_end":462,"column_start":17,"column_end":59,"is_primary":true,"text":[{"text":"                Err(JsValue::from_str(\"Socket not found\"))","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":"return Err(JsValue::from_str(\"Socket not found\"))","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:462:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(JsValue::from_str(\"Socket not found\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return Err(JsValue::from_str(\"Socket not found\"))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`val` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18184,"byte_end":18187,"line_start":455,"line_end":455,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"            if let Some(val) = val.get_mut(&self.0) {","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18153,"byte_end":18156,"line_start":454,"line_end":454,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":41,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `val` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:455:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(val) = val.get_mut(&self.0) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:454:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS.with_borrow_mut(|val| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`code` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18279,"byte_end":18283,"line_start":457,"line_end":457,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18045,"byte_end":18049,"line_start":453,"line_end":453,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn close(&self, code: Option<u16>, reason: Option<String>) -> Result<(), JsValue> {","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `code` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:457:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:453:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn close(&self, code: Option<u16>, reason: Option<String>) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`reason` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18291,"byte_end":18297,"line_start":457,"line_end":457,"column_start":39,"column_end":45,"is_primary":true,"text":[{"text":"                    (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),","highlight_start":39,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18064,"byte_end":18070,"line_start":453,"line_end":453,"column_start":44,"column_end":50,"is_primary":true,"text":[{"text":"    pub fn close(&self, code: Option<u16>, reason: Option<String>) -> Result<(), JsValue> {","highlight_start":44,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `reason` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:457:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (Some(code), Some(reason)) => val.socket.close_with_code_and_reason(code, &reason),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:453:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn close(&self, code: Option<u16>, reason: Option<String>) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`code` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18383,"byte_end":18387,"line_start":458,"line_end":458,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"                    (Some(code), None) => val.socket.close_with_code(code),","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18045,"byte_end":18049,"line_start":453,"line_end":453,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"    pub fn close(&self, code: Option<u16>, reason: Option<String>) -> Result<(), JsValue> {","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `code` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:458:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    (Some(code), None) => val.socket.close_with_code(code),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:453:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn close(&self, code: Option<u16>, reason: Option<String>) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"#[allow] attribute found","code":{"code":"clippy::allow_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18614,"byte_end":18619,"line_start":467,"line_end":467,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18614,"byte_end":18619,"line_start":467,"line_end":467,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"expect","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: #[allow] attribute found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:467:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `expect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used unwrap or expect in a function that returns result or option","code":{"code":"clippy::unwrap_in_result","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18712,"byte_end":21094,"line_start":468,"line_end":513,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {","highlight_start":5,"highlight_end":63},{"text":"        console_log!(&format!(\"Sending data: {:?}\", data));","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":1,"highlight_end":82},{"text":"            Some(v) => v,","highlight_start":1,"highlight_end":26},{"text":"            None => return Err(JsValue::from_str(\"Symmetric key not found\")),","highlight_start":1,"highlight_end":78},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut ws_exchange = WebSocketPayload {","highlight_start":1,"highlight_end":49},{"text":"            metadata: serde_json::to_value(&WebSocketMetadata {","highlight_start":1,"highlight_end":64},{"text":"                backend_url: self.0.to_string(),","highlight_start":1,"highlight_end":49},{"text":"            })","highlight_start":1,"highlight_end":15},{"text":"            .expect_throw(\"the value is json serializable\"),","highlight_start":1,"highlight_end":61},{"text":"            payload: None,","highlight_start":1,"highlight_end":27},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Types checked: string, Blob, ArrayBuffer, Uint8Array","highlight_start":1,"highlight_end":64},{"text":"        if data.is_string() {","highlight_start":1,"highlight_end":30},{"text":"            let encrypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;","highlight_start":1,"highlight_end":100},{"text":"            ws_exchange.payload = Some(base64_enc_dec.encode(&encrypted));","highlight_start":1,"highlight_end":75},{"text":"        } else if data.is_instance_of::<Blob>() {","highlight_start":1,"highlight_end":50},{"text":"            let data = {","highlight_start":1,"highlight_end":25},{"text":"                let reader = FileReaderSync::new().expect_throw(\"Failed to create FileReader\");","highlight_start":1,"highlight_end":96},{"text":"                let array = reader.read_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;","highlight_start":1,"highlight_end":118},{"text":"                Uint8Array::new(&array).to_vec()","highlight_start":1,"highlight_end":49},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            let encrypted = symmetric_key.symmetric_encrypt(&data)?;","highlight_start":1,"highlight_end":69},{"text":"            ws_exchange.payload = Some(base64_enc_dec.encode(&encrypted));","highlight_start":1,"highlight_end":75},{"text":"        } else if data.is_instance_of::<ArrayBuffer>() {","highlight_start":1,"highlight_end":57},{"text":"            let data = Uint8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\")).to_vec();","highlight_start":1,"highlight_end":116},{"text":"            let encrypted = symmetric_key.symmetric_encrypt(&data)?;","highlight_start":1,"highlight_end":69},{"text":"            ws_exchange.payload = Some(base64_enc_dec.encode(&encrypted));","highlight_start":1,"highlight_end":75},{"text":"        } else if data.is_instance_of::<Uint8Array>() {","highlight_start":1,"highlight_end":56},{"text":"            let data = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();","highlight_start":1,"highlight_end":97},{"text":"            let encrypted = symmetric_key.symmetric_encrypt(&data)?;","highlight_start":1,"highlight_end":69},{"text":"            ws_exchange.payload = Some(base64_enc_dec.encode(&encrypted));","highlight_start":1,"highlight_end":75},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return Err(JsValue::from_str(\"Unsupported data type\"));","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|v| {","highlight_start":1,"highlight_end":45},{"text":"            let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;","highlight_start":1,"highlight_end":90},{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":1,"highlight_end":112},{"text":"            ws.socket.send_with_u8_array(&data)","highlight_start":1,"highlight_end":48},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unwrap and expect should not be used in a function that returns result or option","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"potential non-recoverable error(s)","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":19461,"byte_end":19486,"line_start":486,"line_end":486,"column_start":61,"column_end":86,"is_primary":true,"text":[{"text":"            let encrypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;","highlight_start":61,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/websocket.rs","byte_start":19804,"byte_end":19861,"line_start":491,"line_end":491,"column_start":58,"column_end":115,"is_primary":true,"text":[{"text":"                let array = reader.read_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;","highlight_start":58,"highlight_end":115}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/websocket.rs","byte_start":20170,"byte_end":20234,"line_start":497,"line_end":497,"column_start":41,"column_end":105,"is_primary":true,"text":[{"text":"            let data = Uint8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\")).to_vec();","highlight_start":41,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/websocket.rs","byte_start":20469,"byte_end":20532,"line_start":501,"line_end":501,"column_start":24,"column_end":87,"is_primary":true,"text":[{"text":"            let data = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();","highlight_start":24,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::unwrap-in-result` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::unwrap_in_result)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used unwrap or expect in a function that returns result or option\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:468:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\"Sending data: {:?}\", data));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: unwrap and expect should not be used in a function that returns result or option\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: potential non-recoverable error(s)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:486:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0marray = reader.read_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = Uint8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\")).to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::unwrap-in-result` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::unwrap_in_result)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20791,"byte_end":21088,"line_start":508,"line_end":512,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS.with_borrow_mut(|v| {","highlight_start":9,"highlight_end":45},{"text":"            let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;","highlight_start":1,"highlight_end":90},{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":1,"highlight_end":112},{"text":"            ws.socket.send_with_u8_array(&data)","highlight_start":1,"highlight_end":48},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":20791,"byte_end":21088,"line_start":508,"line_end":512,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS.with_borrow_mut(|v| {","highlight_start":9,"highlight_end":45},{"text":"            let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;","highlight_start":1,"highlight_end":90},{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":1,"highlight_end":112},{"text":"            ws.socket.send_with_u8_array(&data)","highlight_start":1,"highlight_end":48},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"return LAYER8_SOCKETS.with_borrow_mut(|v| {\n            let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;\n            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;\n            ws.socket.send_with_u8_array(&data)\n        })","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:508:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   LAYER8_SOCKETS.with_borrow_mut(|v| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       ws.socket.send_with_u8_array(&data)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `return` as shown\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mreturn LAYER8_SOCKETS.with_borrow_mut(|v| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             ws.socket.send_with_u8_array(&data)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18793,"byte_end":18828,"line_start":469,"line_end":469,"column_start":23,"column_end":58,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Sending data: {:?}\", data));","highlight_start":23,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18817,"byte_end":18817,"line_start":469,"line_end":469,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Sending data: {:?}\", data));","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":"data","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":18821,"byte_end":18827,"line_start":469,"line_end":469,"column_start":51,"column_end":57,"is_primary":true,"text":[{"text":"        console_log!(&format!(\"Sending data: {:?}\", data));","highlight_start":51,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:469:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        console_log!(&format!(\"Sending data: {:?}\", data));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        console_log!(&format!(\"Sending data: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, data\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        console_log!(&format!(\"Sending data: {\u001b[0m\u001b[0m\u001b[38;5;10mdata\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant closure","code":{"code":"clippy::redundant_closure_for_method_calls","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18897,"byte_end":18910,"line_start":471,"line_end":471,"column_start":66,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":66,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace the closure with the method itself","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18897,"byte_end":18910,"line_start":471,"line_end":471,"column_start":66,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":66,"highlight_end":79}],"label":null,"suggested_replacement":"std::clone::Clone::clone","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant closure\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:471:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the closure with the method itself: `std::clone::Clone::clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18901,"byte_end":18910,"line_start":471,"line_end":471,"column_start":70,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":70,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":18901,"byte_end":18910,"line_start":471,"line_end":471,"column_start":70,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":70,"highlight_end":79}],"label":null,"suggested_replacement":"return v.clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:471:70\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return v.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18898,"byte_end":18899,"line_start":471,"line_end":471,"column_start":67,"column_end":68,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":67,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:471:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":18931,"byte_end":18932,"line_start":472,"line_end":472,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"            Some(v) => v,","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:472:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(v) => v,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string()` called on a `String`","code":{"code":"clippy::string_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19172,"byte_end":19190,"line_start":478,"line_end":478,"column_start":30,"column_end":48,"is_primary":true,"text":[{"text":"                backend_url: self.0.to_string(),","highlight_start":30,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `.clone()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string()` called on a `String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:478:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                backend_url: self.0.to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using `.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19429,"byte_end":19499,"line_start":486,"line_end":486,"column_start":29,"column_end":99,"is_primary":true,"text":[{"text":"            let encrypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;","highlight_start":29,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:486:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let encrypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on an `Option` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19461,"byte_end":19486,"line_start":486,"line_end":486,"column_start":61,"column_end":86,"is_primary":true,"text":[{"text":"            let encrypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;","highlight_start":61,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is `None`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on an `Option` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:486:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m486\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let encrypted = symmetric_key.symmetric_encrypt(data.as_string().unwrap().as_bytes())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is `None`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19775,"byte_end":19863,"line_start":491,"line_end":491,"column_start":29,"column_end":117,"is_primary":true,"text":[{"text":"                let array = reader.read_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;","highlight_start":29,"highlight_end":117}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:491:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = reader.read_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `expect()` on a `Result` value","code":{"code":"clippy::expect_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19804,"byte_end":19861,"line_start":491,"line_end":491,"column_start":58,"column_end":115,"is_primary":true,"text":[{"text":"                let array = reader.read_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;","highlight_start":58,"highlight_end":115}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::expect-used` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::expect_used)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `expect()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:491:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m_as_array_buffer(&data.dyn_into::<Blob>().expect(\"check already done; qed\"))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::expect-used` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::expect_used)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`data` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19642,"byte_end":19646,"line_start":489,"line_end":489,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let data = {","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18731,"byte_end":18735,"line_start":468,"line_end":468,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `data` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let data = {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:468:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":19957,"byte_end":19996,"line_start":494,"line_end":494,"column_start":29,"column_end":68,"is_primary":true,"text":[{"text":"            let encrypted = symmetric_key.symmetric_encrypt(&data)?;","highlight_start":29,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:494:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let encrypted = symmetric_key.symmetric_encrypt(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `expect()` on a `Result` value","code":{"code":"clippy::expect_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20170,"byte_end":20234,"line_start":497,"line_end":497,"column_start":41,"column_end":105,"is_primary":true,"text":[{"text":"            let data = Uint8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\")).to_vec();","highlight_start":41,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `expect()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:497:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mnt8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\")).to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`data` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20146,"byte_end":20150,"line_start":497,"line_end":497,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let data = Uint8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\")).to_vec();","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18731,"byte_end":18735,"line_start":468,"line_end":468,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `data` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:497:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let data = Uint8Array::new(&data.dyn_into::<ArrayBuffer>().expect(\"check already done; qed\"\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:468:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20274,"byte_end":20313,"line_start":498,"line_end":498,"column_start":29,"column_end":68,"is_primary":true,"text":[{"text":"            let encrypted = symmetric_key.symmetric_encrypt(&data)?;","highlight_start":29,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:498:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m498\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let encrypted = symmetric_key.symmetric_encrypt(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `expect()` on a `Result` value","code":{"code":"clippy::expect_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20469,"byte_end":20532,"line_start":501,"line_end":501,"column_start":24,"column_end":87,"is_primary":true,"text":[{"text":"            let data = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();","highlight_start":24,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `expect()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:501:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let data = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`data` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20462,"byte_end":20466,"line_start":501,"line_end":501,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let data = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18731,"byte_end":18735,"line_start":468,"line_end":468,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `data` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:501:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let data = data.dyn_into::<Uint8Array>().expect(\"check already done; qed\").to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:468:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20571,"byte_end":20610,"line_start":502,"line_end":502,"column_start":29,"column_end":68,"is_primary":true,"text":[{"text":"            let encrypted = symmetric_key.symmetric_encrypt(&data)?;","highlight_start":29,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:502:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let encrypted = symmetric_key.symmetric_encrypt(&data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21042,"byte_end":21077,"line_start":511,"line_end":511,"column_start":13,"column_end":48,"is_primary":true,"text":[{"text":"            ws.socket.send_with_u8_array(&data)","highlight_start":13,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":21042,"byte_end":21077,"line_start":511,"line_end":511,"column_start":13,"column_end":48,"is_primary":true,"text":[{"text":"            ws.socket.send_with_u8_array(&data)","highlight_start":13,"highlight_end":48}],"label":null,"suggested_replacement":"return ws.socket.send_with_u8_array(&data)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:511:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ws.socket.send_with_u8_array(&data)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return ws.socket.send_with_u8_array(&data)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20823,"byte_end":20824,"line_start":508,"line_end":508,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"        LAYER8_SOCKETS.with_borrow_mut(|v| {","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:508:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LAYER8_SOCKETS.with_borrow_mut(|v| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20849,"byte_end":20916,"line_start":509,"line_end":509,"column_start":22,"column_end":89,"is_primary":true,"text":[{"text":"            let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;","highlight_start":22,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:509:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ws = v.get_mut(&rebuild_url(self.0.as_str())).ok_or(\"Socket not found\")?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20941,"byte_end":21028,"line_start":510,"line_end":510,"column_start":24,"column_end":111,"is_primary":true,"text":[{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":24,"highlight_end":111}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:510:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21013,"byte_end":21026,"line_start":510,"line_end":510,"column_start":96,"column_end":109,"is_primary":true,"text":[{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":96,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":21013,"byte_end":21026,"line_start":510,"line_end":510,"column_start":96,"column_end":109,"is_primary":true,"text":[{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":96,"highlight_end":109}],"label":null,"suggested_replacement":"return e.to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:510:96\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m).map_err(|e| e.to_string())?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return e.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21010,"byte_end":21011,"line_start":510,"line_end":510,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:510:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_str\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`data` shadows a previous, unrelated binding","code":{"code":"clippy::shadow_unrelated","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":20934,"byte_end":20938,"line_start":510,"line_end":510,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_string())?;","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":18731,"byte_end":18735,"line_start":468,"line_end":468,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `data` shadows a previous, unrelated binding\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:510:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let data = serde_json::to_vec(&Layer8Envelope::WebSocket(ws_exchange)).map_err(|e| e.to_str\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:468:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn send(&self, data: JsValue) -> Result<(), JsValue> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":23612,"byte_end":23664,"line_start":573,"line_end":573,"column_start":5,"column_end":57,"is_primary":true,"text":[{"text":"    decrypt_callback.into_js_value().dyn_into().unwrap()","highlight_start":5,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":23612,"byte_end":23664,"line_start":573,"line_end":573,"column_start":5,"column_end":57,"is_primary":true,"text":[{"text":"    decrypt_callback.into_js_value().dyn_into().unwrap()","highlight_start":5,"highlight_end":57}],"label":null,"suggested_replacement":"return decrypt_callback.into_js_value().dyn_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:573:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    decrypt_callback.into_js_value().dyn_into().unwrap()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return decrypt_callback.into_js_value().dyn_into().unwrap()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using a potentially dangerous silent `as` conversion","code":{"code":"clippy::as_conversions","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21283,"byte_end":23604,"line_start":518,"line_end":571,"column_start":42,"column_end":39,"is_primary":true,"text":[{"text":"    let decrypt_callback = Closure::wrap(Box::new(move |message: MessageEvent| {","highlight_start":42,"highlight_end":81},{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":1,"highlight_end":82},{"text":"            Some(v) => v,","highlight_start":1,"highlight_end":26},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                console_log!(\"Symmetric key not found\");","highlight_start":1,"highlight_end":57},{"text":"                return;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data: JsValue = {","highlight_start":1,"highlight_end":30},{"text":"            let payload = {","highlight_start":1,"highlight_end":28},{"text":"                console_log!(&format!(\"Inbound data: {:?}\", &message.data()));","highlight_start":1,"highlight_end":79},{"text":"                let msg = message.data().as_string().expect_throw(\"expected the message to be a string\");","highlight_start":1,"highlight_end":106},{"text":"                let envelope = Layer8Envelope::from_json_bytes(msg.as_bytes()).expect_throw(&format!(","highlight_start":1,"highlight_end":102},{"text":"                    \"Failed to parse inbound message: {}\",","highlight_start":1,"highlight_end":59},{"text":"                    message.data().as_string().expect_throw(\"expected the message frame to be a string\")","highlight_start":1,"highlight_end":105},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // we expect a websocket payload","highlight_start":1,"highlight_end":49},{"text":"                match envelope {","highlight_start":1,"highlight_end":33},{"text":"                    Layer8Envelope::WebSocket(ws_payload) => ws_payload.payload,","highlight_start":1,"highlight_end":81},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        console_log!(\"Expected a WebSocket payload\");","highlight_start":1,"highlight_end":70},{"text":"                        return;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let slice = symmetric_key","highlight_start":1,"highlight_end":38},{"text":"                .symmetric_decrypt(","highlight_start":1,"highlight_end":36},{"text":"                    &base64_enc_dec","highlight_start":1,"highlight_end":36},{"text":"                        .decode(payload.expect_throw(\"we expect there to be a payload in the response\"))","highlight_start":1,"highlight_end":105},{"text":"                        .expect_throw(\"Failed to decode base64 payload\"),","highlight_start":1,"highlight_end":74},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                .expect_throw(\"Failed to decrypt the message; this is a bug in the code, please report it to the developers\");","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // we assume we are dealing with a string, here for now; todo!","highlight_start":1,"highlight_end":75},{"text":"            JsValue::from_str(&String::from_utf8_lossy(&slice))","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Uint8Array::from(slice.as_slice()).into()","highlight_start":1,"highlight_end":57},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let msg_event = {","highlight_start":1,"highlight_end":26},{"text":"            let msg_init = MessageEventInit::new();","highlight_start":1,"highlight_end":52},{"text":"            msg_init.set_data(&data);","highlight_start":1,"highlight_end":38},{"text":"            MessageEvent::new_with_event_init_dict(\"message\", &msg_init).expect_throw(\"Failed to create MessageEventInit\")","highlight_start":1,"highlight_end":123},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Some(pipeline) = pipeline.as_ref() {","highlight_start":1,"highlight_end":52},{"text":"            if let Err(_err) = pipeline.call1(&JsValue::NULL, &msg_event) {","highlight_start":1,"highlight_end":76},{"text":"                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }) as Box<dyn FnMut(MessageEvent)>);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a safe wrapper for this conversion","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using a potentially dangerous silent `as` conversion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:518:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let decrypt_callback = Closure::wrap(Box::new(move |message: MessageEvent| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m__________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(v) => v,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            None => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m571\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }) as Box<dyn FnMut(MessageEvent)>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a safe wrapper for this conversion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match_else","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21351,"byte_end":21557,"line_start":519,"line_end":525,"column_start":29,"column_end":10,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":29,"highlight_end":82},{"text":"            Some(v) => v,","highlight_start":1,"highlight_end":26},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                console_log!(\"Symmetric key not found\");","highlight_start":1,"highlight_end":57},{"text":"                return;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::single-match-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::single_match_else)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":21351,"byte_end":21557,"line_start":519,"line_end":525,"column_start":29,"column_end":10,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":29,"highlight_end":82},{"text":"            Some(v) => v,","highlight_start":1,"highlight_end":26},{"text":"            None => {","highlight_start":1,"highlight_end":22},{"text":"                console_log!(\"Symmetric key not found\");","highlight_start":1,"highlight_end":57},{"text":"                return;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if let Some(v) = USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) { v } else {\n            console_log!(\"Symmetric key not found\");\n            return;\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:519:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(v) => v,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            None => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                console_log!(\"Symmetric key not found\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m525\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::single-match-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::single_match_else)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        let symmetric_key = \u001b[0m\u001b[0m\u001b[38;5;10mif let Some(v) = USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) { v } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             console_log!(\"Symmetric key not found\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             return;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~         }\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant closure","code":{"code":"clippy::redundant_closure_for_method_calls","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21388,"byte_end":21401,"line_start":519,"line_end":519,"column_start":66,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":66,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace the closure with the method itself","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":21388,"byte_end":21401,"line_start":519,"line_end":519,"column_start":66,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":66,"highlight_end":79}],"label":null,"suggested_replacement":"std::clone::Clone::clone","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant closure\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:519:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the closure with the method itself: `std::clone::Clone::clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing `return` statement","code":{"code":"clippy::implicit_return","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21392,"byte_end":21401,"line_start":519,"line_end":519,"column_start":70,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":70,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `return` as shown","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":21392,"byte_end":21401,"line_start":519,"line_end":519,"column_start":70,"column_end":79,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":70,"highlight_end":79}],"label":null,"suggested_replacement":"return v.clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:519:70\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add `return` as shown: `return v.clone()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21389,"byte_end":21390,"line_start":519,"line_end":519,"column_start":67,"column_end":68,"is_primary":true,"text":[{"text":"        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {","highlight_start":67,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:519:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let symmetric_key = match USER_SYMMETRIC_KEY.with_borrow(|v| v.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this ident consists of a single char","code":{"code":"clippy::min_ident_chars","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":21422,"byte_end":21423,"line_start":520,"line_end":520,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"            Some(v) => v,","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this ident consists of a single char\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:520:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(v) => v,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match_else","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":22155,"byte_end":22421,"line_start":537,"line_end":543,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                match envelope {","highlight_start":17,"highlight_end":33},{"text":"                    Layer8Envelope::WebSocket(ws_payload) => ws_payload.payload,","highlight_start":1,"highlight_end":81},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        console_log!(\"Expected a WebSocket payload\");","highlight_start":1,"highlight_end":70},{"text":"                        return;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":22155,"byte_end":22421,"line_start":537,"line_end":543,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                match envelope {","highlight_start":17,"highlight_end":33},{"text":"                    Layer8Envelope::WebSocket(ws_payload) => ws_payload.payload,","highlight_start":1,"highlight_end":81},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        console_log!(\"Expected a WebSocket payload\");","highlight_start":1,"highlight_end":70},{"text":"                        return;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"if let Layer8Envelope::WebSocket(ws_payload) = envelope { ws_payload.payload } else {\n                    console_log!(\"Expected a WebSocket payload\");\n                    return;\n                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:537:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match envelope {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Layer8Envelope::WebSocket(ws_payload) => ws_payload.payload,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        console_log!(\"Expected a WebSocket payload\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        return;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mif let Layer8Envelope::WebSocket(ws_payload) = envelope { ws_payload.payload } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     console_log!(\"Expected a WebSocket payload\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     return;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"wildcard match will also match any future added variants","code":{"code":"clippy::wildcard_enum_match_arm","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":22273,"byte_end":22274,"line_start":539,"line_end":539,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    _ => {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":22273,"byte_end":22274,"line_start":539,"line_end":539,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    _ => {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"Layer8Envelope::Http(_) | Layer8Envelope::Raw(_)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: wildcard match will also match any future added variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:539:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    _ => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `Layer8Envelope::Http(_) | Layer8Envelope::Raw(_)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`pipeline` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":23353,"byte_end":23361,"line_start":566,"line_end":566,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"        if let Some(pipeline) = pipeline.as_ref() {","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":21200,"byte_end":21208,"line_start":517,"line_end":517,"column_start":26,"column_end":34,"is_primary":true,"text":[{"text":"fn preprocess_on_message(pipeline: Option<Function>) -> Function {","highlight_start":26,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `pipeline` is shadowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:566:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(pipeline) = pipeline.as_ref() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:517:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn preprocess_on_message(pipeline: Option<Function>) -> Function {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":23493,"byte_end":23539,"line_start":568,"line_end":568,"column_start":33,"column_end":79,"is_primary":true,"text":[{"text":"                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));","highlight_start":33,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/websocket.rs","byte_start":23528,"byte_end":23528,"line_start":568,"line_end":568,"column_start":68,"column_end":68,"is_primary":true,"text":[{"text":"                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));","highlight_start":68,"highlight_end":68}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/websocket.rs","byte_start":23532,"byte_end":23538,"line_start":568,"line_end":568,"column_start":72,"column_end":78,"is_primary":true,"text":[{"text":"                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));","highlight_start":72,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:568:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                console_error!(&format!(\"Failed to call pipeline: {:?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, _err\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                console_error!(&format!(\"Failed to call pipeline: {\u001b[0m\u001b[0m\u001b[38;5;10m_err\u001b[0m\u001b[0m:?}\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_err` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":23534,"byte_end":23538,"line_start":568,"line_end":568,"column_start":74,"column_end":78,"is_primary":true,"text":[{"text":"                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));","highlight_start":74,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_err` is defined here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":23408,"byte_end":23412,"line_start":567,"line_end":567,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"            if let Err(_err) = pipeline.call1(&JsValue::NULL, &msg_event) {","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_err` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:568:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                console_error!(&format!(\"Failed to call pipeline: {:?}\", _err));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_err` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:567:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Err(_err) = pipeline.call1(&JsValue::NULL, &msg_event) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used `unwrap()` on a `Result` value","code":{"code":"clippy::unwrap_used","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":23612,"byte_end":23664,"line_start":573,"line_end":573,"column_start":5,"column_end":57,"is_primary":true,"text":[{"text":"    decrypt_callback.into_js_value().dyn_into().unwrap()","highlight_start":5,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this value is an `Err`, it will panic","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `unwrap()` on a `Result` value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:573:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    decrypt_callback.into_js_value().dyn_into().unwrap()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if this value is an `Err`, it will panic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a module","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":62,"byte_end":85,"line_start":5,"line_end":5,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"pub(crate) mod js_glue;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a module\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:5:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod js_glue;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a module","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/js_glue/mod.rs","byte_start":0,"byte_end":19,"line_start":1,"line_end":1,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub mod js_imports;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a module\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/mod.rs:1:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod js_imports;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a module","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":86,"byte_end":107,"line_start":6,"line_end":6,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub(crate) mod types;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a module\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod types;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used import from `std` instead of `core`","code":{"code":"clippy::std_instead_of_core","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4,"byte_end":7,"line_start":1,"line_end":1,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::cell::Cell;","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing the item from `core`","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":4,"byte_end":7,"line_start":1,"line_end":1,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"use std::cell::Cell;","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"core","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used import from `std` instead of `core`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::cell::Cell;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider importing the item from `core`: `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"pub(crate) constant inside private module","code":{"code":"clippy::redundant_pub_crate","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":431,"byte_end":3817548,"line_start":11,"line_end":106,"column_start":42,"column_end":22,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ranv/.rustup/toolchains/1.81.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs","byte_start":7681,"byte_end":7770,"line_start":190,"line_end":190,"column_start":9,"column_end":98,"is_primary":false,"text":[{"text":"        $crate::thread::local_impl::thread_local_inner!($(#[$attr])* $vis $name, $t, const $init);","highlight_start":9,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":258,"byte_end":471,"line_start":9,"line_end":12,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"thread_local! {","highlight_start":1,"highlight_end":16},{"text":"    /// We are using a default asset size limit ot 50MB. This value can be overridden by the initialization config.","highlight_start":1,"highlight_end":116},{"text":"    pub(crate) static CACHE_STORAGE_LIMIT: Cell<u32> = const { Cell::new(50) };","highlight_start":1,"highlight_end":80},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"thread_local!","def_site_span":{"file_name":"/home/ranv/.rustup/toolchains/1.81.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs","byte_start":7489,"byte_end":7514,"line_start":185,"line_end":185,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! thread_local {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::thread::local_impl::thread_local_inner!","def_site_span":{"file_name":"/home/ranv/.rustup/toolchains/1.81.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/thread_local/native/mod.rs","byte_start":2006,"byte_end":2034,"line_start":48,"line_end":48,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub macro thread_local_inner {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::redundant-pub-crate` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::redundant_pub_crate)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: pub(crate) constant inside private module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:11:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m  \u001b[0m\u001b[0mthread_local! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    /// We are using a default asset size limit ot 50MB. This value can be overridden by the i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    pub(crate) static CACHE_STORAGE_LIMIT: Cell<u32> = const { Cell::new(50) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m__________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m_|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// This type represents the configuration object that is passed to the `init` function.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::redundant-pub-crate` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::redundant_pub_crate)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"pub(crate) struct inside private module","code":{"code":"clippy::redundant_pub_crate","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1248,"byte_end":1276,"line_start":32,"line_end":32,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"pub(crate) struct InitConfig {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":1248,"byte_end":1258,"line_start":32,"line_end":32,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"pub(crate) struct InitConfig {","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":"pub","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: pub(crate) struct inside private module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:32:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) struct InitConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider using: `pub`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1283,"byte_end":1307,"line_start":33,"line_end":33,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    pub(crate) proxy: String,","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:33:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) proxy: String,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1313,"byte_end":1349,"line_start":34,"line_end":34,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"    pub(crate) static_paths: Vec<String>,","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) static_paths: Vec<String>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1355,"byte_end":1388,"line_start":35,"line_end":35,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    pub(crate) providers: Vec<String>,","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) providers: Vec<String>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for an associated function","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1415,"byte_end":5208,"line_start":39,"line_end":121,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":5,"highlight_end":69},{"text":"        let mut init_config = InitConfig::default();","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let entries = js_imports::object_entries(&obj);","highlight_start":1,"highlight_end":56},{"text":"        for entry in entries.iter() {","highlight_start":1,"highlight_end":38},{"text":"            let val = js_sys::Array::from(&entry); // [key, value] result from Object.entries","highlight_start":1,"highlight_end":94},{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":1,"highlight_end":111},{"text":"                \"providers\" => {","highlight_start":1,"highlight_end":33},{"text":"                    if !val.get(1).is_instance_of::<js_sys::Array>() {","highlight_start":1,"highlight_end":71},{"text":"                        return Err(JsError::new(\"expected `InitConfig.providers` value to be an array\"));","highlight_start":1,"highlight_end":106},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    for provider in js_sys::Array::from(&val.get(1)).iter() {","highlight_start":1,"highlight_end":78},{"text":"                        init_config.providers.push(","highlight_start":1,"highlight_end":52},{"text":"                            provider","highlight_start":1,"highlight_end":37},{"text":"                                .as_string()","highlight_start":1,"highlight_end":45},{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":1,"highlight_end":110},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"proxy\" => {","highlight_start":1,"highlight_end":29},{"text":"                    init_config.proxy = val","highlight_start":1,"highlight_end":44},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":1,"highlight_end":99},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"staticPath\" => {","highlight_start":1,"highlight_end":34},{"text":"                    let path = val","highlight_start":1,"highlight_end":35},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;","highlight_start":1,"highlight_end":104},{"text":"                    init_config.static_paths.push(path);","highlight_start":1,"highlight_end":57},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"staticPaths\" => {","highlight_start":1,"highlight_end":35},{"text":"                    // paths is a list of strings","highlight_start":1,"highlight_end":50},{"text":"                    if !val.get(1).is_instance_of::<js_sys::Array>() {","highlight_start":1,"highlight_end":71},{"text":"                        return Err(JsError::new(\"expected `InitConfig.staticPaths` value to be an array\"));","highlight_start":1,"highlight_end":108},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    for path in js_sys::Array::from(&val.get(1)).iter() {","highlight_start":1,"highlight_end":74},{"text":"                        let value = path","highlight_start":1,"highlight_end":41},{"text":"                            .as_string()","highlight_start":1,"highlight_end":41},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;","highlight_start":1,"highlight_end":109},{"text":"                        init_config.static_paths.push(value);","highlight_start":1,"highlight_end":62},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"cacheAssetLimit\" => {","highlight_start":1,"highlight_end":39},{"text":"                    // if we can't get the storage estimate, we rely on the default value","highlight_start":1,"highlight_end":90},{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":1,"highlight_end":65},{"text":"                    if let Ok(estimate) = estimate {","highlight_start":1,"highlight_end":53},{"text":"                        let mut val = val","highlight_start":1,"highlight_end":42},{"text":"                            .get(1)","highlight_start":1,"highlight_end":36},{"text":"                            .as_f64()","highlight_start":1,"highlight_end":38},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let estimate = estimate.as_f64().expect_throw(\"expected storage estimate to be a number\");","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        if val > estimate {","highlight_start":1,"highlight_end":44},{"text":"                            // we are going with half the estimate","highlight_start":1,"highlight_end":67},{"text":"                            // estimates are usually [very large]<https://developer.mozilla.org/en-US/play?id=qHEOFcbSol%2Bevp8cXcV4AHeiMNC9eg1hPfouaBm%2Fdv3CX6MmH3pAqbE018v9o2C0XOIUTTJe%2BTlzxxbC>","highlight_start":1,"highlight_end":198},{"text":"                            val = estimate * 0.5;","highlight_start":1,"highlight_end":50},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));","highlight_start":1,"highlight_end":81},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    // we rather pipe the issues now than have them silently ignored","highlight_start":1,"highlight_end":85},{"text":"                    return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":54},{"text":"                        \"unexpected key in `InitConfig`: {}\",","highlight_start":1,"highlight_end":62},{"text":"                        val.get(0).as_string().expect_throw(\"expected object key to be a string\")","highlight_start":1,"highlight_end":98},{"text":"                    )));","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(init_config)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for an associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:39:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut init_config = InitConfig::default();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entries = js_imports::object_entries(&obj);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(init_config)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":{"code":"clippy::future_not_send","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1415,"byte_end":1477,"line_start":39,"line_end":39,"column_start":5,"column_end":67,"is_primary":true,"text":[{"text":"    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":5,"highlight_end":67}],"label":"future returned by `new` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":1415,"byte_end":1477,"line_start":39,"line_end":39,"column_start":5,"column_end":67,"is_primary":false,"text":[{"text":"    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":5,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":3875,"byte_end":3880,"line_start":91,"line_end":91,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":59,"highlight_end":64}],"label":"await occurs here, with `entry` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":3875,"byte_end":3880,"line_start":91,"line_end":91,"column_start":59,"column_end":64,"is_primary":false,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/types.rs","byte_start":1602,"byte_end":1607,"line_start":43,"line_end":43,"column_start":13,"column_end":18,"is_primary":false,"text":[{"text":"        for entry in entries.iter() {","highlight_start":13,"highlight_end":18}],"label":"has type `wasm_bindgen::JsValue` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as it awaits another future which is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/js_glue/js_imports.rs","byte_start":892,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":60,"is_primary":true,"text":[{"text":"#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]","highlight_start":1,"highlight_end":60}],"label":"await occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/js_glue/js_imports.rs","byte_start":892,"byte_end":951,"line_start":28,"line_end":28,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[wasm_bindgen]","def_site_span":{"file_name":"/home/ranv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasm-bindgen-macro-0.2.100/src/lib.rs","byte_start":294,"byte_end":367,"line_start":10,"line_end":10,"column_start":1,"column_end":74,"is_primary":false,"text":[{"text":"pub fn wasm_bindgen(attr: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":3875,"byte_end":3880,"line_start":91,"line_end":91,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":59,"highlight_end":64}],"label":"await occurs here, with `entries.iter()` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":3875,"byte_end":3880,"line_start":91,"line_end":91,"column_start":59,"column_end":64,"is_primary":false,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/types.rs","byte_start":1611,"byte_end":1625,"line_start":43,"line_end":43,"column_start":22,"column_end":36,"is_primary":false,"text":[{"text":"        for entry in entries.iter() {","highlight_start":22,"highlight_end":36}],"label":"has type `js_sys::ArrayIter<'_>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/types.rs","byte_start":1611,"byte_end":1625,"line_start":43,"line_end":43,"column_start":22,"column_end":36,"is_primary":false,"text":[{"text":"        for entry in entries.iter() {","highlight_start":22,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`*mut u8` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mfuture returned by `new` is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:91:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for entry in entries.iter() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `wasm_bindgen::JsValue` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let estimate = get_storage_estimate().await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `entry` maybe used later\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as it awaits another future which is not `Send`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js_glue/js_imports.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[wasm_bindgen(module = \"/src/js_glue/glue_indexed_db.js\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here on type `wasm_bindgen_futures::JsFuture`, which is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `std::rc::Rc<std::cell::RefCell<wasm_bindgen_futures::Inner>>` doesn't implement `std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:91:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for entry in entries.iter() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `js_sys::ArrayIter<'_>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let estimate = get_storage_estimate().await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `entries.iter()` maybe used later\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `*mut u8` doesn't implement `std::marker::Sync`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"default numeric fallback might occur","code":{"code":"clippy::default_numeric_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4635,"byte_end":4638,"line_start":103,"line_end":103,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                            val = estimate * 0.5;","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider adding suffix","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":4635,"byte_end":4638,"line_start":103,"line_end":103,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                            val = estimate * 0.5;","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"0.5_f64","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: default numeric fallback might occur\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:103:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   val = estimate * 0.5;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider adding suffix: `0.5_f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary structure name repetition","code":{"code":"clippy::use_self","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1510,"byte_end":1520,"line_start":40,"line_end":40,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        let mut init_config = InitConfig::default();","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the applicable keyword","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":1510,"byte_end":1520,"line_start":40,"line_end":40,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        let mut init_config = InitConfig::default();","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary structure name repetition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:40:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut init_config = InitConfig::default();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use the applicable keyword: `Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1740,"byte_end":1821,"line_start":45,"line_end":45,"column_start":19,"column_end":100,"is_primary":true,"text":[{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":19,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:45:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1763,"byte_end":1820,"line_start":45,"line_end":45,"column_start":42,"column_end":99,"is_primary":true,"text":[{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":42,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":1763,"byte_end":1820,"line_start":45,"line_end":45,"column_start":42,"column_end":99,"is_primary":true,"text":[{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":42,"highlight_end":99}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected object key to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:45:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected object key to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2168,"byte_end":2413,"line_start":52,"line_end":56,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        init_config.providers.push(","highlight_start":25,"highlight_end":52},{"text":"                            provider","highlight_start":1,"highlight_end":37},{"text":"                                .as_string()","highlight_start":1,"highlight_end":45},{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":1,"highlight_end":110},{"text":"                        )","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":2168,"byte_end":2413,"line_start":52,"line_end":56,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        init_config.providers.push(","highlight_start":25,"highlight_end":52},{"text":"                            provider","highlight_start":1,"highlight_end":37},{"text":"                                .as_string()","highlight_start":1,"highlight_end":45},{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":1,"highlight_end":110},{"text":"                        )","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"init_config.providers.push(\n                            provider\n                                .as_string()\n                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,\n                        );","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:52:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   init_config.providers.push(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       provider\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m           .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m           .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   )\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add a `;` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10minit_config.providers.push(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             provider\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         );\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2224,"byte_end":2386,"line_start":53,"line_end":55,"column_start":29,"column_end":109,"is_primary":true,"text":[{"text":"                            provider","highlight_start":29,"highlight_end":37},{"text":"                                .as_string()","highlight_start":1,"highlight_end":45},{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":1,"highlight_end":109}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:53:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   provider\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2311,"byte_end":2385,"line_start":55,"line_end":55,"column_start":34,"column_end":108,"is_primary":true,"text":[{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":34,"highlight_end":108}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":2311,"byte_end":2385,"line_start":55,"line_end":55,"column_start":34,"column_end":108,"is_primary":true,"text":[{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":34,"highlight_end":108}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.provider` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:55:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.provider` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2524,"byte_end":2694,"line_start":61,"line_end":64,"column_start":41,"column_end":98,"is_primary":true,"text":[{"text":"                    init_config.proxy = val","highlight_start":41,"highlight_end":44},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":1,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:61:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    init_config.proxy = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .get(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2622,"byte_end":2693,"line_start":64,"line_end":64,"column_start":26,"column_end":97,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":26,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":2622,"byte_end":2693,"line_start":64,"line_end":64,"column_start":26,"column_end":97,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":26,"highlight_end":97}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.proxy` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:64:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.proxy` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2780,"byte_end":2955,"line_start":68,"line_end":71,"column_start":32,"column_end":103,"is_primary":true,"text":[{"text":"                    let path = val","highlight_start":32,"highlight_end":35},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;","highlight_start":1,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:68:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let path = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m__________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .get(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":2878,"byte_end":2954,"line_start":71,"line_end":71,"column_start":26,"column_end":102,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;","highlight_start":26,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":2878,"byte_end":2954,"line_start":71,"line_end":71,"column_start":26,"column_end":102,"is_primary":true,"text":[{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;","highlight_start":26,"highlight_end":102}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:71:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m      .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":3430,"byte_end":3583,"line_start":82,"line_end":84,"column_start":37,"column_end":108,"is_primary":true,"text":[{"text":"                        let value = path","highlight_start":37,"highlight_end":41},{"text":"                            .as_string()","highlight_start":1,"highlight_end":41},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;","highlight_start":1,"highlight_end":108}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:82:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let value = path\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m___________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .as_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":3505,"byte_end":3582,"line_start":84,"line_end":84,"column_start":30,"column_end":107,"is_primary":true,"text":[{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;","highlight_start":30,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":3505,"byte_end":3582,"line_start":84,"line_end":84,"column_start":30,"column_end":107,"is_primary":true,"text":[{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;","highlight_start":30,"highlight_end":107}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:84:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m      .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`estimate` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":3912,"byte_end":3920,"line_start":92,"line_end":92,"column_start":31,"column_end":39,"is_primary":true,"text":[{"text":"                    if let Ok(estimate) = estimate {","highlight_start":31,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":3841,"byte_end":3849,"line_start":91,"line_end":91,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `estimate` is shadowed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:92:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if let Ok(estimate) = estimate {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:91:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let estimate = get_storage_estimate().await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"question mark operator was used","code":{"code":"clippy::question_mark_used","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":3973,"byte_end":4162,"line_start":93,"line_end":96,"column_start":39,"column_end":112,"is_primary":true,"text":[{"text":"                        let mut val = val","highlight_start":39,"highlight_end":42},{"text":"                            .get(1)","highlight_start":1,"highlight_end":36},{"text":"                            .as_f64()","highlight_start":1,"highlight_end":38},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;","highlight_start":1,"highlight_end":112}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a custom macro or match expression","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: question mark operator was used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:93:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let mut val = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .get(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .as_f64()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________________________________________________________________________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a custom macro or match expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `ok_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4080,"byte_end":4161,"line_start":96,"line_end":96,"column_start":30,"column_end":111,"is_primary":true,"text":[{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;","highlight_start":30,"highlight_end":111}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":4080,"byte_end":4161,"line_start":96,"line_end":96,"column_start":30,"column_end":111,"is_primary":true,"text":[{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;","highlight_start":30,"highlight_end":111}],"label":null,"suggested_replacement":"ok_or_else(|| JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `ok_or` followed by a function call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:96:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `ok_or_else(|| JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`mut val` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":3967,"byte_end":3970,"line_start":93,"line_end":93,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"                        let mut val = val","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":1644,"byte_end":1647,"line_start":44,"line_end":44,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let val = js_sys::Array::from(&entry); // [key, value] result from Object.entries","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `mut val` is shadowed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:93:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let mut val = val\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:44:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let val = js_sys::Array::from(&entry); // [key, value] result from Object.entries\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`estimate` is shadowed","code":{"code":"clippy::shadow_reuse","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4193,"byte_end":4201,"line_start":98,"line_end":98,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                        let estimate = estimate.as_f64().expect_throw(\"expected storage estimate to be a number\");","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous binding is here","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":3912,"byte_end":3920,"line_start":92,"line_end":92,"column_start":31,"column_end":39,"is_primary":true,"text":[{"text":"                    if let Ok(estimate) = estimate {","highlight_start":31,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `estimate` is shadowed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:98:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let estimate = estimate.as_f64().expect_throw(\"expected storage estimate to be a number\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previous binding is here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:92:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if let Ok(estimate) = estimate {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"floating-point arithmetic detected","code":{"code":"clippy::float_arithmetic","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4624,"byte_end":4638,"line_start":103,"line_end":103,"column_start":35,"column_end":49,"is_primary":true,"text":[{"text":"                            val = estimate * 0.5;","highlight_start":35,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::float-arithmetic` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::float_arithmetic)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: floating-point arithmetic detected\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:103:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   val = estimate * 0.5;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::float-arithmetic` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::float_arithmetic)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"casting `f64` to `u32` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4734,"byte_end":4744,"line_start":106,"line_end":106,"column_start":68,"column_end":78,"is_primary":true,"text":[{"text":"                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));","highlight_start":68,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `u32` may truncate the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:106:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"casting `f64` to `u32` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4734,"byte_end":4744,"line_start":106,"line_end":106,"column_start":68,"column_end":78,"is_primary":true,"text":[{"text":"                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));","highlight_start":68,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::cast_sign_loss)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `u32` may lose the sign of the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:106:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::cast_sign_loss)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"using a potentially dangerous silent `as` conversion","code":{"code":"clippy::as_conversions","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":4734,"byte_end":4744,"line_start":106,"line_end":106,"column_start":68,"column_end":78,"is_primary":true,"text":[{"text":"                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));","highlight_start":68,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using a safe wrapper for this conversion","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using a potentially dangerous silent `as` conversion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:106:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider using a safe wrapper for this conversion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5264,"byte_end":5361,"line_start":126,"line_end":130,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct DbCache {","highlight_start":1,"highlight_end":21},{"text":"    pub store: String,","highlight_start":1,"highlight_end":23},{"text":"    pub key_path: String,","highlight_start":1,"highlight_end":26},{"text":"    pub indexes: Indexes,","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:126:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct DbCache {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub store: String,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub key_path: String,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub indexes: Indexes,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5289,"byte_end":5306,"line_start":127,"line_end":127,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    pub store: String,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub store: String,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5312,"byte_end":5332,"line_start":128,"line_end":128,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub key_path: String,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:128:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub key_path: String,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5338,"byte_end":5358,"line_start":129,"line_end":129,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub indexes: Indexes,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:129:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub indexes: Indexes,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5439,"byte_end":5565,"line_start":134,"line_end":139,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct Indexes {","highlight_start":1,"highlight_end":21},{"text":"    pub url: Uniqueness,","highlight_start":1,"highlight_end":25},{"text":"    pub _exp: Uniqueness,","highlight_start":1,"highlight_end":26},{"text":"    pub body: Uniqueness,","highlight_start":1,"highlight_end":26},{"text":"    pub _type: Uniqueness,","highlight_start":1,"highlight_end":27},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:134:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Indexes {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub url: Uniqueness,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _exp: Uniqueness,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub body: Uniqueness,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _type: Uniqueness,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field marked as public but also inferred as unused because it's prefixed with `_`","code":{"code":"clippy::pub_underscore_fields","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5489,"byte_end":5497,"line_start":136,"line_end":136,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    pub _exp: Uniqueness,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the underscore, or making the field private","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::pub-underscore-fields` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::pub_underscore_fields)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field marked as public but also inferred as unused because it's prefixed with `_`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:136:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _exp: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing the underscore, or making the field private\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::pub-underscore-fields` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::pub_underscore_fields)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field marked as public but also inferred as unused because it's prefixed with `_`","code":{"code":"clippy::pub_underscore_fields","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5541,"byte_end":5550,"line_start":138,"line_end":138,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    pub _type: Uniqueness,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the underscore, or making the field private","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field marked as public but also inferred as unused because it's prefixed with `_`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:138:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _type: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing the underscore, or making the field private\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5464,"byte_end":5483,"line_start":135,"line_end":135,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    pub url: Uniqueness,","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:135:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub url: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5489,"byte_end":5509,"line_start":136,"line_end":136,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub _exp: Uniqueness,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:136:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _exp: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5515,"byte_end":5535,"line_start":137,"line_end":137,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub body: Uniqueness,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:137:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub body: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5541,"byte_end":5562,"line_start":138,"line_end":138,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    pub _type: Uniqueness,","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:138:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _type: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_exp` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5493,"byte_end":5497,"line_start":136,"line_end":136,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    pub _exp: Uniqueness,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_exp` is defined here","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":5489,"byte_end":5509,"line_start":136,"line_end":136,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub _exp: Uniqueness,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_exp` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:136:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _exp: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_exp` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:136:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _exp: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"used binding `_type` which is prefixed with an underscore. A leading underscore signals that a binding will not be used","code":{"code":"clippy::used_underscore_binding","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5545,"byte_end":5550,"line_start":138,"line_end":138,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    pub _type: Uniqueness,","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`_type` is defined here","code":null,"level":"note","spans":[{"file_name":"src/types.rs","byte_start":5541,"byte_end":5562,"line_start":138,"line_end":138,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    pub _type: Uniqueness,","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used binding `_type` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:138:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _type: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `_type` is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:138:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub _type: Uniqueness,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5624,"byte_end":5671,"line_start":143,"line_end":145,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct Uniqueness {","highlight_start":1,"highlight_end":24},{"text":"    pub unique: bool,","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:143:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Uniqueness {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unique: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a struct field","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":5652,"byte_end":5668,"line_start":144,"line_end":144,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    pub unique: bool,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a struct field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:144:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unique: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing documentation for a module","code":{"code":"clippy::missing_docs_in_private_items","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":108,"byte_end":407,"line_start":7,"line_end":13,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub(crate) mod js_imports_prelude {","highlight_start":1,"highlight_end":36},{"text":"    use crate::js_glue;","highlight_start":1,"highlight_end":24},{"text":"    pub use js_glue::js_imports::{clear_expired_cache, console_error, console_log, get_prototype_of, object_entries, serve_static, to_string};","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[cfg(debug_assertions)]","highlight_start":1,"highlight_end":29},{"text":"    pub use js_glue::js_imports::{console_error_, console_log_};","highlight_start":1,"highlight_end":65},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for a module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) mod js_imports_prelude {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::js_glue;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use js_glue::js_imports::{clear_expired_cache, console_error, console_log, get_prototype\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use js_glue::js_imports::{console_error_, console_log_};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `async` for function with no await statements","code":{"code":"clippy::unused_async","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":7205,"byte_end":7286,"line_start":217,"line_end":219,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn check_encrypted_tunnel() -> bool {","highlight_start":1,"highlight_end":48},{"text":"    ENCRYPTED_TUNNEL_FLAG.get()","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the `async` from this function","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::unused-async` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::unused_async)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `async` for function with no await statements\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:217:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn check_encrypted_tunnel() -> bool {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ENCRYPTED_TUNNEL_FLAG.get()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing the `async` from this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::unused-async` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::unused_async)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `async` for function with no await statements","code":{"code":"clippy::unused_async","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20216,"byte_end":20572,"line_start":582,"line_end":588,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {","highlight_start":1,"highlight_end":66},{"text":"    if arg.is_null() || arg.is_undefined() {","highlight_start":1,"highlight_end":45},{"text":"        return Err(JsError::new(\"The argument is null or undefined.\"));","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument passed: {:?}. To test promise rejection, call with no argument.\", arg))","highlight_start":1,"highlight_end":165},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the `async` from this function","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `async` for function with no await statements\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:582:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn test_wasm(arg: JsValue) -> Result<String, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if arg.is_null() || arg.is_undefined() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return Err(JsError::new(\"The argument is null or undefined.\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(format!(\"WASM Interceptor version {INTERCEPTOR_VERSION} successfully loaded. Argument pa\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m588\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing the `async` from this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `async` for function with no await statements","code":{"code":"clippy::unused_async","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":20716,"byte_end":20918,"line_start":593,"line_end":601,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn persistence_check() -> i32 {","highlight_start":1,"highlight_end":42},{"text":"    let counter = COUNTER.with(|v| {","highlight_start":1,"highlight_end":37},{"text":"        v.set(v.get() + 1);","highlight_start":1,"highlight_end":28},{"text":"        v.get()","highlight_start":1,"highlight_end":16},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"WASM Counter: {}\", counter));","highlight_start":1,"highlight_end":57},{"text":"    counter","highlight_start":1,"highlight_end":12},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the `async` from this function","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `async` for function with no await statements\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:593:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m593\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn persistence_check() -> i32 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let counter = COUNTER.with(|v| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.set(v.get() + 1);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m596\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v.get()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    counter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing the `async` from this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":14434,"byte_end":16769,"line_start":429,"line_end":490,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {","highlight_start":1,"highlight_end":92},{"text":"    let mut form_data = HashMap::<String, Value>::new();","highlight_start":1,"highlight_end":57},{"text":"    for entry in FormData::entries(&FormData::from(js_body.clone())) {","highlight_start":1,"highlight_end":71},{"text":"        let entry = entry.map_err(|err| {","highlight_start":1,"highlight_end":42},{"text":"            let msg = format!(","highlight_start":1,"highlight_end":31},{"text":"                \"FormData entry error: {}\",","highlight_start":1,"highlight_end":44},{"text":"                err.as_string().unwrap_or(\"issue getting FormData entry\".to_string())","highlight_start":1,"highlight_end":86},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            console_error!(&msg);","highlight_start":1,"highlight_end":34},{"text":"            msg","highlight_start":1,"highlight_end":16},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if entry.is_null() || entry.is_undefined() {","highlight_start":1,"highlight_end":53},{"text":"            // we skip null or undefined entries if any","highlight_start":1,"highlight_end":56},{"text":"            continue;","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // [key, value]","highlight_start":1,"highlight_end":24},{"text":"        let key_val_entry = Array::from(&entry);","highlight_start":1,"highlight_end":49},{"text":"        let key = key_val_entry.get(0).as_string().ok_or(\"Object key was not a string\".to_string())?;","highlight_start":1,"highlight_end":102},{"text":"        let value = key_val_entry.get(1);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = {","highlight_start":1,"highlight_end":21},{"text":"            if value.is_instance_of::<File>() {","highlight_start":1,"highlight_end":48},{"text":"                construct_file_data(value).await?","highlight_start":1,"highlight_end":50},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                match get_constructor_name(&value).as_str() {","highlight_start":1,"highlight_end":62},{"text":"                    \"String\" => json!({","highlight_start":1,"highlight_end":40},{"text":"                        \"_type\": \"String\",","highlight_start":1,"highlight_end":43},{"text":"                        \"value\": value.as_string().unwrap(),","highlight_start":1,"highlight_end":61},{"text":"                    }),","highlight_start":1,"highlight_end":24},{"text":"                    \"Number\" => json!({","highlight_start":1,"highlight_end":40},{"text":"                        \"_type\": \"Number\",","highlight_start":1,"highlight_end":43},{"text":"                        \"value\": value.as_f64().unwrap(),","highlight_start":1,"highlight_end":58},{"text":"                    }),","highlight_start":1,"highlight_end":24},{"text":"                    \"Boolean\" => json!({","highlight_start":1,"highlight_end":41},{"text":"                        \"_type\": \"Boolean\",","highlight_start":1,"highlight_end":44},{"text":"                        \"value\": value.as_bool().unwrap(),","highlight_start":1,"highlight_end":59},{"text":"                    }),","highlight_start":1,"highlight_end":24},{"text":"                    x => return Err(format!(\"Unsupported value type: {} for key: {}\", x, key)),","highlight_start":1,"highlight_end":96},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if form_data.contains_key(&key) {","highlight_start":1,"highlight_end":42},{"text":"            if !form_data.get(&key).unwrap().is_array() {","highlight_start":1,"highlight_end":58},{"text":"                let old_value = form_data.get(&key).unwrap();","highlight_start":1,"highlight_end":62},{"text":"                form_data.insert(key, json!([old_value, data]));","highlight_start":1,"highlight_end":65},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let old_value = form_data.get_mut(&key).unwrap();","highlight_start":1,"highlight_end":66},{"text":"                old_value","highlight_start":1,"highlight_end":26},{"text":"                    .as_array_mut()","highlight_start":1,"highlight_end":36},{"text":"                    .expect_throw(\"expected old value to be an array; qed above\")","highlight_start":1,"highlight_end":82},{"text":"                    .push(data);","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            form_data.insert(key, serde_json::to_value(data).unwrap());","highlight_start":1,"highlight_end":72},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(form_data)","highlight_start":1,"highlight_end":18},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":12284,"byte_end":12303,"line_start":356,"line_end":356,"column_start":35,"column_end":54,"is_primary":true,"text":[{"text":"            let form_data = match construct_form_data(&js_body).await {","highlight_start":35,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::single-call-fn` implied by `-W clippy::restriction`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::restriction` add `#[allow(clippy::single_call_fn)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:429:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_form_data(js_body: &JsValue) -> Result<HashMap<String, Value>, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m430\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut form_data = HashMap::<String, Value>::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for entry in FormData::entries(&FormData::from(js_body.clone())) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entry = entry.map_err(|err| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(form_data)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:356:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let form_data = match construct_form_data(&js_body).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::single-call-fn` implied by `-W clippy::restriction`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::restriction` add `#[allow(clippy::single_call_fn)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":17807,"byte_end":20097,"line_start":515,"line_end":577,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {","highlight_start":1,"highlight_end":84},{"text":"    let reflect_get = js_sys::Reflect::get;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let name = reflect_get(&value, &JsValue::from(\"name\"))","highlight_start":1,"highlight_end":59},{"text":"        .map_err(|_| \"expected name to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_string()","highlight_start":1,"highlight_end":21},{"text":"        .ok_or(\"expected name to be a string\".to_string())?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let size = reflect_get(&value, &JsValue::from(\"size\"))","highlight_start":1,"highlight_end":59},{"text":"        .map_err(|_| \"expected size to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_f64()","highlight_start":1,"highlight_end":18},{"text":"        .ok_or(\"expected size to be a number\".to_string())?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let type_ = reflect_get(&value, &JsValue::from(\"type\"))","highlight_start":1,"highlight_end":60},{"text":"        .map_err(|_| \"expected type to be present\".to_string())?","highlight_start":1,"highlight_end":65},{"text":"        .as_string()","highlight_start":1,"highlight_end":21},{"text":"        .ok_or(\"expected type to be a string\".to_string())?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let reader = File::from(value)","highlight_start":1,"highlight_end":35},{"text":"        .stream()","highlight_start":1,"highlight_end":18},{"text":"        .get_reader()","highlight_start":1,"highlight_end":22},{"text":"        .dyn_into::<web_sys::ReadableStreamDefaultReader>()","highlight_start":1,"highlight_end":60},{"text":"        .map_err(|_| \"issue getting ReadableStreamDefaultReader entry\".to_string())?;","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut buff = Vec::new();","highlight_start":1,"highlight_end":31},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        let chunk_object = JsFuture::from(reader.read())","highlight_start":1,"highlight_end":57},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .map_err(|_| \"Read\".to_string())?","highlight_start":1,"highlight_end":46},{"text":"            .dyn_into::<Object>()","highlight_start":1,"highlight_end":34},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?;","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let done = reflect_get(&chunk_object, &JsValue::from_str(\"done\"))","highlight_start":1,"highlight_end":74},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68},{"text":"            .as_bool()","highlight_start":1,"highlight_end":23},{"text":"            .ok_or(\"this value will always be boolean\".to_string())?;","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if done {","highlight_start":1,"highlight_end":18},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk = reflect_get(&chunk_object, &JsValue::from_str(\"value\"))","highlight_start":1,"highlight_end":76},{"text":"            .map_err(|_| \"issue casting Object entry\".to_string())?","highlight_start":1,"highlight_end":68},{"text":"            .dyn_into::<Uint8Array>()","highlight_start":1,"highlight_end":38},{"text":"            .map_err(|_| \"we're copying bytes\".to_string())?;","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let buff_len = buff.len();","highlight_start":1,"highlight_end":35},{"text":"        buff.resize(buff_len + chunk.length() as usize, 0);","highlight_start":1,"highlight_end":60},{"text":"        chunk.copy_to(&mut buff[buff_len..]);","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // compress and encode the file","highlight_start":1,"highlight_end":36},{"text":"    let buff = compress_gzip_and_encode_b64(&buff).map_err(|e| format!(\"Failed to compress and encode file: {}\", e))?;","highlight_start":1,"highlight_end":119},{"text":"    console_log!(&format!(\"File `{name}` compressed and encoded successfully\"));","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(json!({","highlight_start":1,"highlight_end":15},{"text":"        \"_type\": \"File\",","highlight_start":1,"highlight_end":25},{"text":"        \"name\": name,","highlight_start":1,"highlight_end":22},{"text":"        \"size\": size,","highlight_start":1,"highlight_end":22},{"text":"        \"type\": type_,","highlight_start":1,"highlight_end":23},{"text":"        \"buff\": buff,","highlight_start":1,"highlight_end":22},{"text":"    }))","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":15381,"byte_end":15400,"line_start":453,"line_end":453,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                construct_file_data(value).await?","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:515:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn construct_file_data(value: JsValue) -> Result<serde_json::Value, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let reflect_get = js_sys::Reflect::get;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let name = reflect_get(&value, &JsValue::from(\"name\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:453:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                construct_file_data(value).await?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":16771,"byte_end":17805,"line_start":492,"line_end":513,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn get_constructor_name(obj: &JsValue) -> String {","highlight_start":1,"highlight_end":51},{"text":"    // Get the prototype of the object","highlight_start":1,"highlight_end":39},{"text":"    let prototype = get_prototype_of(obj).expect_throw(\"expected prototype to be present since FormData has a finite set of prototypes (?!)\");","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Get the constructor from the prototype using Reflect.get","highlight_start":1,"highlight_end":64},{"text":"    let constructor = js_sys::Reflect::get(&prototype, &JsValue::from(\"constructor\")).expect_throw(\"expected constructor to be present; qed\");","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Check if the constructor is a function","highlight_start":1,"highlight_end":46},{"text":"    if constructor.is_function() {","highlight_start":1,"highlight_end":35},{"text":"        // Convert the function to string and extract the name","highlight_start":1,"highlight_end":63},{"text":"        let constructor_name = to_string(&constructor);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Extract the name from the function string","highlight_start":1,"highlight_end":53},{"text":"        if let Some(name_start) = constructor_name.find(\"function \") {","highlight_start":1,"highlight_end":71},{"text":"            let name_end = constructor_name.find(\"(\").unwrap_or(constructor_name.len());","highlight_start":1,"highlight_end":89},{"text":"            let name = &constructor_name[name_start + 9..name_end].trim(); // Skip \"function \"","highlight_start":1,"highlight_end":95},{"text":"            return name.to_string();","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    \"undefined\".to_string()","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":15458,"byte_end":15478,"line_start":455,"line_end":455,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"                match get_constructor_name(&value).as_str() {","highlight_start":23,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:492:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn get_constructor_name(obj: &JsValue) -> String {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Get the prototype of the object\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let prototype = get_prototype_of(obj).expect_throw(\"expected prototype to be present since \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"undefined\".to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:455:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match get_constructor_name(&value).as_str() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":1415,"byte_end":5208,"line_start":39,"line_end":121,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":5,"highlight_end":69},{"text":"        let mut init_config = InitConfig::default();","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let entries = js_imports::object_entries(&obj);","highlight_start":1,"highlight_end":56},{"text":"        for entry in entries.iter() {","highlight_start":1,"highlight_end":38},{"text":"            let val = js_sys::Array::from(&entry); // [key, value] result from Object.entries","highlight_start":1,"highlight_end":94},{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":1,"highlight_end":111},{"text":"                \"providers\" => {","highlight_start":1,"highlight_end":33},{"text":"                    if !val.get(1).is_instance_of::<js_sys::Array>() {","highlight_start":1,"highlight_end":71},{"text":"                        return Err(JsError::new(\"expected `InitConfig.providers` value to be an array\"));","highlight_start":1,"highlight_end":106},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    for provider in js_sys::Array::from(&val.get(1)).iter() {","highlight_start":1,"highlight_end":78},{"text":"                        init_config.providers.push(","highlight_start":1,"highlight_end":52},{"text":"                            provider","highlight_start":1,"highlight_end":37},{"text":"                                .as_string()","highlight_start":1,"highlight_end":45},{"text":"                                .ok_or(JsError::new(\"expected `InitConfig.provider` value to be a string\"))?,","highlight_start":1,"highlight_end":110},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"proxy\" => {","highlight_start":1,"highlight_end":29},{"text":"                    init_config.proxy = val","highlight_start":1,"highlight_end":44},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":1,"highlight_end":99},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"staticPath\" => {","highlight_start":1,"highlight_end":34},{"text":"                    let path = val","highlight_start":1,"highlight_end":35},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.staticPath` value to be a string\"))?;","highlight_start":1,"highlight_end":104},{"text":"                    init_config.static_paths.push(path);","highlight_start":1,"highlight_end":57},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"staticPaths\" => {","highlight_start":1,"highlight_end":35},{"text":"                    // paths is a list of strings","highlight_start":1,"highlight_end":50},{"text":"                    if !val.get(1).is_instance_of::<js_sys::Array>() {","highlight_start":1,"highlight_end":71},{"text":"                        return Err(JsError::new(\"expected `InitConfig.staticPaths` value to be an array\"));","highlight_start":1,"highlight_end":108},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    for path in js_sys::Array::from(&val.get(1)).iter() {","highlight_start":1,"highlight_end":74},{"text":"                        let value = path","highlight_start":1,"highlight_end":41},{"text":"                            .as_string()","highlight_start":1,"highlight_end":41},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.staticPaths` value to be a string\"))?;","highlight_start":1,"highlight_end":109},{"text":"                        init_config.static_paths.push(value);","highlight_start":1,"highlight_end":62},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"cacheAssetLimit\" => {","highlight_start":1,"highlight_end":39},{"text":"                    // if we can't get the storage estimate, we rely on the default value","highlight_start":1,"highlight_end":90},{"text":"                    let estimate = get_storage_estimate().await;","highlight_start":1,"highlight_end":65},{"text":"                    if let Ok(estimate) = estimate {","highlight_start":1,"highlight_end":53},{"text":"                        let mut val = val","highlight_start":1,"highlight_end":42},{"text":"                            .get(1)","highlight_start":1,"highlight_end":36},{"text":"                            .as_f64()","highlight_start":1,"highlight_end":38},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.cacheAssetLimit` value to be a number\"))?;","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let estimate = estimate.as_f64().expect_throw(\"expected storage estimate to be a number\");","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        if val > estimate {","highlight_start":1,"highlight_end":44},{"text":"                            // we are going with half the estimate","highlight_start":1,"highlight_end":67},{"text":"                            // estimates are usually [very large]<https://developer.mozilla.org/en-US/play?id=qHEOFcbSol%2Bevp8cXcV4AHeiMNC9eg1hPfouaBm%2Fdv3CX6MmH3pAqbE018v9o2C0XOIUTTJe%2BTlzxxbC>","highlight_start":1,"highlight_end":198},{"text":"                            val = estimate * 0.5;","highlight_start":1,"highlight_end":50},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        CACHE_STORAGE_LIMIT.with(|limit| limit.set(val as u32));","highlight_start":1,"highlight_end":81},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    // we rather pipe the issues now than have them silently ignored","highlight_start":1,"highlight_end":85},{"text":"                    return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":54},{"text":"                        \"unexpected key in `InitConfig`: {}\",","highlight_start":1,"highlight_end":62},{"text":"                        val.get(0).as_string().expect_throw(\"expected object key to be a string\")","highlight_start":1,"highlight_end":98},{"text":"                    )));","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(init_config)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":21906,"byte_end":21921,"line_start":624,"line_end":624,"column_start":23,"column_end":38,"is_primary":true,"text":[{"text":"    let init_config = InitConfig::new(init_config).await?;","highlight_start":23,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:39:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn new(obj: js_sys::Object) -> Result<Self, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut init_config = InitConfig::default();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entries = js_imports::object_entries(&obj);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(init_config)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:624:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let init_config = InitConfig::new(init_config).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/js.rs","byte_start":23024,"byte_end":25730,"line_start":655,"line_end":738,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn init_tunnel(provider: &str, proxy: &str) -> Result<(), String> {","highlight_start":1,"highlight_end":74},{"text":"    let _provider_url = rebuild_url(provider);","highlight_start":1,"highlight_end":47},{"text":"    let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(crypto::KeyUse::Ecdh)?;","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    PRIVATE_JWK_ECDH.with(|v| {","highlight_start":1,"highlight_end":32},{"text":"        v.set(Some(private_jwk_ecdh.clone()));","highlight_start":1,"highlight_end":47},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let b64_pub_jwk = pub_jwk_ecdh.export_as_base64();","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let proxy = format!(\"{proxy}/init-tunnel?backend={provider}\");","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res = reqwest::Client::new()","highlight_start":1,"highlight_end":37},{"text":"        .post(&proxy)","highlight_start":1,"highlight_end":22},{"text":"        // .body(b64_pub_jwk.clone())","highlight_start":1,"highlight_end":38},{"text":"        .headers({","highlight_start":1,"highlight_end":19},{"text":"            let mut headers = reqwest::header::HeaderMap::new();","highlight_start":1,"highlight_end":65},{"text":"            let uuid = Uuid::new_v4().to_string();","highlight_start":1,"highlight_end":51},{"text":"            UUID.set(uuid.clone());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            headers.insert(\"x-ecdh-init\", HeaderValue::from_str(&b64_pub_jwk).unwrap());","highlight_start":1,"highlight_end":89},{"text":"            headers.insert(\"x-client-uuid\", HeaderValue::from_str(&uuid).unwrap());","highlight_start":1,"highlight_end":84},{"text":"            headers","highlight_start":1,"highlight_end":20},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"        .send()","highlight_start":1,"highlight_end":16},{"text":"        .await","highlight_start":1,"highlight_end":15},{"text":"        .map_err(|e| {","highlight_start":1,"highlight_end":23},{"text":"            console_log!(&format!(\"Failed to send request: {}\", e));","highlight_start":1,"highlight_end":69},{"text":"            e.to_string()","highlight_start":1,"highlight_end":26},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if res.status().eq(&401) {","highlight_start":1,"highlight_end":31},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(false);","highlight_start":1,"highlight_end":42},{"text":"        return Err(String::from(\"401 response from proxy, user is not authorized.\"));","highlight_start":1,"highlight_end":86},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let res_bytes = res.bytes().await.map_err(|e| {","highlight_start":1,"highlight_end":52},{"text":"        console_log!(&format!(\"Failed to read response: {}\", e));","highlight_start":1,"highlight_end":66},{"text":"        e.to_string()","highlight_start":1,"highlight_end":22},{"text":"    })?;","highlight_start":1,"highlight_end":9},{"text":"    let mut proxy_data: serde_json::Map<String, serde_json::Value> = serde_json::from_slice(res_bytes.as_ref()).map_err(|val| {","highlight_start":1,"highlight_end":128},{"text":"        console_log!(&format!(","highlight_start":1,"highlight_end":31},{"text":"            \"Failed to decode response: {}, Data is :{}\",","highlight_start":1,"highlight_end":58},{"text":"            val,","highlight_start":1,"highlight_end":17},{"text":"            String::from_utf8_lossy(res_bytes.as_ref())","highlight_start":1,"highlight_end":56},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        val.to_string()","highlight_start":1,"highlight_end":24},{"text":"    })?;","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    UP_JWT.set(","highlight_start":1,"highlight_end":16},{"text":"        proxy_data","highlight_start":1,"highlight_end":19},{"text":"            .remove(\"up-JWT\")","highlight_start":1,"highlight_end":30},{"text":"            .ok_or(\"up_jwt not found\")?","highlight_start":1,"highlight_end":40},{"text":"            .as_str()","highlight_start":1,"highlight_end":22},{"text":"            .unwrap() // infalliable","highlight_start":1,"highlight_end":37},{"text":"            .to_string(),","highlight_start":1,"highlight_end":26},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    USER_SYMMETRIC_KEY.set(Some(private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?));","highlight_start":1,"highlight_end":104},{"text":"    ENCRYPTED_TUNNEL_FLAG.set(true);","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let proxy_url = Url::parse(&proxy).map_err(|e| e.to_string())?;","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let url_proxy_ = &format!(","highlight_start":1,"highlight_end":31},{"text":"        \"{}://{}:{}\",","highlight_start":1,"highlight_end":22},{"text":"        proxy_url.scheme(),","highlight_start":1,"highlight_end":28},{"text":"        proxy_url.host().expect_throw(\"expected host to be present; qed\"),","highlight_start":1,"highlight_end":75},{"text":"        proxy_url.port().unwrap_or(443)","highlight_start":1,"highlight_end":40},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let provider_client = new_client(url_proxy_).map_err(|e| {","highlight_start":1,"highlight_end":63},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(false);","highlight_start":1,"highlight_end":42},{"text":"        e.to_string()","highlight_start":1,"highlight_end":22},{"text":"    })?;","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    L8_CLIENTS.with(|v| {","highlight_start":1,"highlight_end":26},{"text":"        let mut map = v.take();","highlight_start":1,"highlight_end":32},{"text":"        map.insert(provider.to_string(), provider_client);","highlight_start":1,"highlight_end":59},{"text":"        v.replace(map);","highlight_start":1,"highlight_end":24},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    console_log!(&format!(\"Encrypted tunnel established with provider: {}\", provider));","highlight_start":1,"highlight_end":88},{"text":"    Ok(())","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/js.rs","byte_start":22560,"byte_end":22571,"line_start":642,"line_end":642,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        init_tunnel(provider, &init_config.proxy).await.map_err(|e| {","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:655:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn init_tunnel(provider: &str, proxy: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m656\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let _provider_url = rebuild_url(provider);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m657\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(crypto::KeyUse::Ecdh)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/js.rs:642:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        init_tunnel(provider, &init_config.proxy).await.map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":1358,"byte_end":3904,"line_start":47,"line_end":102,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn new(obj: js_sys::Object) -> Result<Self, JsError> {","highlight_start":5,"highlight_end":59},{"text":"        let mut init_config = InitConfig::default();","highlight_start":1,"highlight_end":53},{"text":"        let entries = object_entries(&obj);","highlight_start":1,"highlight_end":44},{"text":"        for entry in entries.iter() {","highlight_start":1,"highlight_end":38},{"text":"            let val = js_sys::Array::from(&entry); // [key, value] result from Object.entries","highlight_start":1,"highlight_end":94},{"text":"            match val.get(0).as_string().ok_or(JsError::new(\"expected object key to be a string\"))?.as_str() {","highlight_start":1,"highlight_end":111},{"text":"                \"url\" => {","highlight_start":1,"highlight_end":27},{"text":"                    init_config.url = val","highlight_start":1,"highlight_end":42},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.url` value to be a string\"))?;","highlight_start":1,"highlight_end":97},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"proxy\" => {","highlight_start":1,"highlight_end":29},{"text":"                    init_config.proxy = val","highlight_start":1,"highlight_end":44},{"text":"                        .get(1)","highlight_start":1,"highlight_end":32},{"text":"                        .as_string()","highlight_start":1,"highlight_end":37},{"text":"                        .ok_or(JsError::new(\"expected `InitConfig.proxy` value to be a string\"))?;","highlight_start":1,"highlight_end":99},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                \"protocols\" => {","highlight_start":1,"highlight_end":33},{"text":"                    if val.get(1).is_instance_of::<js_sys::Array>() {","highlight_start":1,"highlight_end":70},{"text":"                        let protocols = js_sys::Array::from(&val.get(1));","highlight_start":1,"highlight_end":74},{"text":"                        let mut protocol_list = Vec::new();","highlight_start":1,"highlight_end":60},{"text":"                        for protocol in protocols.iter() {","highlight_start":1,"highlight_end":59},{"text":"                            protocol_list.push(","highlight_start":1,"highlight_end":48},{"text":"                                protocol","highlight_start":1,"highlight_end":41},{"text":"                                    .as_string()","highlight_start":1,"highlight_end":49},{"text":"                                    .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?,","highlight_start":1,"highlight_end":115},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        init_config.protocols = Some(protocol_list);","highlight_start":1,"highlight_end":69},{"text":"                    } else if val.get(1).is_string() {","highlight_start":1,"highlight_end":55},{"text":"                        let protocols = val","highlight_start":1,"highlight_end":44},{"text":"                            .get(1)","highlight_start":1,"highlight_end":36},{"text":"                            .as_string()","highlight_start":1,"highlight_end":41},{"text":"                            .ok_or(JsError::new(\"expected `InitConfig.protocols` value to be a string\"))?;","highlight_start":1,"highlight_end":107},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        init_config.protocols = Some(vec![protocols]);","highlight_start":1,"highlight_end":71},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(JsError::new(\"expected `InitConfig.protocols` value to be a string or an array\"));","highlight_start":1,"highlight_end":118},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    // we rather pipe the issues now than have them silently ignored","highlight_start":1,"highlight_end":85},{"text":"                    return Err(JsError::new(&format!(","highlight_start":1,"highlight_end":54},{"text":"                        \"unexpected key in `InitConfig`: {}\",","highlight_start":1,"highlight_end":62},{"text":"                        val.get(0).as_string().expect_throw(\"expected object key to be a string\")","highlight_start":1,"highlight_end":98},{"text":"                    )));","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(init_config)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":4644,"byte_end":4659,"line_start":128,"line_end":128,"column_start":23,"column_end":38,"is_primary":true,"text":[{"text":"        let options = InitConfig::new(options)?;","highlight_start":23,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:47:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(obj: js_sys::Object) -> Result<Self, JsError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut init_config = InitConfig::default();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let entries = object_entries(&obj);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for entry in entries.iter() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(init_config)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:128:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = InitConfig::new(options)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":17232,"byte_end":17296,"line_start":430,"line_end":432,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        WasmWebSocketRef::default()","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":10094,"byte_end":17242,"line_start":265,"line_end":430,"column_start":6,"column_end":15,"is_primary":true,"text":[{"text":"impl WasmWebSocketRef {","highlight_start":6,"highlight_end":24},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `url` field of this object.","highlight_start":1,"highlight_end":51},{"text":"    pub fn url(&self) -> String {","highlight_start":1,"highlight_end":34},{"text":"        self.0.clone()","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `readyState` field of this object.","highlight_start":1,"highlight_end":58},{"text":"    pub fn ready_state(&self) -> u16 {","highlight_start":1,"highlight_end":39},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.ready_state()))","highlight_start":1,"highlight_end":85},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `bufferedAmount` field of this object.","highlight_start":1,"highlight_end":62},{"text":"    pub fn buffered_amount(&self) -> u32 {","highlight_start":1,"highlight_end":43},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.buffered_amount()))","highlight_start":1,"highlight_end":89},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `onopen` field of this object.","highlight_start":1,"highlight_end":54},{"text":"    pub fn onopen(&self) -> Option<Function> {","highlight_start":1,"highlight_end":47},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onopen()))","highlight_start":1,"highlight_end":80},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = onopen, setter)]","highlight_start":1,"highlight_end":46},{"text":"    /// Setter for the `onopen` field of this object.","highlight_start":1,"highlight_end":54},{"text":"    pub fn set_onopen(&self, value: Option<Function>) {","highlight_start":1,"highlight_end":56},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            if let Some(stream) = val.get_mut(&self.0) {","highlight_start":1,"highlight_end":57},{"text":"                stream.socket.set_onopen(value.as_ref());","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `onerror` field of this object.","highlight_start":1,"highlight_end":55},{"text":"    pub fn onerror(&self) -> Option<Function> {","highlight_start":1,"highlight_end":48},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onerror()))","highlight_start":1,"highlight_end":81},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = onerror, setter)]","highlight_start":1,"highlight_end":47},{"text":"    /// Setter for the `onerror` field of this object.","highlight_start":1,"highlight_end":55},{"text":"    pub fn set_onerror(&self, value: Option<Function>) {","highlight_start":1,"highlight_end":57},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            if let Some(stream) = val.get_mut(&self.0) {","highlight_start":1,"highlight_end":57},{"text":"                stream.socket.set_onerror(value.as_ref());","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `onclose` field of this object.","highlight_start":1,"highlight_end":55},{"text":"    pub fn onclose(&self) -> Option<Function> {","highlight_start":1,"highlight_end":48},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onclose()))","highlight_start":1,"highlight_end":81},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = onclose, setter)]","highlight_start":1,"highlight_end":47},{"text":"    /// Setter for the `onclose` field of this object.","highlight_start":1,"highlight_end":55},{"text":"    pub fn set_onclose(&self, value: Option<Function>) {","highlight_start":1,"highlight_end":57},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            if let Some(stream) = val.get_mut(&self.0) {","highlight_start":1,"highlight_end":57},{"text":"                stream.socket.set_onclose(value.as_ref());","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `extensions` field of this object.","highlight_start":1,"highlight_end":58},{"text":"    pub fn extensions(&self) -> String {","highlight_start":1,"highlight_end":41},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.extensions()))","highlight_start":1,"highlight_end":84},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `protocol` field of this object.","highlight_start":1,"highlight_end":56},{"text":"    pub fn protocol(&self) -> String {","highlight_start":1,"highlight_end":39},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.protocol()))","highlight_start":1,"highlight_end":82},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(getter)]","highlight_start":1,"highlight_end":28},{"text":"    /// Getter for the `binaryType` field of this object.","highlight_start":1,"highlight_end":58},{"text":"    pub fn onmessage(&self) -> Option<Function> {","highlight_start":1,"highlight_end":50},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.onmessage()))","highlight_start":1,"highlight_end":83},{"text":"            .unwrap_or_default()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = onmessage, setter)]","highlight_start":1,"highlight_end":49},{"text":"    /// Setter for the `binaryType` field of this object.","highlight_start":1,"highlight_end":58},{"text":"    pub fn set_onmessage(&self, value: Option<Function>) {","highlight_start":1,"highlight_end":59},{"text":"        // self.on_receive(value);","highlight_start":1,"highlight_end":35},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            if let Some(stream) = val.get_mut(&self.0) {","highlight_start":1,"highlight_end":57},{"text":"                // we need yo overwrite the on","highlight_start":1,"highlight_end":47},{"text":"                stream.socket.set_onmessage(Some(&preprocess_on_message(value)));","highlight_start":1,"highlight_end":82},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = addEventListener)]","highlight_start":1,"highlight_end":48},{"text":"    /// Sets an event listener on the WebSocket object.","highlight_start":1,"highlight_end":56},{"text":"    /// It intercepts the `message` event and plugs in our custom logic to decrypt the message.","highlight_start":1,"highlight_end":96},{"text":"    pub fn add_event_listener(&self, type_: &str, listener: Option<Function>) {","highlight_start":1,"highlight_end":80},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            let stream = val.get_mut(&self.0).expect_throw(&format!(\"Socket with url {} not found\", self.0));","highlight_start":1,"highlight_end":110},{"text":"            if type_.eq_ignore_ascii_case(\"message\") {","highlight_start":1,"highlight_end":55},{"text":"                stream.socket.set_onmessage(Some(&preprocess_on_message(listener)));","highlight_start":1,"highlight_end":85},{"text":"                return;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if let Some(listener) = &listener {","highlight_start":1,"highlight_end":48},{"text":"                stream","highlight_start":1,"highlight_end":23},{"text":"                    .socket","highlight_start":1,"highlight_end":28},{"text":"                    .add_event_listener_with_callback(type_, listener)","highlight_start":1,"highlight_end":71},{"text":"                    .expect_throw(&format!(\"Failed to add event listener for type: {}\", type_))","highlight_start":1,"highlight_end":96},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = binaryType, getter)]","highlight_start":1,"highlight_end":50},{"text":"    /// Getter for the `binaryType` field of this object.","highlight_start":1,"highlight_end":58},{"text":"    pub fn binary_type(&self) -> BinaryType {","highlight_start":1,"highlight_end":46},{"text":"        LAYER8_SOCKETS","highlight_start":1,"highlight_end":23},{"text":"            .with_borrow(|val| val.get(&self.0).map(|val| val.socket.binary_type()))","highlight_start":1,"highlight_end":85},{"text":"            .unwrap_or(BinaryType::Arraybuffer)","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(js_name = binaryType, setter)]","highlight_start":1,"highlight_end":50},{"text":"    /// Setter for the `binaryType` field of this object.","highlight_start":1,"highlight_end":58},{"text":"    /// This is a no-op since we layer8 dictates the binary type.","highlight_start":1,"highlight_end":66},{"text":"    pub fn set_binary_type(&self, _: BinaryType) {}","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Constructor for the `WebSocket` object.","highlight_start":1,"highlight_end":48},{"text":"    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API.\")]","highlight_start":1,"highlight_end":100},{"text":"    #[wasm_bindgen(constructor)]","highlight_start":1,"highlight_end":33},{"text":"    pub fn new() -> Self {","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:430:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m430\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        WasmWebSocketRef::default()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:265:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mimpl WasmWebSocketRef {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m______^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[allow(dead_code, reason = \"This is for API compatibility with the browser's WebSocket API\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[wasm_bindgen(getter)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Getter for the `url` field of this object.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m429\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[wasm_bindgen(constructor)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m430\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|______________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function is only used once","code":{"code":"clippy::single_call_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/websocket.rs","byte_start":4543,"byte_end":9974,"line_start":127,"line_end":260,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {","highlight_start":5,"highlight_end":83},{"text":"        let options = InitConfig::new(options)?;","highlight_start":1,"highlight_end":49},{"text":"        let rebuilt_url = rebuild_url(&options.url);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // if already present & in open state, return the existing socket ref","highlight_start":1,"highlight_end":78},{"text":"        if let Some(val) = LAYER8_SOCKETS.with_borrow_mut(|val| match val.get(&rebuilt_url) {","highlight_start":1,"highlight_end":94},{"text":"            Some(x) if x.socket.ready_state() <= BrowserWebSocket::OPEN => Some(rebuilt_url.clone()),","highlight_start":1,"highlight_end":102},{"text":"            _ => None,","highlight_start":1,"highlight_end":23},{"text":"        }) {","highlight_start":1,"highlight_end":13},{"text":"            return Ok(WasmWebSocketRef(val));","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let (private_jwk_ecdh, pub_jwk_ecdh) = generate_key_pair(KeyUse::Ecdh)?;","highlight_start":1,"highlight_end":81},{"text":"        PRIVATE_JWK_ECDH.with(|v| {","highlight_start":1,"highlight_end":36},{"text":"            v.set(Some(private_jwk_ecdh.clone()));","highlight_start":1,"highlight_end":51},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let b64_pub_jwk = pub_jwk_ecdh.export_as_base64();","highlight_start":1,"highlight_end":59},{"text":"        console_log!(&format!(\"Connecting to proxy: {}\", options.proxy));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let socket = BrowserWebSocket::new(&options.proxy).map_err(|_e| {","highlight_start":1,"highlight_end":74},{"text":"            console_log!(&format!(\"Failed to connect to proxy: {:?}\", _e));","highlight_start":1,"highlight_end":76},{"text":"            JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":60},{"text":"        })?;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // waiting for the connection to be ready","highlight_start":1,"highlight_end":50},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |_event: Event| {","highlight_start":1,"highlight_end":63},{"text":"                tx.send(())","highlight_start":1,"highlight_end":28},{"text":"                    .expect_throw(\"Failed to send ready state; this is a bug in the code, please report it to the developers\")","highlight_start":1,"highlight_end":127},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket.set_onopen(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            rx.await.map_err(|_e| {","highlight_start":1,"highlight_end":36},{"text":"                console_log!(\"Failed to connect to proxy\");","highlight_start":1,"highlight_end":60},{"text":"                JsValue::from_str(\"Failed to connect to proxy\")","highlight_start":1,"highlight_end":64},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Connected to proxy\");","highlight_start":1,"highlight_end":48},{"text":"            socket.set_onopen(None);","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // let's make the initECDH handshake first","highlight_start":1,"highlight_end":51},{"text":"        let resp_bytes = {","highlight_start":1,"highlight_end":27},{"text":"            let (tx, rx) = oneshot::channel();","highlight_start":1,"highlight_end":47},{"text":"            let closure = Closure::once(move |event: MessageEvent| {","highlight_start":1,"highlight_end":69},{"text":"                let data = event.data().as_string().expect_throw(\"expected the message frame o be a string\");","highlight_start":1,"highlight_end":110},{"text":"                console_log!(&format!(\"Received response: {}\", data));","highlight_start":1,"highlight_end":71},{"text":"                tx.send(data).unwrap();","highlight_start":1,"highlight_end":40},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Setting onmessage\");","highlight_start":1,"highlight_end":47},{"text":"            socket.set_onmessage(Some(closure.as_ref().unchecked_ref()));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // fixme: should be reusable for other operations","highlight_start":1,"highlight_end":62},{"text":"            let uuid = Uuid::new_v4().to_string();","highlight_start":1,"highlight_end":51},{"text":"            UUID.set(uuid.clone());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // sending the public key","highlight_start":1,"highlight_end":38},{"text":"            let payload = Layer8Envelope::WebSocket(WebSocketPayload {","highlight_start":1,"highlight_end":71},{"text":"                payload: None,","highlight_start":1,"highlight_end":31},{"text":"                metadata: json!({","highlight_start":1,"highlight_end":34},{"text":"                    \"backend_url\": rebuilt_url,","highlight_start":1,"highlight_end":48},{"text":"                    \"x-ecdh-init\": b64_pub_jwk,","highlight_start":1,"highlight_end":48},{"text":"                    \"x-client-uuid\": uuid,","highlight_start":1,"highlight_end":43},{"text":"                }),","highlight_start":1,"highlight_end":20},{"text":"            });","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            socket","highlight_start":1,"highlight_end":19},{"text":"                .send_with_u8_array(","highlight_start":1,"highlight_end":37},{"text":"                    &serde_json::to_vec(&payload)","highlight_start":1,"highlight_end":50},{"text":"                        .map_err(|_e| {","highlight_start":1,"highlight_end":40},{"text":"                            console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":91},{"text":"                            JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":75},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .unwrap(),","highlight_start":1,"highlight_end":35},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(&format!(\"Sent public key: {}\", b64_pub_jwk));","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|_e| {","highlight_start":1,"highlight_end":32},{"text":"                    console_log!(&format!(\"Failed to send public key: {:?}\", _e));","highlight_start":1,"highlight_end":83},{"text":"                    JsValue::from_str(\"Failed to send public key\")","highlight_start":1,"highlight_end":67},{"text":"                })?;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            console_log!(\"Waiting for response\");","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // this will be a blocking operation; we need to wait for the response","highlight_start":1,"highlight_end":83},{"text":"            rx.await","highlight_start":1,"highlight_end":21},{"text":"                .inspect(|_| {","highlight_start":1,"highlight_end":31},{"text":"                    console_log!(\"Received response\");","highlight_start":1,"highlight_end":55},{"text":"                    socket.set_onmessage(None); // reset the onmessage callback","highlight_start":1,"highlight_end":80},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .map_err(|e| JsValue::from_str(&e.to_string()))?","highlight_start":1,"highlight_end":65},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        console_log!(\"Decoding response\");","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut proxy_data = {","highlight_start":1,"highlight_end":31},{"text":"            let envelope = Layer8Envelope::from_json_bytes(resp_bytes.as_bytes()).map_err(|_e| {","highlight_start":1,"highlight_end":97},{"text":"                console_log!(&format!(","highlight_start":1,"highlight_end":39},{"text":"                    \"Failed to decode response: {_e}, Data is :{}\",","highlight_start":1,"highlight_end":68},{"text":"                    String::from_utf8_lossy(resp_bytes.as_ref())","highlight_start":1,"highlight_end":65},{"text":"                ));","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                JsValue::from_str(\"Failed to decode response\")","highlight_start":1,"highlight_end":63},{"text":"            })?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match envelope {","highlight_start":1,"highlight_end":29},{"text":"                Layer8Envelope::WebSocket(payload) => {","highlight_start":1,"highlight_end":56},{"text":"                    // we only care about the metadata to make sure the tunnel is secure","highlight_start":1,"highlight_end":89},{"text":"                    serde_json::from_value::<serde_json::Map<String, serde_json::Value>>(payload.metadata)","highlight_start":1,"highlight_end":107},{"text":"                        .expect_throw(\"we expect a json object as the metadata\")","highlight_start":1,"highlight_end":81},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    return Err(JsValue::from_str(\"we expect a websocket response\"));","highlight_start":1,"highlight_end":85},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        UP_JWT.set(proxy_data.remove(\"up-JWT\").ok_or(\"up_jwt not found\")?.as_str().unwrap().to_string());","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shared_key = private_jwk_ecdh.get_ecdh_shared_secret(&jwk_from_map(proxy_data)?)?;","highlight_start":1,"highlight_end":95},{"text":"        USER_SYMMETRIC_KEY.set(Some(shared_key.clone()));","highlight_start":1,"highlight_end":58},{"text":"        ENCRYPTED_TUNNEL_FLAG.set(true);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        LAYER8_SOCKETS.with_borrow_mut(|val| {","highlight_start":1,"highlight_end":47},{"text":"            val.insert(rebuilt_url.clone(), WasmWebSocket { socket });","highlight_start":1,"highlight_end":71},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(WasmWebSocketRef(rebuilt_url))","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"used here","code":null,"level":"note","spans":[{"file_name":"src/websocket.rs","byte_start":17832,"byte_end":17852,"line_start":447,"line_end":447,"column_start":17,"column_end":37,"is_primary":true,"text":[{"text":"        *self = WasmWebSocket::init_(options).await?;","highlight_start":17,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function is only used once\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn init_(options: js_sys::Object) -> Result<WasmWebSocketRef, JsValue> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = InitConfig::new(options)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let rebuilt_url = rebuild_url(&options.url);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(WasmWebSocketRef(rebuilt_url))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/websocket.rs:447:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        *self = WasmWebSocket::init_(options).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"544 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 544 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0602`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0602`.\u001b[0m\n"}
